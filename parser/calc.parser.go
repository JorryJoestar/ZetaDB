// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"fmt"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 14

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE          NodeEnum = 16
	UPDATE_NODE       NodeEnum = 17
	UPDATE_LIST_ENTRY NodeEnum = 18
	INSERT_NODE       NodeEnum = 19

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dcl *DCLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dql */
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode

	/* dml */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode
	Insert          *InsertNode
	DeleteNode      *DeleteNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	DeleteStmt *DeleteNode

	/* public */
	Subquery *QueryNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

//line parser/grammar.y:242
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const FROM = 57346
const WHERE = 57347
const CREATE = 57348
const TABLE = 57349
const SEMICOLON = 57350
const DROP = 57351
const ALTER = 57352
const ADD = 57353
const ASSERTION = 57354
const VIEW = 57355
const AS = 57356
const INDEX = 57357
const ON = 57358
const TRIGGER = 57359
const REFERENCING = 57360
const BEFORE = 57361
const UPDATE = 57362
const OF = 57363
const AFTER = 57364
const INSTEAD = 57365
const INSERT = 57366
const DELETE = 57367
const OLD = 57368
const ROW = 57369
const NEW = 57370
const FOR = 57371
const EACH = 57372
const STATEMENT = 57373
const WHEN = 57374
const BEGINTOKEN = 57375
const END = 57376
const STAR = 57377
const SUM = 57378
const AVG = 57379
const MIN = 57380
const MAX = 57381
const COUNT = 57382
const DISTINCT = 57383
const PLUS = 57384
const SUBTRACT = 57385
const DIVISION = 57386
const CONCATENATION = 57387
const DEFAULT = 57388
const UNIQUE = 57389
const PRIMARYKEY = 57390
const CHECK = 57391
const FOREIGNKEY = 57392
const REFERENCES = 57393
const NOT_DEFERRABLE = 57394
const DEFERED_DEFERRABLE = 57395
const IMMEDIATE_DEFERRABLE = 57396
const UPDATE_NULL = 57397
const UPDATE_CASCADE = 57398
const DELETE_NULL = 57399
const DELETE_CASCADE = 57400
const DEFERRED = 57401
const IMMEDIATE = 57402
const CONSTRAINT = 57403
const AND = 57404
const OR = 57405
const LIKE = 57406
const IN = 57407
const ALL = 57408
const ANY = 57409
const IS = 57410
const EXISTS = 57411
const NOTEQUAL = 57412
const LESS = 57413
const GREATER = 57414
const LESSEQUAL = 57415
const GREATEREQUAL = 57416
const EQUAL = 57417
const CHAR = 57418
const VARCHAR = 57419
const BIT = 57420
const BITVARYING = 57421
const BOOLEAN = 57422
const INT = 57423
const INTEGER = 57424
const SHORTINT = 57425
const FLOAT = 57426
const REAL = 57427
const DOUBLEPRECISION = 57428
const DECIMAL = 57429
const NUMERIC = 57430
const DATE = 57431
const TIME = 57432
const DOT = 57433
const INTVALUE = 57434
const FLOATVALUE = 57435
const STRINGVALUE = 57436
const BOOLVALUE = 57437
const ELSEIF = 57438
const THEN = 57439
const IF = 57440
const ELSE = 57441
const CURSOR = 57442
const DO = 57443
const RETURN = 57444
const SET = 57445
const OUT = 57446
const INOUT = 57447
const DECLARE = 57448
const PROCEDURE = 57449
const FUNCTION = 57450
const RETURNS = 57451
const CALL = 57452
const LPAREN = 57453
const RPAREN = 57454
const NOT = 57455
const NULLMARK = 57456
const COMMA = 57457
const ID = 57458

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"WHERE",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:3148

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 91,
	8, 99,
	112, 99,
	115, 99,
	-2, 115,
	-1, 93,
	8, 101,
	112, 101,
	115, 101,
	-2, 118,
	-1, 94,
	8, 102,
	112, 102,
	115, 102,
	-2, 221,
}

const calcPrivate = 57344

const calcLast = 697

var calcAct = [...]int{
	497, 135, 500, 498, 112, 72, 456, 73, 499, 100,
	134, 71, 165, 200, 161, 291, 90, 114, 196, 290,
	284, 145, 140, 3, 199, 128, 246, 181, 118, 109,
	263, 524, 496, 258, 170, 474, 103, 104, 105, 106,
	107, 113, 113, 103, 104, 105, 106, 107, 279, 247,
	248, 473, 99, 250, 277, 252, 253, 254, 255, 256,
	251, 285, 286, 287, 288, 113, 486, 468, 449, 103,
	104, 105, 106, 107, 448, 162, 167, 132, 169, 133,
	171, 171, 113, 113, 275, 273, 271, 269, 91, 113,
	466, 93, 95, 96, 97, 98, 446, 168, 249, 95,
	96, 97, 98, 164, 293, 294, 295, 463, 422, 297,
	25, 102, 89, 162, 420, 160, 94, 25, 102, 292,
	113, 168, 113, 94, 190, 95, 96, 97, 98, 171,
	110, 470, 189, 180, 193, 413, 221, 445, 293, 294,
	295, 444, 443, 297, 102, 418, 437, 357, 115, 171,
	171, 229, 168, 222, 406, 225, 403, 228, 163, 171,
	171, 171, 171, 469, 91, 226, 193, 93, 110, 402,
	401, 296, 400, 388, 119, 259, 193, 245, 385, 257,
	243, 382, 374, 350, 321, 375, 351, 514, 320, 319,
	260, 318, 270, 272, 274, 276, 278, 317, 316, 315,
	314, 91, 300, 283, 93, 296, 261, 239, 533, 237,
	224, 168, 301, 308, 309, 223, 227, 219, 282, 216,
	412, 327, 218, 217, 302, 311, 143, 326, 262, 264,
	265, 266, 267, 116, 339, 215, 133, 110, 216, 329,
	330, 331, 328, 192, 187, 172, 193, 188, 173, 423,
	59, 168, 168, 356, 347, 348, 58, 57, 345, 56,
	303, 384, 55, 362, 54, 53, 52, 51, 50, 49,
	48, 47, 46, 45, 352, 44, 43, 360, 359, 363,
	414, 365, 488, 367, 361, 369, 484, 371, 241, 242,
	241, 242, 241, 242, 74, 21, 483, 472, 22, 23,
	430, 429, 428, 427, 387, 381, 426, 34, 411, 380,
	410, 409, 35, 36, 24, 37, 390, 38, 373, 372,
	370, 383, 391, 368, 366, 364, 268, 389, 415, 63,
	439, 27, 404, 397, 133, 379, 28, 29, 471, 30,
	349, 31, 298, 77, 378, 76, 377, 407, 376, 234,
	233, 405, 232, 231, 230, 194, 186, 185, 417, 419,
	408, 416, 91, 421, 184, 93, 183, 75, 182, 111,
	61, 60, 70, 24, 338, 24, 74, 141, 508, 141,
	477, 24, 455, 452, 531, 141, 522, 355, 168, 511,
	432, 436, 491, 480, 434, 435, 433, 129, 438, 25,
	461, 24, 460, 442, 344, 141, 343, 40, 39, 221,
	509, 342, 24, 341, 459, 340, 141, 113, 24, 462,
	458, 492, 141, 513, 174, 464, 64, 220, 334, 465,
	467, 32, 33, 241, 242, 358, 130, 131, 127, 240,
	241, 242, 457, 487, 457, 476, 142, 454, 142, 75,
	136, 137, 136, 137, 142, 424, 425, 62, 136, 137,
	478, 241, 242, 202, 482, 479, 133, 168, 494, 485,
	481, 353, 354, 203, 142, 336, 506, 507, 136, 137,
	489, 221, 504, 505, 312, 142, 24, 490, 313, 136,
	137, 142, 221, 241, 242, 136, 137, 95, 96, 97,
	98, 516, 518, 517, 519, 512, 534, 515, 24, 520,
	95, 96, 97, 98, 221, 144, 475, 396, 525, 521,
	527, 126, 528, 221, 530, 526, 201, 202, 529, 504,
	505, 506, 507, 450, 535, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 399, 159,
	252, 253, 254, 255, 256, 251, 285, 286, 287, 288,
	501, 502, 503, 504, 505, 506, 507, 501, 502, 503,
	162, 307, 506, 507, 501, 502, 503, 504, 505, 501,
	502, 503, 285, 286, 287, 288, 177, 117, 197, 305,
	198, 306, 398, 175, 176, 178, 179, 212, 119, 123,
	322, 213, 214, 124, 125, 323, 120, 325, 208, 304,
	121, 122, 67, 209, 204, 68, 69, 324, 211, 205,
	210, 207, 206, 65, 395, 394, 393, 392, 335, 299,
	86, 536, 85, 532, 523, 510, 493, 451, 447, 441,
	440, 431, 386, 346, 337, 333, 332, 280, 238, 236,
	235, 191, 84, 83, 82, 81, 80, 79, 78, 26,
	41, 87, 42, 92, 20, 495, 244, 88, 4, 453,
	139, 138, 18, 17, 166, 281, 289, 101, 16, 310,
	195, 66, 15, 14, 13, 12, 11, 10, 9, 8,
	7, 6, 108, 5, 19, 2, 1,
}

var calcPact = [...]int{
	289, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	651, 324, 300, 653, 658, 160, -1000, 159, 157, 156,
	155, 154, 153, 152, 151, 150, 149, 148, 146, 143,
	141, 140, 134, 260, 259, 408, 315, 607, 593, 261,
	234, 650, 649, 648, 647, 646, 645, 644, 621, 656,
	0, 121, 258, 326, 32, 117, 569, 586, 579, 500,
	332, 343, -1000, -1000, 356, 110, 332, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52, 42, -35, 133, -1000,
	-1000, -1000, -1000, -1000, 333, -1000, -1000, -1000, -1000, 551,
	-1000, -1000, 33, 257, 255, 253, 246, 245, 132, -1000,
	459, -35, 643, -1000, 131, -1000, 244, 562, 494, 443,
	598, 606, 605, 592, 604, 602, 577, 123, -1000, 107,
	106, 101, -1000, -1000, 393, -1000, 7, 99, -1000, -1000,
	-1000, 94, -35, 459, 104, 343, -1000, 243, 242, 241,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 239, 238, -1000,
	642, 641, 93, 640, 91, 431, -1000, -35, -15, -36,
	326, 333, -1000, 7, 90, 33, 33, 33, 33, 33,
	214, -1000, 46, 45, 44, 43, 13, 639, 14, 58,
	230, -1000, 615, 86, 32, 145, -1000, 582, 564, 430,
	-1000, -35, 461, 457, 84, 83, 82, 81, 75, 73,
	72, 68, 584, 601, 591, 343, 332, 459, 459, 459,
	638, -1000, 637, 353, 614, 378, 636, 265, 343, -1000,
	323, 321, 319, 314, 312, -1000, -1000, 535, -1000, 635,
	-1000, -35, -35, 228, 71, -15, 405, 293, 31, 370,
	164, -1000, -1000, -1000, -1000, -1000, -1000, 480, 326, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34,
	213, 34, 212, 34, 211, 34, 208, 34, 207, 206,
	-1000, 70, -1000, -1000, -1000, 237, 235, 233, 224, 58,
	-1000, -1000, 65, 418, -1000, -1000, 147, 62, 634, 326,
	-1000, 61, 494, 562, 613, 612, 611, 610, -1000, 399,
	483, -1000, -1000, -1000, -1000, 576, -1000, -1000, -1000, 532,
	-1000, -1000, 56, 54, 53, 40, 343, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7, 38, 356, -1000, 459, -1000,
	199, 198, 196, 105, 20, -1000, -1000, -1000, -1000, -1000,
	215, 34, -1000, 29, -2, -1000, -1000, -1000, -8, -1000,
	135, 389, -1000, 194, -1000, 191, -1000, 190, -1000, 189,
	-1000, 188, -1000, -1000, 633, 509, 32, 32, -35, 30,
	-1000, -1000, 92, -1000, -1000, 219, -1000, 632, 631, 430,
	-1000, -1000, 26, 25, 21, -20, 630, -1000, -42, -48,
	-1000, 517, -1000, -1000, -1000, 629, 283, 348, 343, -1000,
	-1000, -1000, 310, 308, -9, 360, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -26, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 51, 19, 226, 185, -1000, -65,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-81, -1000, 487, 346, 356, 295, -1000, -35, 343, -1000,
	184, 174, -1000, -1000, -50, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 392, 170, -1000, 326, 356, 294, -1000, 387,
	628, 371, -1000, -1000, -1000, -1000, -1000, -84, 508, 277,
	376, 627, 291, -1000, 356, 334, 76, -1000, 474, 515,
	522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356, 288,
	-1000, 626, 356, -1000, -85, 419, 427, 419, 527, 427,
	527, 350, 625, -1000, 96, -1000, -1000, -1000, -1000, -1000,
	-1000, 477, -1000, 508, 623, -1000, -1000,
}

var calcPgo = [...]int{
	0, 696, 695, 22, 694, 693, 692, 29, 691, 690,
	689, 688, 687, 686, 685, 684, 683, 682, 681, 680,
	18, 28, 24, 13, 679, 678, 677, 30, 52, 676,
	15, 19, 675, 20, 14, 3, 8, 2, 0, 12,
	674, 26, 21, 9, 4, 27, 673, 672, 438, 25,
	11, 7, 5, 10, 1, 671, 670, 669, 6, 16,
	668, 663, 667, 666, 17, 665,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 4,
	5, 5, 6, 6, 7, 7, 8, 9, 9, 10,
	10, 11, 12, 13, 13, 14, 15, 16, 17, 17,
	17, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 19, 19, 20, 20, 20, 20,
	21, 21, 22, 23, 24, 24, 25, 46, 46, 46,
	46, 46, 46, 46, 46, 48, 48, 49, 49, 49,
	50, 50, 51, 52, 53, 53, 54, 54, 54, 54,
	54, 55, 56, 56, 56, 56, 57, 57, 58, 59,
	59, 59, 59, 47, 47, 60, 61, 61, 62, 62,
	27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 29, 29, 29, 29, 32, 32, 32, 32, 34,
	33, 33, 33, 33, 33, 31, 30, 30, 30, 30,
	30, 30, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 35, 35, 35,
	36, 36, 37, 37, 39, 39, 39, 39, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 65, 42,
	42, 43, 43, 44, 45, 45, 45, 45, 64, 64,
	63, 63,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	7, 9, 1, 3, 2, 3, 4, 6, 6, 6,
	7, 8, 4, 6, 9, 4, 9, 4, 9, 7,
	8, 6, 4, 6, 4, 6, 5, 7, 4, 4,
	5, 4, 4, 5, 1, 3, 4, 4, 4, 4,
	3, 3, 2, 4, 1, 2, 4, 8, 7, 5,
	4, 10, 9, 7, 6, 3, 1, 3, 3, 3,
	2, 1, 4, 4, 2, 1, 3, 5, 1, 1,
	1, 12, 10, 8, 9, 7, 2, 1, 4, 1,
	1, 1, 1, 4, 4, 2, 5, 4, 3, 1,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
	4, 1, 1, 2, 2, 1, 1, 3, 3, 3,
	4, 4, 4, 9, 10, 3, 2, 1, 1, 2,
	5, 6, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 4, 5,
	4, 5, 3, 4, 5, 6, 5, 6, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 0, 8,
	1, 1, 3, 1, 1, 1, 1, 1, 3, 1,
	3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -3, -60, -5, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -25, -46, -47, -4,
	-61, 6, 9, 10, 25, 110, 8, 7, 12, 13,
	15, 17, 107, 108, 7, 12, 13, 15, 17, 108,
	107, 7, 4, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	111, 111, 49, 14, 111, 16, -18, 19, 22, 23,
	111, -50, -52, -51, 33, 106, 111, 109, 8, 8,
	8, 8, 8, 8, 8, 11, 9, 5, -62, 112,
	-59, -45, -61, -27, 116, 92, 93, 94, 95, -28,
	-43, -26, 111, 36, 37, 38, 39, 40, -6, -7,
	116, 111, -44, 91, -64, 116, 116, 18, -21, 29,
	20, 24, 25, 20, 24, 25, 21, -48, -49, 65,
	104, 105, -52, -51, -53, -54, 102, 103, -55, -56,
	-3, 29, 98, 116, -48, -42, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 90,
	-7, -34, 61, 116, 61, -39, -40, 111, -43, 113,
	69, 116, 112, 115, 91, 42, 43, 35, 44, 45,
	-27, -45, 111, 111, 111, 111, 111, 112, 115, -42,
	-39, 8, 112, 115, 111, -19, -20, 26, 28, -22,
	-23, 32, 33, 30, 16, 21, 16, 16, 16, 21,
	16, 16, 20, 24, 25, 112, 115, 116, 116, 116,
	34, -54, -59, 116, 116, -39, -42, 112, -50, -52,
	111, 111, 111, 111, 111, 8, 8, 116, 8, 116,
	8, 62, 63, -39, -63, -43, -41, 64, 65, 113,
	68, 75, 70, 71, 72, 73, 74, -43, 69, -44,
	-59, 116, -28, -27, -28, -28, -28, -28, 112, 41,
	-43, 41, -43, 41, -43, 41, -43, 41, -43, 35,
	8, -32, -7, -34, -33, 47, 48, 49, 50, -29,
	-31, -30, 61, 46, 47, 48, 113, 51, 112, 14,
	116, -64, -21, 115, 27, 7, 27, 7, -23, -39,
	-24, -3, 27, 31, 116, 116, 116, 116, 116, 116,
	116, 116, 16, 21, 16, 16, -50, -52, -49, -42,
	-42, -42, 8, 8, 75, 14, 97, 8, 109, -52,
	92, 92, 92, 92, 92, -33, 8, -39, -39, 112,
	112, 115, -45, 66, 67, 94, -44, 116, 65, 114,
	113, -41, -44, -43, 112, -43, 112, -43, 112, -43,
	112, -43, 112, 112, 112, 115, 111, 111, 111, 111,
	-31, -30, 116, -45, 114, 116, 8, -44, 112, -22,
	-23, -20, 14, 14, 14, 14, 34, -3, 16, 16,
	116, 116, 116, 116, -52, -59, 116, -53, -42, 112,
	112, 112, 115, 115, 65, 113, -43, -44, 116, -44,
	116, -44, 116, 114, 66, 67, 112, 112, 112, 112,
	112, 8, -34, -33, -64, -64, -39, 116, -30, 111,
	8, 8, -23, 116, 116, 116, 116, 8, 116, 116,
	16, 8, 100, -57, 99, 34, -58, 96, -50, -52,
	92, 92, -44, 116, 65, -44, 116, -44, 116, 112,
	112, 112, 112, 116, 116, 29, 99, 34, -58, -53,
	98, -39, -52, 112, 112, -44, 116, 51, 112, -44,
	-53, 98, 34, 8, 97, -65, 116, -38, -35, -36,
	-37, 52, 53, 54, 55, 56, 57, 58, 101, 34,
	8, 98, -53, 89, 111, -36, -37, -35, -37, -35,
	-36, -53, 98, 8, 116, -37, -36, -37, -35, -36,
	-35, 34, 8, 112, 29, -38, 8,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 81, 0, 0, 0, 0, 26, 32,
	35, 37, 66, 103, 104, 0, 0, 0, 0, 107,
	109, -2, 100, -2, -2, 224, 225, 226, 227, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 0, 22,
	0, 0, 0, 223, 0, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 69, 80, 0, 85, 0, 0, 88, 89,
	90, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	210, 211, 212, 213, 214, 215, 216, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 221, 106, 0, 0, 0, 0, 0, 0, 0,
	118, 115, 0, 0, 0, 0, 0, 0, 0, 24,
	0, 33, 0, 0, 0, 0, 54, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 27, 28, 0, 29, 0,
	19, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 204, 205, 0, 0, 198,
	108, 222, 110, 118, 111, 112, 113, 114, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	20, 0, 23, 135, 136, 0, 0, 0, 0, 25,
	131, 132, 0, 0, 147, 148, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 0, 39, 62,
	0, 64, 60, 61, 42, 0, 48, 51, 44, 0,
	49, 52, 0, 0, 0, 0, 0, 68, 75, 77,
	78, 79, 83, 86, 0, 0, 0, 82, 0, 73,
	0, 0, 0, 0, 0, 139, 30, 176, 177, 175,
	0, 0, 178, 0, 0, 179, 180, 182, 0, 192,
	0, 0, 199, 0, 121, 0, 123, 0, 125, 0,
	127, 0, 129, 130, 0, 0, 0, 0, 0, 0,
	133, 134, 0, 146, 149, 0, 31, 0, 0, 0,
	40, 55, 0, 0, 0, 0, 0, 65, 0, 0,
	46, 0, 50, 53, 67, 0, 0, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 230, 184, 188, 186,
	190, 181, 183, 193, 0, 0, 120, 122, 124, 126,
	128, 21, 137, 138, 0, 0, 0, 0, 145, 0,
	34, 36, 38, 56, 58, 57, 59, 63, 43, 45,
	0, 87, 0, 0, 0, 0, 97, 0, 0, 72,
	0, 0, 194, 196, 0, 185, 189, 187, 191, 140,
	141, 142, 0, 0, 47, 0, 0, 0, 96, 0,
	0, 0, 71, 217, 218, 195, 197, 0, 150, 0,
	0, 0, 0, 95, 0, 0, 0, 151, 152, 153,
	154, 167, 168, 169, 170, 171, 172, 173, 0, 0,
	93, 0, 98, 219, 0, 155, 157, 156, 159, 158,
	160, 0, 0, 94, 0, 161, 162, 163, 164, 165,
	166, 0, 92, 143, 0, 144, 91,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:416
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:426
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:436
		{ // TODO
			calcVAL.NodePt = &Node{}
			fmt.Println("psmCallStmt")
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:464
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:472
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:480
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:488
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:496
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:504
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:512
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:520
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:528
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:536
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:544
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:552
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:560
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:568
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.DeleteStmt
		}
	case 19:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:608
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.DeleteStmt = &DeleteNode{}
			calcVAL.NodePt.DeleteStmt.TableName = calcDollar[3].String
			calcVAL.NodePt.DeleteStmt.Condition = calcDollar[5].NodePt.Condition
		}
	case 20:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:654
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 21:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:669
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 22:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:691
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 23:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:696
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 24:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:704
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 25:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:713
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 26:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:750
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 27:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:769
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 28:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:784
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 29:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:806
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 30:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:814
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 31:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:833
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 32:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:852
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 33:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:871
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 34:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:880
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 35:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:901
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 36:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:919
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 37:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:939
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 38:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1000
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 39:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1021
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 40:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1041
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1061
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 42:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1084
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 43:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1092
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 44:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1101
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 45:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1109
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 46:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1118
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 47:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1126
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 48:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1135
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 49:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1143
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 50:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1151
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 51:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1159
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 52:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 53:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1175
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 54:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1187
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 55:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1193
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 56:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1202
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 57:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1210
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 58:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1218
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 59:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1226
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 60:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1238
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 61:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1243
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 62:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1252
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 63:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1259
		{
			calcVAL.List = calcDollar[2].List
		}
	case 64:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1266
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 65:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1272
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 66:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1287
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 67:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1366
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 68:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1380
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 69:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1392
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 70:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1404
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 71:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1415
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 72:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1428
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 73:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1440
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 74:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1452
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 75:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1467
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 76:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1471
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 77:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1481
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 78:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1492
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 79:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1501
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 80:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1514
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 81:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1518
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 82:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1528
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 83:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1540
		{
			calcVAL.List = calcDollar[2].List
		}
	case 84:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1547
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 85:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1552
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 86:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1562
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 87:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1570
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 88:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1579
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 89:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1587
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 90:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1595
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 91:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1607
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Subquery = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 92:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1621
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 93:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 94:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1646
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 95:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 96:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1673
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 97:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1677
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 98:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1687
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 99:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1699
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 100:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1707
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 101:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1715
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 102:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1723
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 103:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1743
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 104:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1751
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 105:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1780
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 106:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1787
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 107:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1796
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 108:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1808
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 109:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1812
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 110:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1841
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 111:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1850
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 112:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1859
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 113:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1868
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 114:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1877
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 115:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1890
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 116:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1899
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 117:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1908
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 118:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1917
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 119:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1926
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 120:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1956
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 121:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1965
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 122:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1974
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 123:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1983
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 124:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1992
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 125:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2001
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 126:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2010
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 127:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2019
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 128:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2028
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 129:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2037
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 130:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2046
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 131:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2127
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 132:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2132
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 133:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2137
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 134:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2141
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 135:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2149
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 136:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2154
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 137:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2159
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 138:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2163
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 139:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2171
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 140:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2180
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 141:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2189
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 142:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2198
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 143:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2207
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 144:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2218
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 145:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2246
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 146:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2255
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 147:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2264
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 148:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2272
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 149:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2280
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 150:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2288
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 151:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2298
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 152:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2325
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 153:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2335
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 154:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2345
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 155:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2355
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 156:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2366
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 157:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2377
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 158:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2388
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 159:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2399
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 160:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2410
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 161:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2421
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 162:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2433
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 163:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2445
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 164:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2457
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 165:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2469
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 166:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2481
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 167:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2497
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 168:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2502
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 169:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2507
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 170:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2516
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 171:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2521
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 172:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2530
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 173:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2535
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 174:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2554
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 175:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2562
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 176:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2565
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 177:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2574
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 178:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2625
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 179:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2636
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 180:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2648
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 181:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 182:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2668
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 183:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2678
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 184:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2688
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 185:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2699
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 186:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2710
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 187:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2721
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 188:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2732
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 189:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2743
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 190:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2754
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 191:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2765
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 192:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2776
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 193:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2785
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 194:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2794
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 195:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2804
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[6].NodePt.Subquery
		}
	case 196:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2814
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 197:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2824
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 198:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2834
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[2].NodePt.Subquery
		}
	case 199:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2843
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 200:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2856
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 201:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2861
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 202:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2866
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 203:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2871
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 204:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2876
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 205:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2881
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 206:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2911
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 207:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2918
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 208:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2926
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 209:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2934
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 210:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2942
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 211:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2949
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 212:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2956
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 213:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2963
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 214:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2970
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 215:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2977
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 216:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2984
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 217:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2991
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 218:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3000
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 219:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3009
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 220:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3016
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 221:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3035
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 222:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3042
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 223:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3061
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SUBQUERY_NODE
			calcVAL.NodePt.Subquery = &QueryNode{}
		}
	case 224:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3081
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 225:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3088
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 226:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3095
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 227:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3102
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 228:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3127
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 229:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3130
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 230:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3137
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 231:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3141
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
