// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"strconv"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE NodeEnum = 16

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51

	/* insert */
	INSERT_NODE NodeEnum = 52

	/* update */
	UPDATE_LIST_ENTRY NodeEnum = 53
	UPDATE_NODE       NodeEnum = 54

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 55
	JOIN_NODE          NodeEnum = 56
	FROM_STMT_NODE     NodeEnum = 57
	SELECT_STMT_NODE   NodeEnum = 58
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dcl */
	Dcl *DCLNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	Delete *DeleteNode

	/* insert */
	Insert *InsertNode

	/* update */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode

	/* dql */
	DqlEntry         *DQLNode
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode
	Join             *JoinNode
	FromStmt         *FromStmtNode
	SelectStmt       *SelectStmtNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
	ELEMENTARY_VALUE_LIST           ListEnum = 12
	UPDATE_LIST                     ListEnum = 13
	ORDERBY_LIST                    ListEnum = 14
	FROM_LIST                       ListEnum = 15
	ON_LIST                         ListEnum = 16
	SELECT_LIST                     ListEnum = 17
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
	ElementaryValueList          []*ElementaryValueNode
	UpdateList                   []*UpdateListEntryNode
	OrderByList                  []*OrderByListEntryNode
	FromList                     []*FromListEntryNode
	OnList                       []*OnListEntryNode
	SelectList                   []*SelectListEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

// fromStmt
type FromStmtNode struct {
	FromListValid bool
	FromList      []*FromListEntryNode
	Join          *JoinNode
}

// selectStmt
type SelectStmtNode struct {
	StarValid     bool
	DistinctValid bool
	SelectList    []*SelectListEntryNode
}

//line parser/grammar.y:281
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const START = 57346
const TRANSACTION = 57347
const COMMIT = 57348
const ROLLBACK = 57349
const SHOW = 57350
const TABLES = 57351
const ASSERTIONS = 57352
const VIEWS = 57353
const INDEXS = 57354
const TRIGGERS = 57355
const FUNCTIONS = 57356
const PROCEDURES = 57357
const USER = 57358
const PASSWORD = 57359
const CONNECT = 57360
const PASSWORDS = 57361
const ASC = 57362
const DESC = 57363
const CROSS = 57364
const JOIN = 57365
const NATURAL = 57366
const FULL = 57367
const OUTER = 57368
const LEFT = 57369
const RIGHT = 57370
const SELECT = 57371
const GROUPBY = 57372
const HAVING = 57373
const ORDERBY = 57374
const LIMIT = 57375
const UNION = 57376
const DIFFERENCE = 57377
const INTERSECTION = 57378
const FROM = 57379
const WHERE = 57380
const INSERTINTO = 57381
const VALUES = 57382
const CREATE = 57383
const TABLE = 57384
const SEMICOLON = 57385
const DROP = 57386
const ALTER = 57387
const ADD = 57388
const ASSERTION = 57389
const VIEW = 57390
const AS = 57391
const INDEX = 57392
const ON = 57393
const TRIGGER = 57394
const REFERENCING = 57395
const BEFORE = 57396
const UPDATE = 57397
const OF = 57398
const AFTER = 57399
const INSTEAD = 57400
const INSERT = 57401
const DELETE = 57402
const OLD = 57403
const ROW = 57404
const NEW = 57405
const FOR = 57406
const EACH = 57407
const STATEMENT = 57408
const WHEN = 57409
const BEGINTOKEN = 57410
const END = 57411
const STAR = 57412
const SUM = 57413
const AVG = 57414
const MIN = 57415
const MAX = 57416
const COUNT = 57417
const DISTINCT = 57418
const PLUS = 57419
const SUBTRACT = 57420
const DIVISION = 57421
const CONCATENATION = 57422
const DEFAULT = 57423
const UNIQUE = 57424
const PRIMARYKEY = 57425
const CHECK = 57426
const FOREIGNKEY = 57427
const REFERENCES = 57428
const NOT_DEFERRABLE = 57429
const DEFERED_DEFERRABLE = 57430
const IMMEDIATE_DEFERRABLE = 57431
const UPDATE_NULL = 57432
const UPDATE_CASCADE = 57433
const DELETE_NULL = 57434
const DELETE_CASCADE = 57435
const DEFERRED = 57436
const IMMEDIATE = 57437
const CONSTRAINT = 57438
const AND = 57439
const OR = 57440
const LIKE = 57441
const IN = 57442
const ALL = 57443
const ANY = 57444
const IS = 57445
const EXISTS = 57446
const NOTEQUAL = 57447
const LESS = 57448
const GREATER = 57449
const LESSEQUAL = 57450
const GREATEREQUAL = 57451
const EQUAL = 57452
const CHAR = 57453
const VARCHAR = 57454
const BIT = 57455
const BITVARYING = 57456
const BOOLEAN = 57457
const INT = 57458
const INTEGER = 57459
const SHORTINT = 57460
const FLOAT = 57461
const REAL = 57462
const DOUBLEPRECISION = 57463
const DECIMAL = 57464
const NUMERIC = 57465
const DATE = 57466
const TIME = 57467
const DOT = 57468
const INTVALUE = 57469
const FLOATVALUE = 57470
const STRINGVALUE = 57471
const BOOLVALUE = 57472
const ELSEIF = 57473
const THEN = 57474
const IF = 57475
const ELSE = 57476
const CURSOR = 57477
const DO = 57478
const RETURN = 57479
const SET = 57480
const OUT = 57481
const INOUT = 57482
const DECLARE = 57483
const PROCEDURE = 57484
const FUNCTION = 57485
const RETURNS = 57486
const CALL = 57487
const LPAREN = 57488
const RPAREN = 57489
const NOT = 57490
const NULLMARK = 57491
const COMMA = 57492
const ID = 57493

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SHOW",
	"TABLES",
	"ASSERTIONS",
	"VIEWS",
	"INDEXS",
	"TRIGGERS",
	"FUNCTIONS",
	"PROCEDURES",
	"USER",
	"PASSWORD",
	"CONNECT",
	"PASSWORDS",
	"ASC",
	"DESC",
	"CROSS",
	"JOIN",
	"NATURAL",
	"FULL",
	"OUTER",
	"LEFT",
	"RIGHT",
	"SELECT",
	"GROUPBY",
	"HAVING",
	"ORDERBY",
	"LIMIT",
	"UNION",
	"DIFFERENCE",
	"INTERSECTION",
	"FROM",
	"WHERE",
	"INSERTINTO",
	"VALUES",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:4865

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 89,
	37, 58,
	150, 58,
	-2, 222,
	-1, 90,
	37, 60,
	150, 60,
	-2, 223,
	-1, 91,
	37, 62,
	150, 62,
	-2, 224,
	-1, 207,
	43, 205,
	147, 205,
	150, 205,
	-2, 221,
	-1, 209,
	43, 207,
	147, 207,
	150, 207,
	-2, 224,
	-1, 210,
	43, 208,
	147, 208,
	150, 208,
	-2, 327,
	-1, 221,
	70, 222,
	77, 222,
	78, 222,
	79, 222,
	80, 222,
	-2, 88,
	-1, 222,
	70, 224,
	77, 224,
	78, 224,
	79, 224,
	80, 224,
	-2, 91,
	-1, 449,
	38, 124,
	150, 124,
	-2, 224,
	-1, 450,
	38, 125,
	150, 125,
	-2, 221,
}

const calcPrivate = 57344

const calcLast = 1043

var calcAct = [...]int{
	751, 287, 754, 752, 214, 180, 286, 181, 753, 690,
	147, 589, 211, 219, 590, 179, 402, 505, 198, 297,
	206, 313, 498, 41, 319, 292, 3, 398, 280, 504,
	401, 270, 220, 337, 263, 217, 146, 201, 279, 98,
	783, 216, 99, 93, 94, 95, 96, 97, 316, 89,
	85, 93, 94, 95, 96, 97, 87, 225, 226, 227,
	228, 251, 229, 230, 338, 339, 314, 249, 341, 232,
	343, 344, 345, 346, 347, 342, 93, 94, 95, 96,
	97, 148, 247, 213, 232, 215, 703, 451, 92, 148,
	259, 349, 89, 750, 651, 222, 568, 569, 570, 101,
	102, 103, 104, 315, 245, 166, 148, 101, 102, 103,
	104, 649, 746, 340, 351, 352, 353, 42, 100, 205,
	148, 264, 148, 210, 148, 646, 100, 580, 717, 578,
	243, 92, 101, 102, 103, 104, 148, 234, 92, 716,
	91, 576, 92, 166, 196, 218, 221, 148, 148, 241,
	42, 100, 467, 363, 89, 713, 210, 92, 322, 782,
	242, 244, 246, 248, 250, 166, 166, 166, 166, 166,
	92, 231, 235, 148, 499, 500, 501, 502, 145, 92,
	683, 207, 266, 91, 704, 284, 231, 285, 314, 699,
	712, 267, 167, 322, 696, 453, 165, 444, 261, 682,
	252, 254, 255, 256, 257, 92, 680, 679, 317, 678,
	93, 94, 95, 96, 97, 354, 271, 677, 336, 452,
	348, 235, 260, 296, 92, 671, 334, 350, 312, 356,
	507, 508, 509, 354, 209, 511, 199, 90, 661, 233,
	320, 660, 659, 264, 630, 91, 376, 627, 378, 335,
	380, 626, 382, 625, 384, 624, 253, 253, 253, 253,
	253, 362, 612, 609, 606, 322, 101, 102, 103, 104,
	597, 507, 508, 509, 598, 596, 511, 599, 393, 595,
	90, 586, 571, 534, 392, 100, 506, 533, 423, 532,
	92, 531, 530, 166, 529, 528, 527, 510, 482, 480,
	355, 356, 516, 431, 202, 461, 356, 427, 354, 424,
	446, 443, 441, 430, 444, 428, 439, 429, 426, 425,
	418, 88, 421, 420, 419, 417, 395, 374, 418, 322,
	166, 207, 373, 166, 218, 221, 447, 365, 510, 323,
	390, 749, 90, 391, 456, 458, 459, 295, 327, 454,
	466, 328, 321, 268, 264, 322, 748, 221, 240, 476,
	472, 221, 448, 239, 473, 455, 474, 238, 450, 237,
	203, 207, 132, 131, 130, 129, 128, 127, 126, 125,
	462, 124, 471, 123, 209, 122, 121, 120, 119, 478,
	118, 117, 116, 82, 78, 77, 747, 706, 356, 356,
	705, 701, 700, 637, 636, 588, 587, 572, 470, 469,
	182, 361, 149, 497, 224, 514, 522, 356, 521, 608,
	581, 449, 793, 540, 209, 573, 496, 332, 333, 515,
	524, 332, 333, 539, 60, 738, 552, 727, 285, 542,
	543, 544, 57, 58, 59, 726, 715, 541, 332, 333,
	635, 324, 634, 633, 493, 24, 562, 25, 26, 27,
	61, 492, 558, 491, 490, 62, 63, 489, 64, 38,
	65, 236, 171, 574, 575, 577, 386, 714, 385, 579,
	44, 512, 383, 183, 381, 379, 591, 561, 178, 133,
	36, 377, 32, 375, 258, 33, 34, 44, 460, 68,
	185, 772, 184, 148, 69, 70, 37, 71, 673, 72,
	36, 35, 603, 602, 601, 600, 563, 436, 435, 23,
	434, 605, 433, 432, 611, 396, 37, 265, 197, 169,
	159, 35, 614, 604, 158, 293, 157, 156, 155, 138,
	689, 551, 36, 182, 615, 628, 613, 285, 135, 621,
	607, 762, 166, 780, 686, 137, 631, 36, 37, 765,
	66, 67, 741, 35, 723, 465, 792, 293, 629, 172,
	771, 632, 790, 37, 221, 332, 333, 720, 35, 770,
	769, 640, 293, 641, 645, 44, 281, 235, 639, 221,
	207, 768, 736, 648, 650, 134, 42, 40, 652, 74,
	73, 735, 691, 734, 294, 688, 320, 36, 288, 289,
	744, 332, 333, 154, 40, 670, 183, 733, 732, 668,
	669, 666, 667, 37, 672, 282, 283, 731, 35, 36,
	676, 730, 293, 423, 695, 767, 294, 763, 693, 691,
	288, 289, 719, 209, 694, 37, 549, 656, 692, 655,
	35, 294, 463, 464, 293, 288, 289, 654, 702, 742,
	653, 644, 591, 708, 643, 642, 36, 591, 591, 591,
	557, 556, 707, 555, 709, 710, 711, 554, 101, 102,
	103, 104, 37, 101, 102, 103, 104, 35, 553, 479,
	477, 293, 475, 457, 223, 722, 422, 721, 725, 658,
	285, 294, 221, 547, 724, 288, 289, 101, 102, 103,
	104, 729, 343, 344, 345, 346, 347, 342, 325, 582,
	583, 647, 468, 294, 423, 657, 740, 288, 289, 739,
	499, 500, 501, 502, 564, 737, 442, 332, 333, 760,
	761, 170, 423, 329, 314, 330, 331, 697, 698, 584,
	585, 766, 758, 759, 86, 774, 776, 775, 777, 794,
	294, 773, 404, 778, 288, 289, 403, 404, 423, 779,
	758, 759, 760, 761, 405, 718, 784, 399, 786, 400,
	787, 423, 789, 785, 278, 684, 788, 619, 332, 333,
	332, 333, 664, 663, 795, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 662, 311,
	332, 333, 332, 333, 332, 333, 755, 756, 757, 758,
	759, 760, 761, 755, 756, 757, 31, 520, 760, 761,
	755, 756, 757, 758, 759, 755, 756, 757, 499, 500,
	501, 502, 150, 162, 36, 525, 269, 519, 518, 526,
	160, 161, 163, 164, 36, 623, 618, 271, 414, 535,
	37, 410, 415, 416, 536, 35, 411, 81, 517, 622,
	37, 538, 275, 537, 620, 35, 276, 277, 272, 481,
	413, 412, 273, 274, 113, 114, 115, 175, 406, 409,
	176, 177, 408, 407, 173, 617, 616, 548, 513, 153,
	152, 151, 79, 194, 796, 193, 57, 58, 59, 791,
	781, 764, 743, 728, 685, 56, 681, 675, 674, 665,
	638, 610, 567, 566, 565, 560, 559, 550, 546, 545,
	494, 440, 438, 437, 394, 389, 388, 387, 318, 192,
	191, 190, 189, 188, 187, 186, 112, 111, 110, 109,
	108, 107, 106, 105, 80, 48, 47, 45, 75, 140,
	445, 141, 142, 195, 84, 76, 366, 139, 367, 44,
	368, 369, 485, 484, 483, 372, 371, 370, 594, 593,
	592, 488, 487, 486, 364, 359, 360, 357, 358, 49,
	50, 51, 52, 53, 54, 55, 326, 46, 168, 136,
	208, 39, 745, 204, 30, 687, 291, 290, 19, 18,
	212, 495, 503, 17, 523, 397, 174, 16, 15, 14,
	13, 12, 11, 10, 9, 8, 7, 262, 6, 200,
	22, 21, 20, 144, 143, 83, 43, 5, 29, 28,
	4, 2, 1,
}

var calcPact = [...]int{
	451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 914, 992, 913, 912, 980, -1000, -1000,
	-1000, 872, 418, 457, 916, 928, 244, 243, 853, 911,
	468, -1000, 242, 927, -20, -1000, 910, -1000, -1000, 909,
	908, 907, 906, 905, 904, 903, -1000, 468, 468, 468,
	241, 240, 239, 237, 236, 235, 234, 232, 230, 228,
	227, 226, 225, 224, 223, 222, 221, 449, 410, 983,
	-1000, 408, 393, 929, 27, -1000, 262, 139, -1000, 852,
	851, 850, 487, 392, 391, 390, 388, 384, 773, -1000,
	139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 981, 383, 657, 423,
	843, 833, 342, 356, 902, 901, 900, 899, 898, 897,
	896, 859, 925, 382, 85, 153, 219, -1000, -28, -63,
	19, 139, 567, -1000, 264, 35, -1000, 88, 940, 139,
	262, 218, 216, 212, 207, 73, 54, 28, 6, -9,
	139, 139, 139, 139, 139, 347, -1000, -1000, 71, 203,
	381, 357, 85, 202, 793, 823, 817, 728, 486, 475,
	-1000, -1000, 518, 196, 486, 684, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -30, -48, -63, 895, 556, 205, -1000,
	301, -1000, 608, 979, 201, -1000, -1000, -1000, -1000, -1000,
	487, 713, -1000, -63, -35, -13, 357, 83, -1000, 267,
	-1000, 967, 965, 261, 2, 961, 186, 943, 951, 950,
	949, -1000, 181, -1000, 176, 346, -1000, -1000, -1000, -1000,
	-1000, 19, 344, 19, 338, 19, 337, 19, 335, 19,
	331, 329, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 894,
	893, 892, 193, -1000, 684, -63, 891, 179, 379, 716,
	699, 709, 837, 841, 838, 810, 830, 829, 803, 178,
	-1000, 173, 172, 171, -1000, -1000, 627, -1000, 5, 168,
	-1000, -1000, -1000, 167, -63, 684, 170, 475, -1000, 377,
	376, 374, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 372,
	371, -1000, 890, 889, 165, 888, 161, 693, -1000, 164,
	-1000, 920, 159, -63, 153, 139, 68, -1000, 5, 19,
	139, 566, -63, -63, 351, 158, -35, 551, 436, 1,
	622, 260, -1000, -1000, -1000, -1000, -1000, -1000, 607, 357,
	-1000, -63, 139, 565, 19, 563, 139, -1000, -1000, -1000,
	-1000, 562, -1000, 20, 148, 828, 147, 948, 947, 946,
	960, 959, 958, -1000, -1000, -1000, 320, -1000, 317, -1000,
	316, -1000, 314, -1000, 307, -1000, -1000, -1000, -1000, -1000,
	887, 92, 190, 334, -1000, 849, 85, 152, -1000, 806,
	785, 694, -1000, -63, 815, 783, 145, 144, 143, 141,
	140, 138, 136, 132, 808, 822, 820, 475, 486, 684,
	684, 684, 886, -1000, 885, 593, 848, 514, 884, 397,
	475, -1000, 561, 550, 546, 544, 543, -1000, -1000, 756,
	-1000, 883, -1000, 882, 580, 370, -1000, 691, -1000, -1000,
	-1000, 881, 880, 879, -1000, 65, 249, 257, -1000, -1000,
	-1000, 325, -1000, -10, -22, -1000, -1000, -1000, -24, -1000,
	271, 618, -1000, 717, 248, 256, -1000, 255, -1000, -1000,
	-1000, 19, -1000, 957, 956, 955, 128, 124, 119, -1000,
	-1000, -1000, -1000, -1000, -1000, 127, -1000, -1000, -1000, 369,
	368, 367, 366, 190, -1000, -1000, 113, 580, -1000, -1000,
	270, 112, 878, 357, 115, 699, 716, 847, 846, 807,
	738, -1000, 640, 805, -1000, -1000, -1000, -1000, 818, -1000,
	-1000, -1000, 804, -1000, -1000, 104, 102, 100, 96, 475,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5, 93, 518,
	-1000, 684, -1000, 306, 305, 303, 254, 253, -1000, -1000,
	-1000, -1000, 877, 556, -1000, -1000, -1000, -1000, -63, 139,
	538, 537, 534, -26, 621, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -40, -57, 139, 533, 530, 522, 520, 628,
	-1000, 589, 91, 90, 87, 757, 742, 741, 876, 648,
	85, 85, -63, 74, -1000, -1000, 149, -1000, -1000, 362,
	-1000, 875, 874, 694, -1000, -1000, 66, 58, 56, 55,
	873, -1000, 48, 29, -1000, 734, -1000, -1000, -1000, 871,
	419, 471, 475, -1000, -1000, -1000, 517, 507, -1000, 47,
	715, 156, 252, 251, -1000, -1000, -1000, -65, -1000, -1000,
	-1000, -1000, 151, 250, 247, -1000, -1000, 19, 19, -1000,
	-1000, -1000, 19, 19, 19, -1000, -1000, -1000, 43, 8,
	330, 299, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -23, -1000, 711, 508, 518, 431,
	-1000, -63, 475, -1000, 298, 290, 870, 139, 504, 500,
	491, 490, -1000, -1000, 476, 474, 465, -1000, -1000, 628,
	628, 628, -1000, -1000, -1000, 649, 288, -1000, 357, 518,
	429, -1000, 590, 869, 478, -1000, -1000, -1000, -1000, 79,
	246, 206, -1000, -1000, 191, -1000, -1000, -58, 729, 415,
	568, 868, 426, -1000, 518, 511, 464, 453, 452, 443,
	355, -1000, 680, 736, 743, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 518, 420, -1000, 867, 518, -1000, 9, -1000,
	-1000, -1000, -111, 647, 662, 647, 748, 662, 748, 503,
	866, -1000, 439, 275, -1000, -1000, -1000, -1000, -1000, -1000,
	695, -1000, -1000, 729, 861, -1000, -1000,
}

var calcPgo = [...]int{
	0, 1042, 1041, 1040, 1039, 1038, 25, 1037, 826, 10,
	23, 1036, 754, 321, 1035, 1034, 11, 14, 1033, 36,
	13, 32, 1032, 1031, 24, 1030, 1029, 37, 1028, 1027,
	34, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018,
	1017, 1016, 1015, 27, 31, 30, 16, 1014, 1013, 192,
	95, 39, 1012, 17, 29, 1011, 22, 21, 3, 8,
	2, 0, 12, 1010, 33, 19, 4, 42, 1009, 1008,
	38, 28, 15, 7, 5, 6, 1, 1007, 1006, 1005,
	9, 20, 1004, 1000, 1003, 35, 18, 1002,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 6,
	6, 6, 7, 8, 8, 8, 8, 8, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 11, 11, 11, 12, 12, 13, 13,
	13, 13, 13, 13, 14, 14, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 17, 18, 18,
	19, 19, 19, 19, 19, 19, 20, 20, 21, 21,
	21, 21, 21, 21, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 5, 5, 5, 22, 23, 23, 23, 23, 24,
	24, 25, 26, 26, 27, 27, 28, 28, 29, 29,
	30, 30, 31, 32, 32, 33, 33, 34, 35, 36,
	36, 37, 38, 39, 40, 40, 40, 40, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	42, 42, 43, 43, 43, 43, 44, 44, 45, 46,
	47, 47, 48, 68, 68, 68, 68, 68, 68, 68,
	68, 70, 70, 71, 71, 71, 72, 72, 73, 74,
	75, 75, 76, 76, 76, 76, 76, 77, 78, 78,
	78, 78, 79, 79, 80, 81, 81, 81, 81, 69,
	69, 82, 83, 83, 84, 84, 50, 50, 50, 50,
	50, 51, 51, 51, 51, 51, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 52, 52, 52,
	52, 55, 55, 55, 55, 57, 56, 56, 56, 56,
	56, 54, 53, 53, 53, 53, 53, 53, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 58, 58, 58, 59, 59, 60, 60,
	62, 62, 62, 62, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 87, 65, 65, 66, 66, 67,
	67, 67, 67, 86, 86, 85, 85,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 1, 3, 2,
	4, 4, 6, 6, 8, 4, 6, 6, 8, 8,
	10, 6, 8, 8, 10, 10, 12, 8, 10, 10,
	12, 12, 14, 2, 2, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 2, 2, 4, 5, 4, 6,
	6, 6, 7, 7, 7, 3, 1, 3, 3, 1,
	1, 2, 3, 1, 2, 3, 3, 1, 1, 2,
	2, 1, 2, 2, 2, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 6, 6,
	6, 7, 7, 7, 6, 5, 7, 8, 10, 3,
	1, 7, 1, 3, 3, 3, 7, 9, 1, 3,
	2, 3, 4, 6, 6, 6, 7, 8, 4, 6,
	9, 4, 9, 4, 9, 7, 8, 6, 4, 6,
	4, 6, 5, 7, 4, 4, 5, 4, 4, 5,
	1, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	1, 2, 4, 8, 7, 5, 4, 10, 9, 7,
	6, 3, 1, 3, 3, 3, 2, 1, 4, 4,
	2, 1, 3, 5, 1, 1, 1, 12, 10, 8,
	9, 7, 2, 1, 4, 1, 1, 1, 1, 4,
	4, 2, 5, 4, 3, 1, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 4, 5, 4,
	5, 4, 5, 4, 5, 4, 4, 1, 1, 2,
	2, 1, 1, 3, 3, 3, 4, 4, 4, 9,
	10, 3, 2, 1, 1, 2, 5, 6, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	4, 5, 4, 5, 4, 5, 4, 5, 3, 4,
	5, 6, 5, 6, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 1, 1, 1,
	1, 1, 1, 6, 0, 8, 1, 1, 3, 1,
	1, 1, 1, 3, 1, 3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -6, -3, -7, -28, -31, -32, -33,
	-34, -35, -36, -37, -38, -39, -40, -48, -68, -69,
	-22, -23, -25, 68, 4, 6, 7, 8, -4, -5,
	-82, -8, 41, 44, 45, 60, 39, 55, 18, -83,
	146, -10, 145, -11, 29, 43, 5, 43, 43, 9,
	10, 11, 12, 13, 14, 15, 43, 34, 35, 36,
	16, 42, 47, 48, 50, 52, 142, 143, 42, 47,
	48, 50, 52, 143, 142, 42, 37, 151, 151, 49,
	43, -8, 151, -14, 37, 70, -12, 76, -13, -66,
	-49, -50, 151, 71, 72, 73, 74, 75, -51, -67,
	146, 127, 128, 129, 130, 43, 43, 43, 43, 43,
	43, 43, 43, -8, -8, -8, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 40, 146, 138, 16, 147, 146, 38,
	30, 32, 33, -15, -18, 151, -19, -9, 146, 150,
	-12, 49, 49, 49, 126, 146, 146, 146, 146, 146,
	77, 78, 70, 79, 80, -50, -66, -49, 17, 146,
	84, 49, 146, 51, -41, 54, 57, 58, 146, -72,
	-74, -73, 68, 141, 146, 144, 43, 43, 43, 43,
	43, 43, 43, 46, 44, 38, -9, 146, -86, 151,
	-26, -27, 151, 151, -84, 147, -81, -67, -83, -50,
	151, -62, -63, 146, -66, 148, 104, -85, -66, -20,
	-21, -66, -50, 127, 150, 22, 23, 24, 25, 27,
	28, 151, 49, 151, 49, -10, -13, 151, 151, 151,
	151, 76, -66, 76, -66, 76, -66, 76, -66, 76,
	-66, 70, -51, -50, -51, -51, -51, -51, 147, 19,
	151, 127, -29, -30, 151, 146, -9, -86, 151, 53,
	-44, 64, 55, 59, 60, 55, 59, 60, 56, -70,
	-71, 100, 139, 140, -74, -73, -75, -76, 137, 138,
	-77, -78, -6, 64, 133, 151, -70, -65, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 125, -30, -57, 96, 151, 96, -62, 43, -24,
	-67, 147, 150, 38, 150, 110, 17, 147, 150, 30,
	32, 33, 97, 98, -62, -85, -66, -64, 99, 100,
	148, 103, 110, 105, 106, 107, 108, 109, -66, 104,
	-9, 31, 32, 33, 150, 33, 150, 20, 21, 20,
	21, 150, -19, 151, 23, 151, 23, 25, 27, 28,
	26, 26, 26, 151, 151, 147, -66, 147, -66, 147,
	-66, 147, -66, 147, -66, 147, 147, 43, 43, 43,
	147, 150, -65, -62, 43, 147, 146, -42, -43, 61,
	63, -45, -46, 67, 68, 65, 51, 56, 51, 51,
	51, 56, 51, 51, 55, 59, 60, 147, 150, 151,
	151, 151, 69, -76, -81, 151, 151, -62, -65, 147,
	-72, -74, 146, 146, 146, 146, 146, 43, 43, 151,
	43, 151, 43, 147, 150, 40, 151, -62, -27, -50,
	-67, 19, 151, 127, -81, -85, -20, 127, -62, -62,
	147, 147, -67, 101, 102, 129, -9, 151, 100, 149,
	148, -64, -9, -62, -20, 127, -66, 127, -21, 127,
	151, 51, 151, 26, 26, 26, 23, 23, 23, 147,
	147, 147, 147, 147, 43, -55, -30, -57, -56, 82,
	83, 84, 85, -52, -54, -53, 96, 81, 82, 83,
	148, 86, 147, 49, -86, -44, 150, 62, 42, 62,
	42, -46, -62, -47, -6, 62, 66, 151, 151, 151,
	151, 151, 151, 151, 151, 51, 56, 51, 51, -72,
	-74, -71, -65, -65, -65, 43, 43, 110, 49, 132,
	43, 144, -74, 127, 127, 127, 127, 127, -56, 43,
	43, -67, -9, 146, 43, 43, 43, 43, 31, 32,
	33, 33, 150, 100, 148, -9, 151, -9, 151, -9,
	151, 149, 101, 102, 32, 33, 33, 150, 150, -16,
	-17, -66, 23, 23, 23, 151, 151, 151, 147, 150,
	146, 146, 146, 146, -54, -53, 151, -67, 149, 151,
	43, -9, 147, -45, -46, -43, 49, 49, 49, 49,
	69, -6, 51, 51, 151, 151, 151, 151, -74, -81,
	151, -75, -65, 147, 147, 147, 150, 150, 43, -24,
	-62, -20, 127, 127, 127, -9, 151, 100, -9, 151,
	-9, 151, -20, 127, 127, 127, 127, 97, 110, 151,
	151, 151, 51, 51, 51, 43, -57, -56, -86, -86,
	-62, 151, -53, 146, 43, 43, -46, 151, 151, 151,
	151, 43, 151, 151, 51, 43, 135, -79, 134, 69,
	-80, 131, -72, -74, 127, 127, 147, 32, 33, 33,
	150, 150, -9, 151, 33, 150, 150, -17, -66, -16,
	-16, -16, 147, 147, 147, 147, 151, 151, 64, 134,
	69, -80, -75, 133, -62, -74, 147, 147, 43, -20,
	127, 127, 127, 127, 127, 127, 127, 86, 147, -9,
	-75, 133, 69, 43, 132, -87, 33, 150, 150, 150,
	151, -61, -58, -59, -60, 87, 88, 89, 90, 91,
	92, 93, 136, 69, 43, 133, -75, 124, 127, 127,
	127, 127, 146, -59, -60, -58, -60, -58, -59, -75,
	133, 43, 150, 151, -60, -59, -60, -58, -59, -58,
	69, 43, 127, 147, 64, -61, 43,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 105, 106,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 0, 0, 0, 94, 0, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 29, 0, 53, 54, 0, 56, -2,
	-2, -2, 327, 0, 0, 0, 0, 0, 0, 221,
	0, 329, 330, 331, 332, 95, 98, 99, 100, 101,
	102, 103, 104, 23, 24, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	0, 0, 0, 64, 65, 80, 79, 83, 0, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 187, 0, 0, 0, 0, 132, 138, 141, 143,
	172, 209, 210, 0, 0, 0, 0, 0, 0, 334,
	0, 122, 0, 0, 0, 213, 215, -2, 206, -2,
	-2, 30, 280, 0, 0, 0, 0, 31, 336, 35,
	87, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 84, 0, 0, 57, 59, 61, 63,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 224, 217, 218, 219, 220, 225, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 175, 186, 0, 191, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 316, 317, 318, 319, 320, 321, 322, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 115, 0,
	120, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 0,
	0, 0, 306, 307, 308, 309, 310, 311, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 89, 90, 92,
	93, 0, 78, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 85, 28, 0, 227, 0, 229,
	0, 231, 0, 233, 0, 235, 236, 108, 109, 110,
	0, 0, 130, 0, 139, 0, 0, 0, 160, 0,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 133, 134, 0,
	135, 0, 114, 0, 0, 0, 333, 0, 123, -2,
	-2, 0, 0, 0, 214, 33, 36, 0, 282, 283,
	281, 0, 284, 0, 0, 285, 286, 288, 0, 298,
	0, 0, 305, 32, 37, 0, 335, 0, 86, 41,
	66, 0, 68, 0, 0, 0, 0, 0, 0, 226,
	228, 230, 232, 234, 126, 0, 129, 241, 242, 0,
	0, 0, 0, 131, 237, 238, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 168, 0, 170, 166, 167, 148, 0, 154,
	157, 150, 0, 155, 158, 0, 0, 0, 0, 0,
	174, 181, 183, 184, 185, 189, 192, 0, 0, 0,
	188, 0, 179, 0, 0, 0, 0, 0, 245, 136,
	116, 119, 0, 0, 121, 111, 112, 113, 0, 0,
	0, 0, 0, 0, 0, 290, 294, 292, 296, 287,
	289, 299, 0, 0, 0, 0, 0, 0, 0, 67,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 0, 252, 255, 0,
	137, 0, 0, 0, 146, 161, 0, 0, 0, 0,
	0, 171, 0, 0, 152, 0, 156, 159, 173, 0,
	0, 0, 0, 313, 314, 315, 0, 0, 117, 0,
	34, 39, 0, 0, 42, 300, 302, 0, 291, 295,
	293, 297, 38, 0, 0, 43, 47, 0, 0, 69,
	70, 71, 0, 0, 0, 127, 243, 244, 0, 0,
	0, 0, 251, 0, 140, 142, 144, 162, 164, 163,
	165, 169, 149, 151, 0, 193, 0, 0, 0, 0,
	203, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 303, 0, 0, 0, 75, 77, 72,
	73, 74, 246, 247, 248, 0, 0, 153, 0, 0,
	0, 202, 0, 0, 0, 177, 323, 324, 118, 40,
	0, 0, 45, 48, 0, 44, 49, 0, 256, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 199, 0, 204, 325, 0, 46,
	51, 50, 0, 261, 263, 262, 265, 264, 266, 0,
	0, 200, 0, 0, 267, 268, 269, 270, 271, 272,
	0, 198, 52, 249, 0, 250, 197,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:490
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:500
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:510
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DCL
			calcVAL.NodePt.Ast.Dcl = calcDollar[1].NodePt.Dcl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:520
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DQL
			calcVAL.NodePt.Ast.Dql = calcDollar[1].NodePt.Dql

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:554
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:562
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:570
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:578
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:586
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:602
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:610
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:618
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:642
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:650
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 19:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:679
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.Delete
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:687
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_INSERT
			calcVAL.NodePt.Dml.Insert = calcDollar[1].NodePt.Insert
		}
	case 21:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:695
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_UPDATE
			calcVAL.NodePt.Dml.Update = calcDollar[1].NodePt.Update
		}
	case 22:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:723
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 23:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:730
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_UNION
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql

		}
	case 24:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:740
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_DIFFERENCE
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql
		}
	case 25:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:749
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_INTERSECTION
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql
		}
	case 26:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:758
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 27:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:761
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_SINGLE_QUERY
			calcVAL.NodePt.Dql.Query = calcDollar[1].NodePt.Query
		}
	case 28:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:871
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 29:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:877
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 30:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:902
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 31:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:929
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 32:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 33:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:986
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 34:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1015
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 35:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1046
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[4].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 36:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1074
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 37:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1104
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 38:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1135
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 39:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 40:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1199
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[10].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1232
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[4].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[6].Int
		}
	case 42:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1260
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int
		}
	case 43:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1290
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int
		}
	case 44:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1321
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int
		}
	case 45:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1354
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int

		}
	case 46:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1387
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int

		}
	case 47:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1422
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[4].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int

		}
	case 48:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1453
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int

		}
	case 49:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1486
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int
		}
	case 50:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1519
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int
		}
	case 51:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1553
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int
		}
	case 52:
		calcDollar = calcS[calcpt-14 : calcpt+1]
//line parser/grammar.y:1587
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[10].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[12].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[14].Int
		}
	case 53:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = true
			calcVAL.NodePt.SelectStmt.DistinctValid = false
		}
	case 54:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = false
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[2].List.SelectList
		}
	case 55:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1643
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = true
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[3].List.SelectList
		}
	case 56:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1656
		{
			calcVAL.List = List{}
			calcVAL.List.Type = SELECT_LIST

			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[1].NodePt.SelectListEntry)
		}
	case 57:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1662
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[3].NodePt.SelectListEntry)
		}
	case 58:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1670
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 59:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1679
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 60:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1689
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 61:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1698
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 62:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1708
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 63:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1717
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 64:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1731
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = false
			calcVAL.NodePt.FromStmt.Join = calcDollar[2].NodePt.Join
		}
	case 65:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1739
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = true
			calcVAL.NodePt.FromStmt.FromList = calcDollar[2].List.FromList
		}
	case 66:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1751
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = CROSS_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 67:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1760
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[3].String
			calcVAL.NodePt.Join.OnList = calcDollar[5].List.OnList
		}
	case 68:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1770
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 69:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1779
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_FULL_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 70:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1788
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_LEFT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 71:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1797
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_RIGHT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 72:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1806
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = FULL_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 73:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1816
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = LEFT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 74:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1826
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = RIGHT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 75:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1840
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[3].NodePt.OnListEntry)
		}
	case 76:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1844
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ON_LIST

			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[1].NodePt.OnListEntry)
		}
	case 77:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1854
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ON_LIST_ENTRY

			calcVAL.NodePt.OnListEntry = &OnListEntryNode{}
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameR = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 78:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1866
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[3].NodePt.FromListEntry)
		}
	case 79:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1870
		{
			calcVAL.List = List{}
			calcVAL.List.Type = FROM_LIST

			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[1].NodePt.FromListEntry)
		}
	case 80:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1880
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = false

		}
	case 81:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1890
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 82:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1900
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 83:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1910
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = false
		}
	case 84:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1919
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 85:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1929
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 86:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1943
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[3].NodePt.OrderByListEntry)
		}
	case 87:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1947
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ORDERBY_LIST

			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[1].NodePt.OrderByListEntry)
		}
	case 88:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 89:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1966
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 90:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1975
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 91:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1984
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 92:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1993
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 93:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2002
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 94:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2047
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 95:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2054
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 96:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2061
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_COMMIT
		}
	case 97:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2068
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_ROLLBACK
		}
	case 98:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2075
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TABLES
		}
	case 99:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2082
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_ASSERTIONS
		}
	case 100:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2089
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_VIEWS
		}
	case 101:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2096
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_INDEXS
		}
	case 102:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2103
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TRIGGERS
		}
	case 103:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2110
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_FUNCTIONS
		}
	case 104:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2117
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_PROCEDURES
		}
	case 105:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2124
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 106:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2127
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 107:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2130
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_PSMCALL
			calcVAL.NodePt.Dcl.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 108:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2142
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 109:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2151
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 110:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2160
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[5].Int)
		}
	case 111:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2173
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 112:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2182
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 113:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2191
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[6].Int)
		}
	case 114:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2211
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.Delete = &DeleteNode{}
			calcVAL.NodePt.Delete.TableName = calcDollar[3].String
			calcVAL.NodePt.Delete.Condition = calcDollar[5].NodePt.Condition
		}
	case 115:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2239
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[4].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = false
		}
	case 116:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2250
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.AttriNameListValid = false
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[5].List.ElementaryValueList
		}
	case 117:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2261
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 118:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2273
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[8].List.ElementaryValueList
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 119:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2289
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[3].NodePt.ElementaryValue)
		}
	case 120:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2293
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ELEMENTARY_VALUE_LIST

			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[1].NodePt.ElementaryValue)
		}
	case 121:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2320
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_NODE

			calcVAL.NodePt.Update = &UpdateNode{}
			calcVAL.NodePt.Update.TableName = calcDollar[2].String
			calcVAL.NodePt.Update.Condition = calcDollar[6].NodePt.Condition
			calcVAL.NodePt.Update.UpdateList = calcDollar[4].List.UpdateList
		}
	case 122:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2333
		{
			calcVAL.List = List{}
			calcVAL.List.Type = UPDATE_LIST

			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[1].NodePt.UpdateListEntry)
		}
	case 123:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2339
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[3].NodePt.UpdateListEntry)
		}
	case 124:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2347
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.Expression = calcDollar[3].NodePt.Expression
		}
	case 125:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2356
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_ELEMENTARY_VALUE
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 126:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2387
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 127:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2402
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 128:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2424
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 129:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2429
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 130:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2437
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 131:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2446
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 132:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2483
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 133:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2502
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 134:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2517
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 135:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2539
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 136:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2547
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 137:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2566
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 138:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2585
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 139:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2604
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 140:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2613
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 141:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 142:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2652
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 143:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2672
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 144:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2733
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 145:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2754
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 146:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2774
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 147:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2794
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 148:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2817
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 149:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2825
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 150:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2834
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 151:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2842
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 152:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2851
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 153:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2859
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 154:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2868
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 155:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2876
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 156:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2884
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 157:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2892
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 158:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2900
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 159:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2908
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 160:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2920
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 161:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2926
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 162:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2935
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 163:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2943
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 164:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2951
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 165:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2959
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 166:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2971
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 167:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2976
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 168:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2985
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 169:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2992
		{
			calcVAL.List = calcDollar[2].List
		}
	case 170:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2999
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 171:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3005
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 172:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3020
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 173:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3099
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 174:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3113
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 175:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3125
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 176:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3137
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 177:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3148
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 178:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3161
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 179:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3173
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 180:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3185
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 181:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3200
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 182:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3204
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 183:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3214
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 184:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3225
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 185:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3234
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 186:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3247
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 187:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3251
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 188:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3261
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 189:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3273
		{
			calcVAL.List = calcDollar[2].List
		}
	case 190:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3280
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 191:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3285
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 192:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3295
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 193:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3303
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 194:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3312
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 195:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3320
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 196:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3328
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 197:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:3340
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 198:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3354
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 199:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3367
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 200:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3379
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 201:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3391
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 202:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3406
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 203:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3410
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 204:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3420
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 205:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3432
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 206:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3440
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 207:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3448
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 208:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3456
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 209:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3476
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 210:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3484
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 211:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3513
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 212:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3520
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 213:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3529
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 214:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3541
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 215:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3545
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 216:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3574
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 217:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3583
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 218:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3592
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 219:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3601
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 220:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3610
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 221:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3623
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 222:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3632
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 223:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3641
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 224:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3650
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 225:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3659
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 226:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3689
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 227:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3698
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 228:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3707
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 229:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3716
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 230:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3725
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 231:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3734
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 232:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3743
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 233:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3752
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 234:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3761
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 235:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3770
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 236:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3779
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 237:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3860
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 238:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3865
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 239:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3870
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 240:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3874
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 241:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3882
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 242:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3887
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 243:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3892
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 244:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3896
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 245:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3904
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 246:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3913
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 247:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3922
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 248:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3931
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 249:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3940
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 250:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3951
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 251:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3979
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 252:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3988
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 253:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3997
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 254:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4005
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 255:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4013
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 256:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4021
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 257:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4031
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 258:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4058
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 259:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4068
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 260:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4078
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 261:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4088
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 262:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4099
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 263:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4110
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 264:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4121
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 265:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4132
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 266:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4143
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 267:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4154
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 268:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4166
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 269:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4178
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 270:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4190
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 271:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4202
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 272:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4214
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 273:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4230
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 274:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4235
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 275:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4240
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 276:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4249
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 277:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4254
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 278:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4263
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 279:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4268
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 280:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4287
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 281:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4295
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 282:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4298
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 283:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4307
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 284:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4358
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 285:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4369
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 286:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4381
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 287:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4391
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 288:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4401
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 289:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4411
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 290:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4421
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 291:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4432
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 292:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4443
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 293:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4454
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 294:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4465
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 295:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4476
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 296:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4487
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 297:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4498
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 298:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4509
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 299:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4518
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 300:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4527
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 301:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4537
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[6].NodePt.Query
		}
	case 302:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4547
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 303:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4557
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 304:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4567
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[2].NodePt.Query
		}
	case 305:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4576
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 306:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 307:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 308:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4599
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 309:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4604
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 310:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4609
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 311:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4614
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 312:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4644
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 313:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4651
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 314:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4659
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 315:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4667
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 316:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4675
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 317:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4682
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 318:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4689
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 319:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4696
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 320:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4703
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 321:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4710
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 322:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4717
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 323:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4724
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 324:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4733
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 325:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:4742
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 326:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4749
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 327:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4768
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 328:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4775
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 329:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4798
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 330:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4805
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 331:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4812
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 332:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4819
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 333:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4844
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 334:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4847
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 335:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4854
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 336:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4858
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
