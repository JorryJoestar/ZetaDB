// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"strconv"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 14

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE NodeEnum = 16

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51

	/* insert */
	INSERT_NODE NodeEnum = 52

	/* update */
	UPDATE_LIST_ENTRY NodeEnum = 53
	UPDATE_NODE       NodeEnum = 54
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dql */
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode

	/* dcl */
	Dcl *DCLNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	Delete *DeleteNode

	/* insert */
	Insert *InsertNode

	/* update */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode

	/* public */
	Subquery *QueryNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
	ELEMENTARY_VALUE_LIST           ListEnum = 12
	UPDATE_LIST                     ListEnum = 13
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
	ElementaryValueList          []*ElementaryValueNode
	UpdateList                   []*UpdateListEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

//line parser/grammar.y:254
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const START = 57346
const TRANSACTION = 57347
const COMMIT = 57348
const ROLLBACK = 57349
const SHOW = 57350
const TABLES = 57351
const ASSERTIONS = 57352
const VIEWS = 57353
const INDEXS = 57354
const TRIGGERS = 57355
const FUNCTIONS = 57356
const PROCEDURES = 57357
const USER = 57358
const PASSWORD = 57359
const CONNECT = 57360
const PASSWORDS = 57361
const FROM = 57362
const WHERE = 57363
const INSERTINTO = 57364
const VALUES = 57365
const CREATE = 57366
const TABLE = 57367
const SEMICOLON = 57368
const DROP = 57369
const ALTER = 57370
const ADD = 57371
const ASSERTION = 57372
const VIEW = 57373
const AS = 57374
const INDEX = 57375
const ON = 57376
const TRIGGER = 57377
const REFERENCING = 57378
const BEFORE = 57379
const UPDATE = 57380
const OF = 57381
const AFTER = 57382
const INSTEAD = 57383
const INSERT = 57384
const DELETE = 57385
const OLD = 57386
const ROW = 57387
const NEW = 57388
const FOR = 57389
const EACH = 57390
const STATEMENT = 57391
const WHEN = 57392
const BEGINTOKEN = 57393
const END = 57394
const STAR = 57395
const SUM = 57396
const AVG = 57397
const MIN = 57398
const MAX = 57399
const COUNT = 57400
const DISTINCT = 57401
const PLUS = 57402
const SUBTRACT = 57403
const DIVISION = 57404
const CONCATENATION = 57405
const DEFAULT = 57406
const UNIQUE = 57407
const PRIMARYKEY = 57408
const CHECK = 57409
const FOREIGNKEY = 57410
const REFERENCES = 57411
const NOT_DEFERRABLE = 57412
const DEFERED_DEFERRABLE = 57413
const IMMEDIATE_DEFERRABLE = 57414
const UPDATE_NULL = 57415
const UPDATE_CASCADE = 57416
const DELETE_NULL = 57417
const DELETE_CASCADE = 57418
const DEFERRED = 57419
const IMMEDIATE = 57420
const CONSTRAINT = 57421
const AND = 57422
const OR = 57423
const LIKE = 57424
const IN = 57425
const ALL = 57426
const ANY = 57427
const IS = 57428
const EXISTS = 57429
const NOTEQUAL = 57430
const LESS = 57431
const GREATER = 57432
const LESSEQUAL = 57433
const GREATEREQUAL = 57434
const EQUAL = 57435
const CHAR = 57436
const VARCHAR = 57437
const BIT = 57438
const BITVARYING = 57439
const BOOLEAN = 57440
const INT = 57441
const INTEGER = 57442
const SHORTINT = 57443
const FLOAT = 57444
const REAL = 57445
const DOUBLEPRECISION = 57446
const DECIMAL = 57447
const NUMERIC = 57448
const DATE = 57449
const TIME = 57450
const DOT = 57451
const INTVALUE = 57452
const FLOATVALUE = 57453
const STRINGVALUE = 57454
const BOOLVALUE = 57455
const ELSEIF = 57456
const THEN = 57457
const IF = 57458
const ELSE = 57459
const CURSOR = 57460
const DO = 57461
const RETURN = 57462
const SET = 57463
const OUT = 57464
const INOUT = 57465
const DECLARE = 57466
const PROCEDURE = 57467
const FUNCTION = 57468
const RETURNS = 57469
const CALL = 57470
const LPAREN = 57471
const RPAREN = 57472
const NOT = 57473
const NULLMARK = 57474
const COMMA = 57475
const ID = 57476

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SHOW",
	"TABLES",
	"ASSERTIONS",
	"VIEWS",
	"INDEXS",
	"TRIGGERS",
	"FUNCTIONS",
	"PROCEDURES",
	"USER",
	"PASSWORD",
	"CONNECT",
	"PASSWORDS",
	"FROM",
	"WHERE",
	"INSERTINTO",
	"VALUES",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:3519

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	26, 132,
	130, 132,
	133, 132,
	-2, 148,
	-1, 144,
	26, 134,
	130, 134,
	133, 134,
	-2, 151,
	-1, 145,
	26, 135,
	130, 135,
	133, 135,
	-2, 254,
	-1, 329,
	21, 51,
	133, 51,
	-2, 151,
	-1, 330,
	21, 52,
	133, 52,
	-2, 148,
}

const calcPrivate = 57344

const calcLast = 806

var calcAct = [...]int{
	582, 187, 585, 583, 130, 217, 539, 114, 584, 151,
	186, 115, 113, 263, 213, 365, 358, 133, 225, 192,
	3, 259, 364, 262, 309, 197, 163, 242, 170, 180,
	141, 337, 216, 136, 349, 331, 159, 154, 155, 156,
	157, 158, 222, 150, 609, 321, 581, 558, 154, 155,
	156, 157, 158, 310, 311, 557, 347, 313, 532, 315,
	316, 317, 318, 319, 314, 132, 132, 353, 531, 359,
	360, 361, 362, 351, 132, 132, 132, 345, 154, 155,
	156, 157, 158, 214, 219, 343, 221, 215, 529, 223,
	570, 551, 223, 146, 147, 148, 149, 528, 527, 549,
	546, 503, 312, 526, 146, 147, 148, 149, 214, 223,
	166, 38, 153, 140, 367, 368, 369, 145, 520, 371,
	132, 184, 38, 153, 167, 185, 333, 161, 145, 142,
	132, 223, 132, 144, 146, 147, 148, 149, 164, 220,
	134, 367, 368, 369, 223, 501, 371, 487, 223, 484,
	332, 160, 223, 153, 212, 499, 366, 430, 223, 226,
	223, 554, 553, 164, 228, 228, 552, 483, 482, 324,
	469, 254, 481, 228, 171, 220, 466, 463, 394, 455,
	393, 370, 456, 423, 323, 241, 424, 324, 284, 23,
	253, 24, 25, 26, 392, 391, 390, 389, 388, 387,
	288, 335, 137, 36, 220, 292, 326, 34, 370, 30,
	291, 229, 31, 32, 302, 300, 142, 287, 286, 285,
	144, 289, 282, 35, 281, 306, 280, 322, 33, 308,
	290, 320, 195, 279, 278, 327, 22, 279, 256, 220,
	251, 228, 233, 252, 227, 234, 494, 228, 599, 168,
	164, 138, 96, 344, 346, 348, 350, 352, 95, 330,
	376, 493, 142, 329, 328, 334, 144, 357, 94, 93,
	382, 92, 91, 90, 220, 374, 381, 89, 88, 356,
	336, 338, 339, 340, 341, 384, 400, 375, 87, 86,
	85, 399, 84, 83, 82, 81, 80, 71, 68, 412,
	67, 433, 432, 185, 304, 305, 402, 403, 404, 401,
	420, 421, 504, 38, 220, 220, 429, 418, 495, 50,
	465, 304, 305, 230, 304, 305, 435, 116, 51, 618,
	438, 573, 568, 52, 53, 567, 54, 425, 55, 556,
	513, 58, 512, 511, 510, 434, 59, 60, 509, 61,
	492, 62, 437, 444, 555, 446, 491, 448, 490, 450,
	454, 452, 453, 451, 449, 132, 496, 447, 445, 342,
	132, 422, 97, 119, 372, 118, 522, 105, 468, 462,
	460, 459, 458, 457, 297, 439, 461, 296, 34, 471,
	131, 295, 294, 293, 257, 464, 247, 246, 472, 470,
	117, 245, 244, 478, 35, 112, 243, 485, 165, 33,
	103, 185, 101, 193, 411, 116, 99, 593, 538, 535,
	488, 179, 181, 607, 34, 596, 576, 34, 56, 57,
	34, 498, 500, 561, 497, 142, 502, 489, 486, 144,
	35, 64, 63, 35, 564, 33, 35, 428, 33, 193,
	544, 33, 193, 543, 616, 193, 417, 594, 508, 132,
	577, 182, 183, 416, 415, 519, 414, 226, 413, 220,
	235, 515, 598, 516, 106, 517, 518, 407, 98, 521,
	540, 231, 194, 537, 525, 572, 188, 189, 117, 547,
	284, 265, 304, 305, 431, 540, 104, 542, 560, 266,
	545, 619, 541, 440, 304, 305, 146, 147, 148, 149,
	548, 550, 505, 506, 303, 304, 305, 34, 194, 591,
	592, 194, 188, 189, 194, 188, 189, 579, 188, 189,
	589, 590, 559, 35, 533, 34, 264, 265, 33, 409,
	196, 385, 193, 562, 178, 386, 565, 283, 563, 566,
	220, 35, 569, 185, 426, 427, 33, 304, 305, 169,
	193, 586, 587, 588, 574, 284, 591, 592, 304, 305,
	171, 575, 589, 590, 591, 592, 480, 284, 380, 395,
	146, 147, 148, 149, 396, 479, 601, 603, 602, 604,
	597, 260, 600, 261, 605, 586, 587, 588, 379, 284,
	398, 397, 274, 610, 606, 612, 378, 613, 284, 615,
	611, 194, 273, 614, 109, 188, 189, 110, 111, 620,
	315, 316, 317, 318, 319, 314, 377, 275, 270, 194,
	269, 276, 277, 188, 189, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 107, 211,
	359, 360, 361, 362, 586, 587, 588, 589, 590, 591,
	592, 476, 475, 474, 214, 586, 587, 588, 589, 590,
	359, 360, 361, 362, 238, 34, 34, 473, 408, 129,
	373, 236, 237, 239, 240, 175, 128, 69, 127, 176,
	177, 35, 35, 65, 172, 271, 33, 33, 173, 174,
	272, 267, 621, 617, 608, 477, 268, 595, 578, 571,
	534, 530, 524, 523, 514, 507, 467, 443, 442, 441,
	436, 419, 410, 406, 405, 354, 301, 299, 298, 255,
	250, 249, 248, 224, 126, 125, 124, 123, 122, 121,
	120, 79, 78, 77, 76, 75, 74, 73, 72, 70,
	42, 41, 39, 325, 43, 44, 45, 46, 47, 48,
	49, 66, 40, 232, 102, 100, 143, 37, 580, 307,
	139, 29, 536, 191, 190, 18, 17, 218, 355, 363,
	152, 16, 383, 258, 108, 15, 14, 13, 12, 11,
	10, 9, 8, 7, 6, 162, 5, 135, 21, 20,
	19, 28, 27, 4, 2, 1,
}

var calcPact = [...]int{
	185, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 726, 757, 725, 724, 745, -1000, -1000, -1000,
	303, 316, 668, 741, 166, 164, 655, 723, 163, -1000,
	722, -1000, -1000, 721, 720, 719, 718, 717, 716, 715,
	162, 161, 160, 159, 158, 156, 155, 154, 144, 143,
	139, 138, 137, 135, 134, 124, 118, 349, 295, 749,
	-1000, 283, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	747, 281, 429, 345, 614, 577, 276, 246, 714, 713,
	712, 711, 710, 709, 708, 659, 658, 261, 6, 68,
	117, -17, 17, 116, 279, 350, 6, 115, 523, 656,
	647, 505, 339, 364, -1000, -1000, 513, 98, 339, 541,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29, -47, -45,
	707, 396, -1000, 114, -1000, 190, -1000, 388, 746, 112,
	-1000, -1000, -1000, -1000, -1000, 361, -1000, -1000, -1000, -1000,
	621, -1000, -1000, 24, 277, 273, 272, 268, 267, 706,
	705, 704, 110, -1000, 541, -45, 703, 108, 265, 547,
	486, 451, 667, 596, 594, 661, 578, 568, 589, 104,
	-1000, 92, 90, 88, -1000, -1000, 495, -1000, -6, 84,
	-1000, -1000, -1000, 83, -45, 541, 100, 364, -1000, 264,
	263, 262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 258,
	255, -1000, 702, 701, 81, 700, 80, 488, -1000, -45,
	-29, -42, 350, 361, -1000, 54, -1000, 730, 72, -45,
	68, 24, 16, -1000, -6, 67, 24, 24, 24, 24,
	24, 239, -1000, 26, 18, -3, -25, 14, -1000, -1000,
	-1000, 699, 4, 77, 244, -1000, 648, 6, 127, -1000,
	581, 553, 440, -1000, -45, 654, 496, 65, 64, 63,
	62, 61, 60, 46, 44, 545, 567, 566, 364, 339,
	541, 541, 541, 698, -1000, 697, 384, 646, 424, 696,
	287, 364, -1000, 358, 356, 354, 353, 346, -1000, -1000,
	605, -1000, 695, -1000, -45, -45, 241, 53, -29, 470,
	335, 23, 411, 170, -1000, -1000, -1000, -1000, -1000, -1000,
	532, 350, -1000, 694, 396, 256, -1000, 477, -1000, -1000,
	-1000, 693, 692, 691, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10, 238, 10, 237, 10, 234, 10,
	233, 10, 232, 230, -1000, 49, -1000, -1000, -1000, 254,
	253, 252, 251, 77, -1000, -1000, 43, 396, -1000, -1000,
	188, 42, 690, 350, 40, 486, 547, 645, 631, 630,
	629, -1000, 435, 653, -1000, -1000, -1000, -1000, 551, -1000,
	-1000, -1000, 542, -1000, -1000, 38, 34, 33, 15, 364,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -6, 13, 513,
	-1000, 541, -1000, 228, 226, 220, 128, 113, -1000, -1000,
	-1000, -1000, -1000, 235, 10, -1000, 21, 11, -1000, -1000,
	-1000, -33, -1000, 180, 428, -1000, -1000, -1000, 689, 396,
	-1000, -1000, -1000, -1000, 218, -1000, 214, -1000, 213, -1000,
	212, -1000, 210, -1000, -1000, 688, 585, 6, 6, -45,
	-16, -1000, -1000, 50, -1000, -1000, 247, -1000, 687, 686,
	440, -1000, -1000, -31, -36, -37, -46, 685, -1000, -66,
	-76, -1000, 500, -1000, -1000, -1000, 684, 301, 366, 364,
	-1000, -1000, -1000, 343, 340, -34, 406, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -35, -43, -1000, 36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 32, 31, 224,
	209, -1000, -79, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -87, -1000, 485, 381, 513, 328, -1000,
	-45, 364, -1000, 205, 202, -1000, -1000, -44, -1000, -1000,
	-1000, -1000, 683, -1000, -1000, -1000, 416, 201, -1000, 350,
	513, 310, -1000, 408, 682, 412, -1000, -1000, -1000, -1000,
	-1000, -1000, -88, 584, 298, 405, 681, 309, -1000, 513,
	365, 119, -1000, 499, 491, 595, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 513, 307, -1000, 678, 513, -1000, -90,
	444, 457, 444, 525, 457, 525, 402, 677, -1000, 199,
	-1000, -1000, -1000, -1000, -1000, -1000, 454, -1000, 584, 676,
	-1000, -1000,
}

var calcPgo = [...]int{
	0, 805, 804, 803, 802, 801, 19, 800, 799, 18,
	798, 797, 33, 796, 795, 26, 794, 793, 792, 791,
	790, 789, 788, 787, 786, 785, 784, 783, 21, 28,
	23, 13, 782, 781, 780, 31, 43, 779, 15, 22,
	778, 16, 14, 3, 8, 2, 0, 5, 777, 24,
	25, 9, 4, 27, 776, 775, 421, 29, 12, 11,
	7, 10, 1, 774, 773, 772, 6, 30, 771, 766,
	770, 769, 17, 768,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 6, 6,
	6, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 5, 5,
	5, 7, 8, 8, 8, 8, 9, 9, 10, 11,
	11, 12, 12, 13, 13, 14, 14, 15, 15, 16,
	17, 17, 18, 18, 19, 20, 21, 21, 22, 23,
	24, 25, 25, 25, 25, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 27, 27, 28,
	28, 28, 28, 29, 29, 30, 31, 32, 32, 33,
	54, 54, 54, 54, 54, 54, 54, 54, 56, 56,
	57, 57, 57, 58, 58, 59, 60, 61, 61, 62,
	62, 62, 62, 62, 63, 64, 64, 64, 64, 65,
	65, 66, 67, 67, 67, 67, 55, 55, 68, 69,
	69, 70, 70, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 37, 37, 37, 37, 40, 40,
	40, 40, 42, 41, 41, 41, 41, 41, 39, 38,
	38, 38, 38, 38, 38, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	43, 43, 43, 44, 44, 45, 45, 47, 47, 47,
	47, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 49, 49, 49, 49, 49, 49, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 73, 50, 50, 51, 51, 52, 53, 53, 53,
	53, 72, 72, 71, 71,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 6, 6, 6, 7, 7,
	7, 6, 5, 7, 8, 10, 3, 1, 7, 1,
	3, 3, 3, 7, 9, 1, 3, 2, 3, 4,
	6, 6, 6, 7, 8, 4, 6, 9, 4, 9,
	4, 9, 7, 8, 6, 4, 6, 4, 6, 5,
	7, 4, 4, 5, 4, 4, 5, 1, 3, 4,
	4, 4, 4, 3, 3, 2, 4, 1, 2, 4,
	8, 7, 5, 4, 10, 9, 7, 6, 3, 1,
	3, 3, 3, 2, 1, 4, 4, 2, 1, 3,
	5, 1, 1, 1, 12, 10, 8, 9, 7, 2,
	1, 4, 1, 1, 1, 1, 4, 4, 2, 5,
	4, 3, 1, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 4, 5, 4, 5, 4, 5,
	4, 5, 4, 4, 1, 1, 2, 2, 1, 1,
	3, 3, 3, 4, 4, 4, 9, 10, 3, 2,
	1, 1, 2, 5, 6, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 4, 5, 4,
	5, 4, 5, 4, 5, 3, 4, 5, 6, 5,
	6, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	6, 0, 8, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 1, 3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -6, -3, -13, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -33, -54, -55, -7,
	-8, -10, 51, 4, 6, 7, 8, -4, -5, -68,
	24, 27, 28, 43, 22, 38, 18, -69, 128, 26,
	5, 26, 26, 9, 10, 11, 12, 13, 14, 15,
	16, 25, 30, 31, 33, 35, 125, 126, 25, 30,
	31, 33, 35, 126, 125, 25, 20, 134, 134, 32,
	26, 134, 26, 26, 26, 26, 26, 26, 26, 26,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 23, 129, 121,
	16, 129, 17, 129, 67, 32, 129, 34, -26, 37,
	40, 41, 129, -58, -60, -59, 51, 124, 129, 127,
	26, 26, 26, 26, 26, 26, 26, 29, 27, 21,
	-52, 129, 109, -72, 134, -11, -12, 134, 134, -70,
	130, -67, -53, -69, -35, 134, 110, 111, 112, 113,
	-36, -51, -34, 129, 54, 55, 56, 57, 58, 19,
	134, 110, -14, -15, 134, 129, -52, -72, 134, 36,
	-29, 47, 38, 42, 43, 38, 42, 43, 39, -56,
	-57, 83, 122, 123, -60, -59, -61, -62, 120, 121,
	-63, -64, -6, 47, 116, 134, -56, -50, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 108, -15, -42, 79, 134, 79, -47, -48, 129,
	-51, 131, 87, 134, 26, -9, -53, 130, 133, 21,
	133, 93, 17, 130, 133, 109, 60, 61, 53, 62,
	63, -35, -53, 129, 129, 129, 129, 129, 26, 26,
	26, 130, 133, -50, -47, 26, 130, 129, -27, -28,
	44, 46, -30, -31, 50, 51, 48, 34, 39, 34,
	34, 34, 39, 34, 34, 38, 42, 43, 130, 133,
	134, 134, 134, 52, -62, -67, 134, 134, -47, -50,
	130, -58, -60, 129, 129, 129, 129, 129, 26, 26,
	134, 26, 134, 26, 80, 81, -47, -71, -51, -49,
	82, 83, 131, 86, 93, 88, 89, 90, 91, 92,
	-51, 87, -52, 130, 133, 23, 134, -47, -12, -35,
	-53, 19, 134, 110, -67, 134, -36, -35, -36, -36,
	-36, -36, 130, 59, -51, 59, -51, 59, -51, 59,
	-51, 59, -51, 53, 26, -40, -15, -42, -41, 65,
	66, 67, 68, -37, -39, -38, 79, 64, 65, 66,
	131, 69, 130, 32, -72, -29, 133, 45, 25, 45,
	25, -31, -47, -32, -6, 45, 49, 134, 134, 134,
	134, 134, 134, 134, 134, 34, 39, 34, 34, -58,
	-60, -57, -50, -50, -50, 26, 26, 93, 32, 115,
	26, 127, -60, 110, 110, 110, 110, 110, -41, 26,
	-47, -47, 130, 130, 133, -53, 84, 85, 112, -52,
	134, 83, 132, 131, -49, -52, 26, -53, -52, 129,
	26, 26, 26, 26, -51, 130, -51, 130, -51, 130,
	-51, 130, -51, 130, 130, 130, 133, 129, 129, 129,
	129, -39, -38, 134, -53, 132, 134, 26, -52, 130,
	-30, -31, -28, 32, 32, 32, 32, 52, -6, 34,
	34, 134, 134, 134, 134, -60, -67, 134, -61, -50,
	130, 130, 130, 133, 133, 83, 131, -51, -52, 134,
	-52, 134, -52, 134, 132, 84, 85, 26, -9, 130,
	130, 130, 130, 130, 26, -42, -41, -72, -72, -47,
	134, -38, 129, 26, 26, -31, 134, 134, 134, 134,
	26, 134, 134, 34, 26, 118, -65, 117, 52, -66,
	114, -58, -60, 110, 110, -52, 134, 83, -52, 134,
	-52, 134, 130, 130, 130, 130, 130, 134, 134, 47,
	117, 52, -66, -61, 116, -47, -60, 130, 130, -52,
	134, 26, 69, 130, -52, -61, 116, 52, 26, 115,
	-73, 134, -46, -43, -44, -45, 70, 71, 72, 73,
	74, 75, 76, 119, 52, 26, 116, -61, 107, 129,
	-44, -45, -43, -45, -43, -44, -61, 116, 26, 134,
	-45, -44, -45, -43, -44, -43, 52, 26, 130, 47,
	-46, 26,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 32, 33, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
	0, 23, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 22, 25, 26, 27, 28, 29, 30, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 114, 0, 0, 0, 0,
	59, 65, 68, 70, 99, 136, 137, 0, 0, 0,
	0, 0, 256, 0, 262, 0, 49, 0, 0, 0,
	140, 142, -2, 133, -2, -2, 257, 258, 259, 260,
	0, 149, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 102, 113, 0, 118, 0, 0,
	121, 122, 123, 0, 0, 0, 0, 0, 239, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 249, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 254, 42, 0, 47, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 151, 148, 0, 0, 0, 0, 0, 35, 36,
	37, 0, 0, 57, 0, 66, 0, 0, 0, 87,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 60, 61,
	0, 62, 0, 41, 0, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 231, 0, 0, 0, 261, 0, 50, -2,
	-2, 0, 0, 0, 141, 255, 143, 151, 144, 145,
	146, 147, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 56, 168, 169, 0,
	0, 0, 0, 58, 164, 165, 0, 0, 180, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 95, 0, 97, 93, 94, 75, 0, 81,
	84, 77, 0, 82, 85, 0, 0, 0, 0, 0,
	101, 108, 110, 111, 112, 116, 119, 0, 0, 0,
	115, 0, 106, 0, 0, 0, 0, 0, 172, 63,
	209, 210, 208, 0, 0, 211, 0, 0, 212, 213,
	215, 0, 225, 0, 0, 232, 43, 46, 0, 0,
	48, 38, 39, 40, 0, 154, 0, 156, 0, 158,
	0, 160, 0, 162, 163, 0, 0, 0, 0, 0,
	0, 166, 167, 0, 179, 182, 0, 64, 0, 0,
	0, 73, 88, 0, 0, 0, 0, 0, 98, 0,
	0, 79, 0, 83, 86, 100, 0, 0, 0, 0,
	240, 241, 242, 0, 0, 0, 0, 263, 217, 221,
	219, 223, 214, 216, 226, 0, 0, 44, 0, 153,
	155, 157, 159, 161, 54, 170, 171, 0, 0, 0,
	0, 178, 0, 67, 69, 71, 89, 91, 90, 92,
	96, 76, 78, 0, 120, 0, 0, 0, 0, 130,
	0, 0, 105, 0, 0, 227, 229, 0, 218, 222,
	220, 224, 0, 173, 174, 175, 0, 0, 80, 0,
	0, 0, 129, 0, 0, 0, 104, 250, 251, 228,
	230, 45, 0, 183, 0, 0, 0, 0, 128, 0,
	0, 0, 184, 185, 186, 187, 200, 201, 202, 203,
	204, 205, 206, 0, 0, 126, 0, 131, 252, 0,
	188, 190, 189, 192, 191, 193, 0, 0, 127, 0,
	194, 195, 196, 197, 198, 199, 0, 125, 176, 0,
	177, 124,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:446
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:456
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:466
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DCL
			calcVAL.NodePt.Ast.Dcl = calcDollar[1].NodePt.Dcl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:500
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:508
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:516
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:524
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:532
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:540
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:548
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:556
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:564
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:572
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:580
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:588
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:596
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:604
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:625
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.Delete
		}
	case 19:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:633
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_INSERT
			calcVAL.NodePt.Dml.Insert = calcDollar[1].NodePt.Insert
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:641
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_UPDATE
			calcVAL.NodePt.Dml.Update = calcDollar[1].NodePt.Update
		}
	case 21:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:685
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 22:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:692
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 23:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:699
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_COMMIT
		}
	case 24:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:706
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_ROLLBACK
		}
	case 25:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:713
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TABLES
		}
	case 26:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:720
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_ASSERTIONS
		}
	case 27:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:727
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_VIEWS
		}
	case 28:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:734
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_INDEXS
		}
	case 29:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:741
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TRIGGERS
		}
	case 30:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:748
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_FUNCTIONS
		}
	case 31:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:755
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_PROCEDURES
		}
	case 32:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:762
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 33:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:765
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 34:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:768
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_PSMCALL
			calcVAL.NodePt.Dcl.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 35:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:780
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 36:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:789
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 37:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:798
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[5].Int)
		}
	case 38:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:811
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 39:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:820
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 40:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:829
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[6].Int)
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:849
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.Delete = &DeleteNode{}
			calcVAL.NodePt.Delete.TableName = calcDollar[3].String
			calcVAL.NodePt.Delete.Condition = calcDollar[5].NodePt.Condition
		}
	case 42:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:877
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Subquery = calcDollar[4].NodePt.Subquery
			calcVAL.NodePt.Insert.AttriNameListValid = false
		}
	case 43:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:888
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.AttriNameListValid = false
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[5].List.ElementaryValueList
		}
	case 44:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:899
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Subquery = calcDollar[7].NodePt.Subquery
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 45:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:911
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[8].List.ElementaryValueList
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 46:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:927
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[3].NodePt.ElementaryValue)
		}
	case 47:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:931
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ELEMENTARY_VALUE_LIST

			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[1].NodePt.ElementaryValue)
		}
	case 48:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:958
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_NODE

			calcVAL.NodePt.Update = &UpdateNode{}
			calcVAL.NodePt.Update.TableName = calcDollar[2].String
			calcVAL.NodePt.Update.Condition = calcDollar[6].NodePt.Condition
			calcVAL.NodePt.Update.UpdateList = calcDollar[4].List.UpdateList
		}
	case 49:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:971
		{
			calcVAL.List = List{}
			calcVAL.List.Type = UPDATE_LIST

			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[1].NodePt.UpdateListEntry)
		}
	case 50:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:977
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[3].NodePt.UpdateListEntry)
		}
	case 51:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:985
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.Expression = calcDollar[3].NodePt.Expression
		}
	case 52:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:994
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_ELEMENTARY_VALUE
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 53:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1025
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 54:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1040
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 55:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1062
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 56:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1067
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 57:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1075
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 58:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1084
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 59:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1121
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 60:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1140
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 61:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1155
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 62:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1177
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 63:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1185
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 64:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1204
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 65:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1223
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 66:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1242
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 67:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1251
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 68:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1272
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 69:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1290
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 70:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1310
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 71:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1371
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 72:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1392
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 73:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1412
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 74:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1432
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 75:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1455
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 76:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1463
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 77:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1472
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 78:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1480
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 79:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1489
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 80:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1497
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 81:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1506
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 82:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1514
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 83:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1522
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 84:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1530
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 85:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1538
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 86:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1546
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 87:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1558
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 88:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1564
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 89:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1573
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 90:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1581
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 91:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 92:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1597
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 93:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1609
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 94:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1614
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 95:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1623
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 96:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1630
		{
			calcVAL.List = calcDollar[2].List
		}
	case 97:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1637
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 98:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1643
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 99:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 100:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1737
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 101:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1751
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 102:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1763
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 103:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1775
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 104:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1786
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 105:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1799
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 106:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1811
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 107:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1823
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 108:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1838
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 109:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1842
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 110:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1852
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 111:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1863
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 112:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1872
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 113:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1885
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 114:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1889
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 115:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1899
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 116:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1911
		{
			calcVAL.List = calcDollar[2].List
		}
	case 117:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1918
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 118:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1923
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 119:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1933
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 120:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1941
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 121:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1950
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 122:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1958
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 123:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1966
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 124:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1978
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Subquery = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 125:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1992
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 126:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2005
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 127:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2017
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 128:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2029
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 129:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2044
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 130:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2048
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 131:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2058
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 132:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2070
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 133:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2078
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 134:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2086
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 135:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2094
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 136:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2114
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 137:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2122
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 138:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2151
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 139:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2158
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 140:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 141:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2179
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 142:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2183
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 143:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2212
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 144:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2221
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 145:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2230
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 146:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2239
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 147:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2248
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 148:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2261
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 149:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2270
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 150:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2279
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 151:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2288
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 152:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2297
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 153:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2327
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 154:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2336
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 155:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2345
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 156:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2354
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 157:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2363
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 158:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2372
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 159:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2381
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 160:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2390
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 161:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2399
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 162:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2408
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 163:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2417
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 164:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2498
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 165:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2503
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 166:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2508
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 167:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2512
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 168:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2520
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 169:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2525
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 170:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2530
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 171:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2534
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 172:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2542
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 173:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2551
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 174:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2560
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 175:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2569
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 176:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2578
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 177:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 178:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2617
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 179:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 180:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2635
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 181:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2643
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 182:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2651
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 183:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2659
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 184:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2669
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 185:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2696
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 186:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2706
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 187:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2716
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 188:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2726
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 189:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2737
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 190:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2748
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 191:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2759
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 192:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2770
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 193:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2781
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 194:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2792
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 195:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2804
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 196:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2816
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 197:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2828
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 198:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2840
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 199:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2852
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 200:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2868
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 201:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2873
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 202:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2878
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 203:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2887
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 204:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2892
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 205:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2901
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 206:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2906
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 207:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2925
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 208:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2933
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 209:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2936
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 210:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2945
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 211:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2996
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 212:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3007
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 213:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3019
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 214:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3029
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 215:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3039
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 216:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3049
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 217:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3059
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 218:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3070
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 219:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3081
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 220:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3092
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 221:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3103
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 222:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3114
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 223:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3125
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 224:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3136
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 225:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3147
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 226:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3156
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 227:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3165
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 228:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3175
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[6].NodePt.Subquery
		}
	case 229:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3185
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 230:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3195
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 231:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3205
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[2].NodePt.Subquery
		}
	case 232:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3214
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 233:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3227
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 234:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3232
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 235:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3237
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 236:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3242
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 237:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3247
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 238:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3252
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 239:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3282
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 240:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3289
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 241:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3297
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 242:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3305
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 243:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3313
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 244:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3320
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 245:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3327
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 246:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3334
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 247:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3341
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 248:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3348
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 249:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3355
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 250:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3362
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 251:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3371
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 252:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3380
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 253:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3387
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 254:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3406
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 255:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3413
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 256:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3432
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SUBQUERY_NODE
			calcVAL.NodePt.Subquery = &QueryNode{}
		}
	case 257:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3452
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 258:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3459
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 259:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3466
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 260:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3473
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 261:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3498
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 262:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3501
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 263:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3508
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 264:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3512
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
