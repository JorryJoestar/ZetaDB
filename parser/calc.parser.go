// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"fmt"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 14

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE NodeEnum = 16

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51

	/* insert */
	INSERT_NODE NodeEnum = 52

	/* update */
	UPDATE_LIST_ENTRY NodeEnum = 53
	UPDATE_NODE       NodeEnum = 54
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dcl *DCLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dql */
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	Delete *DeleteNode

	/* insert */
	Insert *InsertNode

	/* update */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode

	/* public */
	Subquery *QueryNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
	ELEMENTARY_VALUE_LIST           ListEnum = 12
	UPDATE_LIST                     ListEnum = 13
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
	ElementaryValueList          []*ElementaryValueNode
	UpdateList                   []*UpdateListEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

//line parser/grammar.y:252
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const FROM = 57346
const WHERE = 57347
const INSERTINTO = 57348
const VALUES = 57349
const CREATE = 57350
const TABLE = 57351
const SEMICOLON = 57352
const DROP = 57353
const ALTER = 57354
const ADD = 57355
const ASSERTION = 57356
const VIEW = 57357
const AS = 57358
const INDEX = 57359
const ON = 57360
const TRIGGER = 57361
const REFERENCING = 57362
const BEFORE = 57363
const UPDATE = 57364
const OF = 57365
const AFTER = 57366
const INSTEAD = 57367
const INSERT = 57368
const DELETE = 57369
const OLD = 57370
const ROW = 57371
const NEW = 57372
const FOR = 57373
const EACH = 57374
const STATEMENT = 57375
const WHEN = 57376
const BEGINTOKEN = 57377
const END = 57378
const STAR = 57379
const SUM = 57380
const AVG = 57381
const MIN = 57382
const MAX = 57383
const COUNT = 57384
const DISTINCT = 57385
const PLUS = 57386
const SUBTRACT = 57387
const DIVISION = 57388
const CONCATENATION = 57389
const DEFAULT = 57390
const UNIQUE = 57391
const PRIMARYKEY = 57392
const CHECK = 57393
const FOREIGNKEY = 57394
const REFERENCES = 57395
const NOT_DEFERRABLE = 57396
const DEFERED_DEFERRABLE = 57397
const IMMEDIATE_DEFERRABLE = 57398
const UPDATE_NULL = 57399
const UPDATE_CASCADE = 57400
const DELETE_NULL = 57401
const DELETE_CASCADE = 57402
const DEFERRED = 57403
const IMMEDIATE = 57404
const CONSTRAINT = 57405
const AND = 57406
const OR = 57407
const LIKE = 57408
const IN = 57409
const ALL = 57410
const ANY = 57411
const IS = 57412
const EXISTS = 57413
const NOTEQUAL = 57414
const LESS = 57415
const GREATER = 57416
const LESSEQUAL = 57417
const GREATEREQUAL = 57418
const EQUAL = 57419
const CHAR = 57420
const VARCHAR = 57421
const BIT = 57422
const BITVARYING = 57423
const BOOLEAN = 57424
const INT = 57425
const INTEGER = 57426
const SHORTINT = 57427
const FLOAT = 57428
const REAL = 57429
const DOUBLEPRECISION = 57430
const DECIMAL = 57431
const NUMERIC = 57432
const DATE = 57433
const TIME = 57434
const DOT = 57435
const INTVALUE = 57436
const FLOATVALUE = 57437
const STRINGVALUE = 57438
const BOOLVALUE = 57439
const ELSEIF = 57440
const THEN = 57441
const IF = 57442
const ELSE = 57443
const CURSOR = 57444
const DO = 57445
const RETURN = 57446
const SET = 57447
const OUT = 57448
const INOUT = 57449
const DECLARE = 57450
const PROCEDURE = 57451
const FUNCTION = 57452
const RETURNS = 57453
const CALL = 57454
const LPAREN = 57455
const RPAREN = 57456
const NOT = 57457
const NULLMARK = 57458
const COMMA = 57459
const ID = 57460

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"WHERE",
	"INSERTINTO",
	"VALUES",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:3314

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 108,
	10, 112,
	114, 112,
	117, 112,
	-2, 128,
	-1, 110,
	10, 114,
	114, 114,
	117, 114,
	-2, 131,
	-1, 111,
	10, 115,
	114, 115,
	117, 115,
	-2, 234,
	-1, 288,
	5, 31,
	117, 31,
	-2, 131,
	-1, 289,
	5, 32,
	117, 32,
	-2, 128,
}

const calcPrivate = 57344

const calcLast = 759

var calcAct = [...]int{
	535, 150, 538, 536, 97, 180, 492, 81, 537, 117,
	149, 82, 80, 222, 176, 321, 314, 100, 188, 155,
	3, 218, 320, 221, 268, 160, 126, 293, 133, 143,
	107, 103, 185, 305, 562, 534, 511, 120, 121, 122,
	123, 124, 510, 303, 301, 204, 99, 99, 309, 269,
	270, 299, 116, 272, 307, 274, 275, 276, 277, 278,
	273, 315, 316, 317, 318, 99, 120, 121, 122, 123,
	124, 523, 504, 280, 182, 177, 184, 129, 179, 186,
	99, 323, 324, 325, 99, 99, 327, 177, 147, 99,
	502, 130, 148, 112, 113, 114, 115, 110, 271, 485,
	120, 121, 122, 123, 124, 499, 183, 99, 186, 456,
	454, 29, 119, 106, 452, 108, 484, 111, 186, 186,
	186, 175, 112, 113, 114, 115, 186, 482, 481, 186,
	127, 480, 386, 178, 213, 479, 507, 473, 183, 191,
	29, 119, 127, 101, 189, 186, 111, 203, 326, 506,
	440, 243, 191, 212, 437, 436, 112, 113, 114, 115,
	435, 505, 434, 247, 283, 192, 422, 183, 251, 191,
	134, 419, 416, 250, 350, 119, 323, 324, 325, 110,
	186, 327, 244, 408, 248, 349, 409, 447, 265, 348,
	281, 322, 267, 379, 279, 347, 380, 108, 286, 346,
	345, 344, 183, 343, 291, 104, 285, 282, 261, 259,
	283, 249, 246, 245, 238, 300, 302, 304, 306, 308,
	241, 240, 288, 239, 110, 287, 313, 290, 237, 338,
	158, 238, 446, 183, 330, 337, 215, 131, 312, 191,
	289, 127, 108, 326, 340, 356, 331, 65, 64, 63,
	355, 292, 294, 295, 296, 297, 332, 210, 368, 62,
	211, 195, 148, 61, 196, 358, 359, 360, 357, 376,
	377, 60, 59, 183, 183, 385, 374, 193, 190, 58,
	57, 191, 448, 56, 55, 391, 54, 53, 52, 394,
	51, 50, 49, 48, 47, 389, 388, 263, 264, 457,
	27, 418, 23, 571, 390, 24, 25, 263, 264, 397,
	526, 399, 521, 401, 381, 403, 28, 405, 263, 264,
	520, 26, 83, 509, 466, 465, 464, 463, 462, 393,
	449, 445, 444, 38, 421, 415, 443, 407, 39, 40,
	406, 41, 414, 42, 404, 424, 402, 508, 400, 398,
	99, 298, 99, 66, 425, 423, 31, 378, 86, 431,
	85, 32, 33, 438, 34, 72, 35, 148, 328, 417,
	395, 552, 98, 475, 413, 412, 441, 411, 410, 256,
	27, 255, 254, 253, 252, 216, 209, 451, 453, 208,
	450, 110, 455, 442, 439, 84, 28, 207, 206, 205,
	79, 26, 128, 70, 69, 156, 29, 367, 83, 108,
	491, 68, 546, 488, 461, 27, 263, 264, 472, 263,
	264, 144, 183, 514, 468, 560, 469, 549, 470, 471,
	529, 28, 474, 44, 43, 517, 26, 478, 384, 497,
	156, 189, 496, 243, 373, 569, 142, 372, 551, 99,
	495, 532, 27, 498, 365, 494, 36, 37, 371, 67,
	145, 146, 73, 501, 503, 370, 369, 363, 28, 197,
	27, 194, 493, 26, 157, 490, 525, 156, 151, 152,
	500, 84, 547, 458, 459, 493, 28, 387, 513, 263,
	264, 26, 544, 545, 27, 156, 515, 542, 543, 518,
	530, 516, 519, 183, 27, 522, 148, 71, 224, 157,
	28, 223, 224, 151, 152, 26, 396, 527, 243, 156,
	28, 539, 540, 541, 528, 26, 544, 545, 225, 156,
	243, 572, 159, 512, 242, 112, 113, 114, 115, 554,
	556, 555, 557, 550, 341, 553, 157, 558, 342, 141,
	151, 152, 243, 539, 540, 541, 563, 559, 565, 486,
	566, 243, 568, 564, 157, 262, 567, 433, 151, 152,
	263, 264, 573, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 351, 174, 157, 382,
	383, 352, 151, 152, 542, 543, 544, 545, 157, 432,
	354, 353, 151, 152, 274, 275, 276, 277, 278, 273,
	315, 316, 317, 318, 233, 112, 113, 114, 115, 263,
	264, 219, 429, 220, 177, 539, 540, 541, 542, 543,
	544, 545, 539, 540, 541, 542, 543, 315, 316, 317,
	318, 200, 27, 132, 336, 232, 334, 229, 198, 199,
	201, 202, 27, 76, 134, 234, 77, 78, 28, 235,
	236, 428, 230, 26, 335, 138, 333, 231, 28, 139,
	140, 135, 430, 26, 226, 136, 137, 228, 74, 227,
	427, 426, 364, 329, 95, 574, 94, 570, 561, 548,
	531, 524, 487, 483, 477, 476, 467, 460, 420, 392,
	375, 366, 362, 361, 310, 260, 258, 257, 214, 187,
	93, 92, 91, 90, 89, 88, 87, 30, 45, 284,
	96, 46, 109, 22, 533, 266, 105, 4, 489, 154,
	153, 18, 17, 181, 311, 319, 118, 16, 339, 217,
	75, 15, 14, 13, 12, 11, 10, 9, 8, 7,
	6, 125, 5, 102, 21, 20, 19, 2, 1,
}

var calcPact = [...]int{
	294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 707, 347, 324, 709, 717, 176, 175, 174,
	-1000, 173, 172, 170, 169, 168, 166, 165, 162, 161,
	154, 153, 145, 141, 131, 130, 129, 346, 306, 291,
	290, 456, 349, 660, 632, 287, 247, 706, 705, 704,
	703, 702, 701, 700, 673, 715, 259, 25, 87, -1,
	123, 289, 356, 25, 119, 623, 649, 643, 526, 354,
	373, -1000, -1000, 488, 112, 354, 495, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 24, 15, -39, 699, 441, -1000,
	164, -1000, 160, -1000, 394, 147, -1000, -1000, -1000, -1000,
	-1000, 376, -1000, -1000, -1000, -1000, 604, -1000, -1000, 62,
	286, 285, 284, 276, 273, 143, -1000, 495, -39, 698,
	122, 272, 593, 477, 496, 656, 659, 629, 644, 627,
	596, 633, 114, -1000, 105, 103, 102, -1000, -1000, 498,
	-1000, 28, 95, -1000, -1000, -1000, 94, -39, 495, 97,
	373, -1000, 271, 270, 269, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 268, 266, -1000, 697, 696, 91, 695, 90,
	555, -1000, -39, -17, 2, 356, 376, -1000, 93, -1000,
	712, 88, -39, 87, 62, -1000, 28, 86, 62, 62,
	62, 62, 62, 237, -1000, 8, 1, 0, -10, 11,
	694, 12, 128, 254, -1000, 667, 25, 139, -1000, 637,
	635, 473, -1000, -39, 646, 515, 85, 83, 82, 81,
	77, 71, 67, 56, 568, 583, 582, 373, 354, 495,
	495, 495, 693, -1000, 692, 390, 666, 355, 691, 296,
	373, -1000, 372, 371, 364, 353, 350, -1000, -1000, 588,
	-1000, 690, -1000, -39, -39, 243, 79, -17, 521, 342,
	14, 420, 180, -1000, -1000, -1000, -1000, -1000, -1000, 532,
	356, -1000, 689, 441, 257, -1000, 506, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27,
	235, 27, 234, 27, 232, 27, 230, 27, 226, 223,
	-1000, 69, -1000, -1000, -1000, 265, 264, 262, 261, 128,
	-1000, -1000, 54, 441, -1000, -1000, 185, 53, 688, 356,
	52, 477, 593, 665, 664, 645, 606, -1000, 425, 636,
	-1000, -1000, -1000, -1000, 581, -1000, -1000, -1000, 549, -1000,
	-1000, 44, 42, 37, 36, 373, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28, 32, 488, -1000, 495, -1000, 222,
	218, 217, 115, 70, -1000, -1000, -1000, -1000, -1000, 215,
	27, -1000, -4, -8, -1000, -1000, -1000, -9, -1000, 183,
	415, -1000, -1000, -1000, 687, 441, -1000, 214, -1000, 213,
	-1000, 212, -1000, 211, -1000, 210, -1000, -1000, 686, 561,
	25, 25, -39, 19, -1000, -1000, 33, -1000, -1000, 260,
	-1000, 685, 684, 473, -1000, -1000, 17, 13, 10, 9,
	683, -1000, -2, -19, -1000, 541, -1000, -1000, -1000, 682,
	311, 374, 373, -1000, -1000, -1000, 348, 345, -13, 413,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -28, -46,
	-1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35, 22, 233, 209, -1000, -76, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -82, -1000, 502, 387,
	488, 335, -1000, -39, 373, -1000, 206, 198, -1000, -1000,
	-47, -1000, -1000, -1000, -1000, 681, -1000, -1000, -1000, 423,
	196, -1000, 356, 488, 330, -1000, 464, 680, 352, -1000,
	-1000, -1000, -1000, -1000, -1000, -83, 571, 309, 446, 679,
	327, -1000, 488, 357, 258, -1000, 537, 467, 578, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 488, 325, -1000, 678,
	488, -1000, -84, 433, 440, 433, 499, 440, 499, 409,
	677, -1000, 189, -1000, -1000, -1000, -1000, -1000, -1000, 500,
	-1000, 571, 675, -1000, -1000,
}

var calcPgo = [...]int{
	0, 758, 757, 19, 756, 755, 18, 754, 753, 31,
	752, 751, 26, 750, 749, 748, 747, 746, 745, 744,
	743, 742, 741, 740, 739, 21, 28, 23, 13, 738,
	737, 736, 27, 52, 735, 15, 22, 734, 16, 14,
	3, 8, 2, 0, 5, 733, 24, 25, 9, 4,
	45, 732, 731, 446, 29, 12, 11, 7, 10, 1,
	730, 729, 728, 6, 30, 727, 722, 726, 725, 17,
	724,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 4, 5, 5, 5, 5, 6, 6, 7, 8,
	8, 9, 9, 10, 10, 11, 11, 12, 12, 13,
	14, 14, 15, 15, 16, 17, 18, 18, 19, 20,
	21, 22, 22, 22, 22, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 24, 25,
	25, 25, 25, 26, 26, 27, 28, 29, 29, 30,
	51, 51, 51, 51, 51, 51, 51, 51, 53, 53,
	54, 54, 54, 55, 55, 56, 57, 58, 58, 59,
	59, 59, 59, 59, 60, 61, 61, 61, 61, 62,
	62, 63, 64, 64, 64, 64, 52, 52, 65, 66,
	66, 67, 67, 32, 32, 32, 32, 32, 33, 33,
	33, 33, 33, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 34, 34, 34, 34, 37, 37,
	37, 37, 39, 38, 38, 38, 38, 38, 36, 35,
	35, 35, 35, 35, 35, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	40, 40, 40, 41, 41, 42, 42, 44, 44, 44,
	44, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 46, 46, 46, 46, 46, 46, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 70, 47, 47, 48, 48, 49, 50, 50, 50,
	50, 69, 69, 68, 68,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 7, 8, 10, 3, 1, 7, 1,
	3, 3, 3, 7, 9, 1, 3, 2, 3, 4,
	6, 6, 6, 7, 8, 4, 6, 9, 4, 9,
	4, 9, 7, 8, 6, 4, 6, 4, 6, 5,
	7, 4, 4, 5, 4, 4, 5, 1, 3, 4,
	4, 4, 4, 3, 3, 2, 4, 1, 2, 4,
	8, 7, 5, 4, 10, 9, 7, 6, 3, 1,
	3, 3, 3, 2, 1, 4, 4, 2, 1, 3,
	5, 1, 1, 1, 12, 10, 8, 9, 7, 2,
	1, 4, 1, 1, 1, 1, 4, 4, 2, 5,
	4, 3, 1, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 4, 5, 4, 5, 4, 5,
	4, 5, 4, 4, 1, 1, 2, 2, 1, 1,
	3, 3, 3, 4, 4, 4, 9, 10, 3, 2,
	1, 1, 2, 5, 6, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 4, 5, 4,
	5, 4, 5, 4, 5, 3, 4, 5, 6, 5,
	6, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	6, 0, 8, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 1, 3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -3, -65, -10, -13, -14, -15, -16,
	-17, -18, -19, -20, -21, -22, -30, -51, -52, -4,
	-5, -7, -66, 8, 11, 12, 27, 6, 22, 112,
	10, 9, 14, 15, 17, 19, 109, 110, 9, 14,
	15, 17, 19, 110, 109, 9, 4, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 7, 113, 105, 113,
	113, 51, 16, 113, 18, -23, 21, 24, 25, 113,
	-55, -57, -56, 35, 108, 113, 111, 10, 10, 10,
	10, 10, 10, 10, 13, 11, 5, -49, 113, 93,
	-69, 118, -8, -9, 118, -67, 114, -64, -50, -66,
	-32, 118, 94, 95, 96, 97, -33, -48, -31, 113,
	38, 39, 40, 41, 42, -11, -12, 118, 113, -49,
	-69, 118, 20, -26, 31, 22, 26, 27, 22, 26,
	27, 23, -53, -54, 67, 106, 107, -57, -56, -58,
	-59, 104, 105, -60, -61, -3, 31, 100, 118, -53,
	-47, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 92, -12, -39, 63, 118, 63,
	-44, -45, 113, -48, 115, 71, 118, 10, -6, -50,
	114, 117, 5, 117, 77, 114, 117, 93, 44, 45,
	37, 46, 47, -32, -50, 113, 113, 113, 113, 113,
	114, 117, -47, -44, 10, 114, 113, -24, -25, 28,
	30, -27, -28, 34, 35, 32, 18, 23, 18, 18,
	18, 23, 18, 18, 22, 26, 27, 114, 117, 118,
	118, 118, 36, -59, -64, 118, 118, -44, -47, 114,
	-55, -57, 113, 113, 113, 113, 113, 10, 10, 118,
	10, 118, 10, 64, 65, -44, -68, -48, -46, 66,
	67, 115, 70, 77, 72, 73, 74, 75, 76, -48,
	71, -49, 114, 117, 7, 118, -44, -9, -32, -50,
	-64, 118, -33, -32, -33, -33, -33, -33, 114, 43,
	-48, 43, -48, 43, -48, 43, -48, 43, -48, 37,
	10, -37, -12, -39, -38, 49, 50, 51, 52, -34,
	-36, -35, 63, 48, 49, 50, 115, 53, 114, 16,
	-69, -26, 117, 29, 9, 29, 9, -28, -44, -29,
	-3, 29, 33, 118, 118, 118, 118, 118, 118, 118,
	118, 18, 23, 18, 18, -55, -57, -54, -47, -47,
	-47, 10, 10, 77, 16, 99, 10, 111, -57, 94,
	94, 94, 94, 94, -38, 10, -44, -44, 114, 114,
	117, -50, 68, 69, 96, -49, 118, 67, 116, 115,
	-46, -49, 10, -50, -49, 113, 10, -48, 114, -48,
	114, -48, 114, -48, 114, -48, 114, 114, 114, 117,
	113, 113, 113, 113, -36, -35, 118, -50, 116, 118,
	10, -49, 114, -27, -28, -25, 16, 16, 16, 16,
	36, -3, 18, 18, 118, 118, 118, 118, -57, -64,
	118, -58, -47, 114, 114, 114, 117, 117, 67, 115,
	-48, -49, 118, -49, 118, -49, 118, 116, 68, 69,
	10, -6, 114, 114, 114, 114, 114, 10, -39, -38,
	-69, -69, -44, 118, -35, 113, 10, 10, -28, 118,
	118, 118, 118, 10, 118, 118, 18, 10, 102, -62,
	101, 36, -63, 98, -55, -57, 94, 94, -49, 118,
	67, -49, 118, -49, 118, 114, 114, 114, 114, 114,
	118, 118, 31, 101, 36, -63, -58, 100, -44, -57,
	114, 114, -49, 118, 10, 53, 114, -49, -58, 100,
	36, 10, 99, -70, 118, -43, -40, -41, -42, 54,
	55, 56, 57, 58, 59, 60, 103, 36, 10, 100,
	-58, 91, 113, -41, -42, -40, -42, -40, -41, -58,
	100, 10, 118, -42, -41, -42, -40, -41, -40, 36,
	10, 114, 31, -43, 10,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 94, 0, 0, 0, 0, 39, 45, 48,
	50, 79, 116, 117, 0, 0, 0, 0, 0, 236,
	0, 242, 0, 29, 0, 0, 120, 122, -2, 113,
	-2, -2, 237, 238, 239, 240, 0, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 82, 93, 0,
	98, 0, 0, 101, 102, 103, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 223, 224, 225, 226, 227,
	228, 229, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 234, 22, 0, 27,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 131, 128, 0, 0, 0, 0, 0,
	0, 0, 37, 0, 46, 0, 0, 0, 67, 0,
	0, 0, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 40, 41, 0,
	42, 0, 21, 0, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 218, 0,
	0, 211, 0, 0, 0, 241, 0, 30, -2, -2,
	121, 235, 123, 131, 124, 125, 126, 127, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 0, 36, 148, 149, 0, 0, 0, 0, 38,
	144, 145, 0, 0, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 75, 0,
	77, 73, 74, 55, 0, 61, 64, 57, 0, 62,
	65, 0, 0, 0, 0, 0, 81, 88, 90, 91,
	92, 96, 99, 0, 0, 0, 95, 0, 86, 0,
	0, 0, 0, 0, 152, 43, 189, 190, 188, 0,
	0, 191, 0, 0, 192, 193, 195, 0, 205, 0,
	0, 212, 23, 26, 0, 0, 28, 0, 134, 0,
	136, 0, 138, 0, 140, 0, 142, 143, 0, 0,
	0, 0, 0, 0, 146, 147, 0, 159, 162, 0,
	44, 0, 0, 0, 53, 68, 0, 0, 0, 0,
	0, 78, 0, 0, 59, 0, 63, 66, 80, 0,
	0, 0, 0, 220, 221, 222, 0, 0, 0, 0,
	243, 197, 201, 199, 203, 194, 196, 206, 0, 0,
	24, 0, 133, 135, 137, 139, 141, 34, 150, 151,
	0, 0, 0, 0, 158, 0, 47, 49, 51, 69,
	71, 70, 72, 76, 56, 58, 0, 100, 0, 0,
	0, 0, 110, 0, 0, 85, 0, 0, 207, 209,
	0, 198, 202, 200, 204, 0, 153, 154, 155, 0,
	0, 60, 0, 0, 0, 109, 0, 0, 0, 84,
	230, 231, 208, 210, 25, 0, 163, 0, 0, 0,
	0, 108, 0, 0, 0, 164, 165, 166, 167, 180,
	181, 182, 183, 184, 185, 186, 0, 0, 106, 0,
	111, 232, 0, 168, 170, 169, 172, 171, 173, 0,
	0, 107, 0, 174, 175, 176, 177, 178, 179, 0,
	105, 156, 0, 157, 104,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:436
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:446
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:456
		{ // TODO
			calcVAL.NodePt = &Node{}
			fmt.Println("psmCallStmt")
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:484
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:492
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:500
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:508
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:516
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:524
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:532
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:540
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:548
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:556
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:564
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:572
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:580
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:588
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:609
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.Delete
		}
	case 19:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:617
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_INSERT
			calcVAL.NodePt.Dml.Insert = calcDollar[1].NodePt.Insert
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:625
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_UPDATE
			calcVAL.NodePt.Dml.Update = calcDollar[1].NodePt.Update
		}
	case 21:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:644
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.Delete = &DeleteNode{}
			calcVAL.NodePt.Delete.TableName = calcDollar[3].String
			calcVAL.NodePt.Delete.Condition = calcDollar[5].NodePt.Condition
		}
	case 22:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:672
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Subquery = calcDollar[4].NodePt.Subquery
			calcVAL.NodePt.Insert.AttriNameListValid = false
		}
	case 23:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:683
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.AttriNameListValid = false
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[5].List.ElementaryValueList
		}
	case 24:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:694
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Subquery = calcDollar[7].NodePt.Subquery
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 25:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:706
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[8].List.ElementaryValueList
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 26:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:722
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[3].NodePt.ElementaryValue)
		}
	case 27:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:726
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ELEMENTARY_VALUE_LIST

			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[1].NodePt.ElementaryValue)
		}
	case 28:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:753
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_NODE

			calcVAL.NodePt.Update = &UpdateNode{}
			calcVAL.NodePt.Update.TableName = calcDollar[2].String
			calcVAL.NodePt.Update.Condition = calcDollar[6].NodePt.Condition
			calcVAL.NodePt.Update.UpdateList = calcDollar[4].List.UpdateList
		}
	case 29:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:766
		{
			calcVAL.List = List{}
			calcVAL.List.Type = UPDATE_LIST

			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[1].NodePt.UpdateListEntry)
		}
	case 30:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:772
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[3].NodePt.UpdateListEntry)
		}
	case 31:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:780
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.Expression = calcDollar[3].NodePt.Expression
		}
	case 32:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:789
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_ELEMENTARY_VALUE
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 33:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:820
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 34:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:835
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 35:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:857
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 36:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:862
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 37:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:870
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 38:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:879
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 39:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:916
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 40:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:935
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:950
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 42:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:972
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 43:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:980
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 44:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:999
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 45:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1018
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 46:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1037
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 47:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1046
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 48:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1067
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 49:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1085
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 50:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1105
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 51:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1166
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 52:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1187
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 53:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1207
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 54:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1227
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 55:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1250
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 56:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1258
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 57:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1267
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 58:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1275
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 59:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1284
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 60:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1292
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 61:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1301
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 62:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1309
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 63:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1317
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 64:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1325
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 65:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1333
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 66:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1341
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 67:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1353
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 68:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1359
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 69:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1368
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 70:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1376
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 71:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1384
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 72:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1392
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 73:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1404
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 74:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1409
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 75:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1418
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 76:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1425
		{
			calcVAL.List = calcDollar[2].List
		}
	case 77:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1432
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 78:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1438
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 79:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1453
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 80:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1532
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 81:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1546
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 82:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1558
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 83:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1570
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 84:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1581
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 85:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 86:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1606
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 87:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1618
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 88:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1633
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 89:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1637
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 90:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1647
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 91:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 92:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1667
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 93:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1680
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 94:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1684
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 95:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1694
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 96:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1706
		{
			calcVAL.List = calcDollar[2].List
		}
	case 97:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1713
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 98:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1718
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 99:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1728
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 100:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1736
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 101:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1745
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 102:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1753
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 103:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1761
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 104:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1773
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Subquery = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 105:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1787
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 106:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1800
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 107:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1812
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 108:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1824
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 109:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1839
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 110:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1843
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 111:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1853
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 112:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1865
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 113:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1873
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 114:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1881
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 115:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1889
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 116:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1909
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 117:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1917
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 118:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1946
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 119:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1953
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 120:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1962
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 121:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1974
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 122:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1978
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 123:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2007
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 124:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2016
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 125:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2025
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 126:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2034
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 127:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2043
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 128:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2056
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 129:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2065
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 130:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2074
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 131:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2083
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 132:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2092
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 133:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2122
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 134:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2131
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 135:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2140
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 136:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2149
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 137:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2158
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 138:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 139:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2176
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 140:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2185
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 141:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2194
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 142:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2203
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 143:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2212
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 144:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2293
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 145:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2298
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 146:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2303
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 147:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2307
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 148:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2315
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 149:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2320
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 150:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2325
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 151:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2329
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 152:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2337
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 153:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2346
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 154:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2355
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 155:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2364
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 156:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2373
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 157:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2384
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 158:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2412
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 159:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2421
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 160:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2430
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 161:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2438
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 162:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2446
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 163:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2454
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 164:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2464
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 165:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2491
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 166:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2501
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 167:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2511
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 168:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2521
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 169:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2532
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 170:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2543
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 171:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2554
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 172:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2565
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 173:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2576
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 174:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2587
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 175:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2599
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 176:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2611
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 177:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2623
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 178:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2635
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 179:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2647
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 180:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2663
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 181:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2668
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 182:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2673
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 183:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2682
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 184:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2687
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 185:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2696
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 186:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2701
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 187:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2720
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 188:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2728
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 189:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2731
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 190:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2740
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 191:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2791
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 192:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2802
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 193:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2814
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 194:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2824
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 195:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2834
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 196:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2844
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 197:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2854
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 198:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2865
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 199:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2876
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 200:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2887
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 201:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2898
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 202:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2909
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 203:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2920
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 204:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2931
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 205:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2942
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 206:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2951
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 207:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2960
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 208:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2970
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[6].NodePt.Subquery
		}
	case 209:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2980
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 210:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2990
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 211:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3000
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[2].NodePt.Subquery
		}
	case 212:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3009
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 213:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3022
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 214:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3027
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 215:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3032
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 216:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3037
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 217:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3042
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 218:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3047
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 219:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3077
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 220:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3084
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 221:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3092
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 222:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3100
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 223:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3108
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 224:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3115
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 225:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3122
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 226:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3129
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 227:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3136
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 228:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3143
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 229:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3150
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 230:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3157
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 231:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3166
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 232:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3175
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 233:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3182
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 234:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3201
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 235:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3208
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 236:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3227
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SUBQUERY_NODE
			calcVAL.NodePt.Subquery = &QueryNode{}
		}
	case 237:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3247
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 238:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3254
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 239:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3261
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 240:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3268
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 241:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3293
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 242:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3296
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 243:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3303
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 244:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3307
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
