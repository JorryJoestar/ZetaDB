// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"strconv"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE NodeEnum = 16

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51

	/* insert */
	INSERT_NODE NodeEnum = 52

	/* update */
	UPDATE_LIST_ENTRY NodeEnum = 53
	UPDATE_NODE       NodeEnum = 54

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 55
	JOIN_NODE          NodeEnum = 56
	FROM_STMT_NODE     NodeEnum = 57
	SELECT_STMT_NODE   NodeEnum = 58
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dcl */
	Dcl *DCLNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	Delete *DeleteNode

	/* insert */
	Insert *InsertNode

	/* update */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode

	/* dql */
	DqlEntry         *DQLNode
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode
	Join             *JoinNode
	FromStmt         *FromStmtNode
	SelectStmt       *SelectStmtNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
	ELEMENTARY_VALUE_LIST           ListEnum = 12
	UPDATE_LIST                     ListEnum = 13
	ORDERBY_LIST                    ListEnum = 14
	FROM_LIST                       ListEnum = 15
	ON_LIST                         ListEnum = 16
	SELECT_LIST                     ListEnum = 17
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
	ElementaryValueList          []*ElementaryValueNode
	UpdateList                   []*UpdateListEntryNode
	OrderByList                  []*OrderByListEntryNode
	FromList                     []*FromListEntryNode
	OnList                       []*OnListEntryNode
	SelectList                   []*SelectListEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

// fromStmt
type FromStmtNode struct {
	FromListValid bool
	FromList      []*FromListEntryNode
	Join          *JoinNode
}

// selectStmt
type SelectStmtNode struct {
	StarValid     bool
	DistinctValid bool
	SelectList    []*SelectListEntryNode
}

//line parser/grammar.y:281
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const START = 57346
const TRANSACTION = 57347
const COMMIT = 57348
const ROLLBACK = 57349
const SHOW = 57350
const TABLES = 57351
const ASSERTIONS = 57352
const VIEWS = 57353
const INDEXS = 57354
const TRIGGERS = 57355
const FUNCTIONS = 57356
const PROCEDURES = 57357
const USER = 57358
const PASSWORD = 57359
const CONNECT = 57360
const INITIALIZE = 57361
const PASSWORDS = 57362
const ASC = 57363
const DESC = 57364
const CROSS = 57365
const JOIN = 57366
const NATURAL = 57367
const FULL = 57368
const OUTER = 57369
const LEFT = 57370
const RIGHT = 57371
const SELECT = 57372
const GROUPBY = 57373
const HAVING = 57374
const ORDERBY = 57375
const LIMIT = 57376
const UNION = 57377
const DIFFERENCE = 57378
const INTERSECTION = 57379
const FROM = 57380
const WHERE = 57381
const INSERTINTO = 57382
const VALUES = 57383
const CREATE = 57384
const TABLE = 57385
const SEMICOLON = 57386
const DROP = 57387
const ALTER = 57388
const ADD = 57389
const ASSERTION = 57390
const VIEW = 57391
const AS = 57392
const INDEX = 57393
const ON = 57394
const TRIGGER = 57395
const REFERENCING = 57396
const BEFORE = 57397
const UPDATE = 57398
const OF = 57399
const AFTER = 57400
const INSTEAD = 57401
const INSERT = 57402
const DELETE = 57403
const OLD = 57404
const ROW = 57405
const NEW = 57406
const FOR = 57407
const EACH = 57408
const STATEMENT = 57409
const WHEN = 57410
const BEGINTOKEN = 57411
const END = 57412
const STAR = 57413
const SUM = 57414
const AVG = 57415
const MIN = 57416
const MAX = 57417
const COUNT = 57418
const DISTINCT = 57419
const PLUS = 57420
const SUBTRACT = 57421
const DIVISION = 57422
const CONCATENATION = 57423
const DEFAULT = 57424
const UNIQUE = 57425
const PRIMARYKEY = 57426
const CHECK = 57427
const FOREIGNKEY = 57428
const REFERENCES = 57429
const NOT_DEFERRABLE = 57430
const DEFERED_DEFERRABLE = 57431
const IMMEDIATE_DEFERRABLE = 57432
const UPDATE_NULL = 57433
const UPDATE_CASCADE = 57434
const DELETE_NULL = 57435
const DELETE_CASCADE = 57436
const DEFERRED = 57437
const IMMEDIATE = 57438
const CONSTRAINT = 57439
const AND = 57440
const OR = 57441
const LIKE = 57442
const IN = 57443
const ALL = 57444
const ANY = 57445
const IS = 57446
const EXISTS = 57447
const NOTEQUAL = 57448
const LESS = 57449
const GREATER = 57450
const LESSEQUAL = 57451
const GREATEREQUAL = 57452
const EQUAL = 57453
const CHAR = 57454
const VARCHAR = 57455
const BIT = 57456
const BITVARYING = 57457
const BOOLEAN = 57458
const INT = 57459
const INTEGER = 57460
const SHORTINT = 57461
const FLOAT = 57462
const REAL = 57463
const DOUBLEPRECISION = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const DATE = 57467
const TIME = 57468
const DOT = 57469
const INTVALUE = 57470
const FLOATVALUE = 57471
const STRINGVALUE = 57472
const BOOLVALUE = 57473
const ELSEIF = 57474
const THEN = 57475
const IF = 57476
const ELSE = 57477
const CURSOR = 57478
const DO = 57479
const RETURN = 57480
const SET = 57481
const OUT = 57482
const INOUT = 57483
const DECLARE = 57484
const PROCEDURE = 57485
const FUNCTION = 57486
const RETURNS = 57487
const CALL = 57488
const LPAREN = 57489
const RPAREN = 57490
const NOT = 57491
const NULLMARK = 57492
const COMMA = 57493
const ID = 57494

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SHOW",
	"TABLES",
	"ASSERTIONS",
	"VIEWS",
	"INDEXS",
	"TRIGGERS",
	"FUNCTIONS",
	"PROCEDURES",
	"USER",
	"PASSWORD",
	"CONNECT",
	"INITIALIZE",
	"PASSWORDS",
	"ASC",
	"DESC",
	"CROSS",
	"JOIN",
	"NATURAL",
	"FULL",
	"OUTER",
	"LEFT",
	"RIGHT",
	"SELECT",
	"GROUPBY",
	"HAVING",
	"ORDERBY",
	"LIMIT",
	"UNION",
	"DIFFERENCE",
	"INTERSECTION",
	"FROM",
	"WHERE",
	"INSERTINTO",
	"VALUES",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:4871

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 92,
	38, 58,
	151, 58,
	-2, 223,
	-1, 93,
	38, 60,
	151, 60,
	-2, 224,
	-1, 94,
	38, 62,
	151, 62,
	-2, 225,
	-1, 212,
	44, 206,
	148, 206,
	151, 206,
	-2, 222,
	-1, 214,
	44, 208,
	148, 208,
	151, 208,
	-2, 225,
	-1, 215,
	44, 209,
	148, 209,
	151, 209,
	-2, 328,
	-1, 226,
	71, 223,
	78, 223,
	79, 223,
	80, 223,
	81, 223,
	-2, 88,
	-1, 227,
	71, 225,
	78, 225,
	79, 225,
	80, 225,
	81, 225,
	-2, 91,
}

const calcPrivate = 57344

const calcLast = 1046

var calcAct = [...]int{
	755, 292, 758, 756, 219, 192, 291, 193, 757, 694,
	151, 593, 216, 224, 594, 191, 407, 509, 203, 302,
	211, 318, 502, 42, 324, 297, 3, 403, 285, 508,
	406, 275, 225, 342, 268, 222, 150, 206, 284, 171,
	787, 354, 102, 101, 96, 97, 98, 99, 100, 455,
	92, 91, 227, 88, 96, 97, 98, 99, 100, 90,
	230, 231, 232, 233, 754, 234, 235, 343, 344, 264,
	321, 346, 721, 348, 349, 350, 351, 352, 347, 96,
	97, 98, 99, 100, 221, 93, 237, 237, 95, 720,
	95, 503, 504, 505, 506, 92, 239, 319, 94, 152,
	104, 105, 106, 107, 707, 319, 687, 750, 170, 256,
	104, 105, 106, 107, 686, 254, 345, 252, 43, 103,
	210, 572, 573, 574, 215, 320, 218, 152, 220, 103,
	93, 95, 655, 684, 95, 104, 105, 106, 107, 152,
	511, 512, 513, 94, 653, 515, 152, 170, 201, 223,
	226, 650, 269, 43, 103, 510, 169, 457, 92, 215,
	269, 356, 357, 358, 247, 249, 251, 253, 255, 170,
	170, 170, 170, 170, 152, 152, 240, 266, 152, 584,
	582, 456, 152, 580, 708, 212, 152, 471, 236, 236,
	95, 368, 95, 93, 271, 214, 250, 289, 238, 290,
	248, 265, 246, 272, 683, 241, 94, 514, 257, 259,
	260, 261, 262, 322, 703, 682, 681, 258, 258, 258,
	258, 258, 152, 341, 361, 353, 240, 149, 675, 204,
	665, 339, 355, 317, 717, 301, 716, 327, 700, 327,
	359, 449, 590, 664, 663, 325, 96, 97, 98, 99,
	100, 381, 634, 383, 340, 385, 631, 387, 24, 389,
	25, 26, 27, 511, 512, 513, 367, 630, 515, 629,
	628, 95, 39, 31, 613, 95, 616, 95, 610, 327,
	359, 575, 602, 398, 45, 603, 276, 601, 600, 397,
	599, 538, 537, 428, 37, 536, 34, 535, 170, 32,
	35, 361, 104, 105, 106, 107, 534, 533, 436, 532,
	38, 531, 432, 486, 429, 36, 484, 207, 435, 465,
	433, 103, 359, 23, 451, 448, 95, 446, 449, 786,
	514, 361, 434, 360, 444, 423, 212, 431, 170, 223,
	226, 452, 430, 426, 425, 424, 214, 379, 378, 460,
	462, 463, 370, 422, 458, 470, 423, 400, 395, 361,
	327, 396, 226, 328, 480, 476, 226, 453, 300, 477,
	459, 478, 520, 454, 332, 326, 212, 333, 327, 555,
	273, 269, 245, 244, 243, 466, 214, 475, 242, 208,
	136, 135, 134, 133, 482, 132, 131, 130, 361, 753,
	43, 41, 129, 128, 127, 123, 45, 122, 121, 120,
	119, 118, 117, 116, 85, 81, 80, 752, 501, 751,
	518, 526, 710, 525, 709, 705, 704, 641, 544, 640,
	592, 500, 591, 576, 519, 528, 474, 473, 543, 366,
	153, 556, 229, 290, 546, 547, 548, 612, 585, 70,
	361, 194, 545, 67, 68, 69, 337, 338, 797, 742,
	577, 566, 58, 337, 338, 337, 338, 562, 731, 730,
	719, 639, 183, 638, 637, 329, 71, 497, 579, 581,
	496, 72, 73, 583, 74, 495, 75, 494, 493, 59,
	595, 391, 565, 390, 60, 61, 388, 62, 386, 63,
	384, 382, 380, 263, 776, 197, 718, 196, 578, 137,
	152, 677, 784, 516, 37, 464, 607, 606, 605, 604,
	567, 441, 440, 41, 195, 609, 439, 438, 615, 190,
	38, 437, 401, 270, 202, 36, 618, 608, 181, 298,
	163, 162, 161, 160, 693, 159, 142, 194, 619, 632,
	617, 290, 139, 625, 611, 690, 170, 766, 769, 745,
	635, 286, 727, 796, 337, 338, 141, 469, 775, 184,
	337, 338, 633, 724, 158, 636, 76, 77, 226, 104,
	105, 106, 107, 774, 773, 644, 772, 645, 649, 65,
	64, 240, 643, 226, 212, 740, 771, 652, 654, 748,
	287, 288, 656, 739, 214, 553, 695, 738, 299, 692,
	325, 37, 293, 294, 737, 138, 736, 735, 734, 674,
	195, 699, 698, 672, 673, 670, 671, 38, 676, 660,
	659, 651, 36, 37, 680, 695, 298, 428, 723, 658,
	37, 794, 697, 37, 657, 648, 647, 646, 561, 38,
	560, 559, 696, 45, 36, 558, 38, 557, 298, 38,
	483, 36, 706, 767, 36, 298, 595, 712, 298, 481,
	746, 595, 595, 595, 479, 461, 711, 228, 713, 714,
	715, 472, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 37, 316, 662, 551, 726,
	330, 725, 729, 568, 290, 299, 226, 661, 728, 293,
	294, 38, 586, 587, 741, 733, 36, 182, 337, 338,
	298, 467, 468, 764, 765, 427, 409, 299, 428, 410,
	744, 293, 294, 743, 299, 701, 702, 299, 293, 294,
	89, 293, 294, 588, 589, 798, 428, 104, 105, 106,
	107, 104, 105, 106, 107, 770, 447, 337, 338, 778,
	780, 779, 781, 762, 763, 777, 334, 782, 335, 336,
	274, 722, 428, 783, 348, 349, 350, 351, 352, 347,
	788, 276, 790, 539, 791, 428, 793, 789, 540, 299,
	792, 408, 409, 293, 294, 759, 760, 761, 799, 283,
	337, 338, 503, 504, 505, 506, 688, 668, 337, 338,
	337, 338, 762, 763, 764, 765, 319, 759, 760, 761,
	762, 763, 764, 765, 759, 760, 761, 33, 529, 764,
	765, 154, 530, 337, 338, 759, 760, 761, 762, 763,
	503, 504, 505, 506, 166, 37, 404, 524, 405, 667,
	522, 164, 165, 167, 168, 37, 187, 450, 419, 188,
	189, 38, 420, 421, 623, 666, 36, 523, 280, 84,
	521, 38, 281, 282, 277, 624, 36, 415, 278, 279,
	411, 627, 416, 626, 542, 412, 541, 485, 418, 417,
	414, 413, 185, 622, 621, 124, 125, 126, 620, 552,
	517, 157, 156, 155, 82, 199, 800, 198, 67, 68,
	69, 795, 785, 768, 747, 732, 689, 66, 685, 679,
	678, 669, 642, 614, 571, 570, 569, 564, 563, 554,
	550, 549, 498, 445, 443, 442, 399, 394, 393, 392,
	323, 179, 178, 177, 176, 175, 174, 173, 172, 115,
	114, 113, 112, 111, 110, 109, 108, 83, 57, 49,
	48, 46, 78, 144, 200, 145, 146, 87, 79, 45,
	371, 143, 372, 331, 373, 374, 489, 488, 487, 377,
	376, 375, 598, 597, 596, 492, 491, 490, 369, 364,
	365, 362, 363, 50, 51, 52, 53, 54, 55, 56,
	180, 140, 47, 213, 40, 749, 209, 30, 691, 296,
	295, 19, 18, 217, 499, 507, 17, 527, 402, 186,
	16, 15, 14, 13, 12, 11, 10, 9, 8, 7,
	267, 6, 205, 22, 21, 20, 148, 147, 86, 44,
	5, 29, 28, 4, 2, 1,
}

var calcPact = [...]int{
	254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 917, 997, 916, 915, 984, -1000, -1000,
	-1000, 914, 446, 873, 433, 919, 930, 264, 263, 854,
	913, 376, -1000, 262, 929, -18, -1000, 912, -1000, -1000,
	911, 910, 909, 908, 907, 906, 905, -1000, 261, 260,
	259, 258, 257, 256, 255, 253, -1000, 376, 376, 376,
	252, 251, 250, 245, 244, 243, 241, 240, 239, 238,
	468, 413, 985, -1000, 418, 399, 932, 75, -1000, 289,
	174, -1000, 853, 852, 851, 447, 398, 396, 395, 394,
	393, 773, -1000, 174, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 904, 903, 902, 901,
	900, 899, 898, 897, -1000, -1000, -1000, 983, 391, 632,
	422, 840, 801, 382, 360, 860, 925, 387, 77, 165,
	237, -1000, -28, -21, -62, 174, 549, -1000, 291, 37,
	-1000, 46, 939, 174, 289, 236, 232, 231, 230, 125,
	123, 119, 40, 38, 174, 174, 174, 174, 174, 355,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49, 229, 386, 363, 77, 228, 716, 818, 812, 742,
	460, 478, -1000, -1000, 603, 216, 460, 570, 0, -27,
	-21, 896, 623, 227, -1000, 324, -1000, 589, 956, 226,
	-1000, -1000, -1000, -1000, -1000, 447, 735, -1000, -21, -33,
	-64, 363, 129, -1000, 299, -1000, 970, 968, 288, 39,
	964, 200, 946, 954, 953, 952, -1000, 196, -1000, 195,
	354, -1000, -1000, -1000, -1000, -1000, -62, 353, -62, 352,
	-62, 350, -62, 348, -62, 345, 343, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 895, 894, 893, 210, -1000, 570,
	-21, 892, 209, 385, 784, 723, 663, 828, 839, 838,
	825, 837, 836, 802, 205, -1000, 193, 192, 191, -1000,
	-1000, 655, -1000, 7, 190, -1000, -1000, -1000, 185, -21,
	570, 184, 478, -1000, 384, 380, 379, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 375, 374, -1000, 891, 890, 182,
	889, 175, 712, -1000, 177, -1000, 816, 172, -21, 165,
	451, 29, -1000, 7, -62, 174, 547, -21, -21, 367,
	171, -33, 619, 437, 35, 580, 287, -1000, -1000, -1000,
	-1000, -1000, -1000, 668, 363, -1000, -21, 174, 546, -62,
	541, 174, -1000, -1000, -1000, -1000, 532, -1000, 36, 164,
	835, 161, 951, 950, 949, 963, 962, 961, -1000, -1000,
	-1000, 340, -1000, 339, -1000, 337, -1000, 332, -1000, 329,
	-1000, -1000, -1000, -1000, -1000, 888, 8, 58, 365, -1000,
	850, 77, 221, -1000, 807, 804, 657, -1000, -21, 815,
	765, 159, 157, 155, 154, 145, 143, 140, 139, 731,
	834, 832, 478, 460, 570, 570, 570, 887, -1000, 886,
	587, 849, 472, 885, 234, 478, -1000, 529, 527, 523,
	522, 520, -1000, -1000, 757, -1000, 884, -1000, 883, 451,
	373, -1000, 659, -1000, -1000, 882, 881, 880, -1000, 89,
	247, 282, -1000, -1000, -1000, 359, -1000, 31, 28, -1000,
	-1000, -1000, 27, -1000, 298, 610, -1000, 710, 208, 281,
	-1000, 279, -1000, -1000, -1000, -62, -1000, 960, 959, 958,
	138, 136, 135, -1000, -1000, -1000, -1000, -1000, -1000, 134,
	-1000, -1000, -1000, 372, 371, 370, 369, 58, -1000, -1000,
	126, 451, -1000, -1000, 297, 122, 879, 363, 128, 723,
	784, 848, 844, 843, 814, -1000, 620, 805, -1000, -1000,
	-1000, -1000, 831, -1000, -1000, -1000, 829, -1000, -1000, 118,
	117, 115, 104, 478, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7, 100, 603, -1000, 570, -1000, 326, 325, 323,
	278, 276, -1000, -1000, -1000, -1000, 878, 623, -1000, -1000,
	-1000, -1000, -21, 174, 519, 518, 517, -1, 530, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -8, -20, 174, 516,
	511, 502, 501, 609, -1000, 586, 92, 91, 78, 813,
	797, 755, 877, 719, 77, 77, -21, 76, -1000, -1000,
	181, -1000, -1000, 364, -1000, 876, 875, 657, -1000, -1000,
	64, 63, 52, -19, 874, -1000, -38, -46, -1000, 754,
	-1000, -1000, -1000, 872, 419, 474, 478, -1000, -1000, -1000,
	494, 493, -1000, 90, 702, 180, 275, 274, -1000, -1000,
	-1000, -48, -1000, -1000, -1000, -1000, 150, 273, 271, -1000,
	-1000, -62, -62, -1000, -1000, -1000, -62, -62, -62, -1000,
	-1000, -1000, 88, 86, 358, 322, -1000, -63, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -80, -1000,
	706, 503, 603, 428, -1000, -21, 478, -1000, 321, 320,
	871, 174, 490, 489, 488, 486, -1000, -1000, 479, 475,
	467, -1000, -1000, 609, 609, 609, -1000, -1000, -1000, 627,
	311, -1000, 363, 603, 425, -1000, 600, 870, 466, -1000,
	-1000, -1000, -1000, 73, 268, 266, -1000, -1000, 248, -1000,
	-1000, -88, 729, 420, 593, 869, 424, -1000, 603, 471,
	458, 456, 455, 440, 357, -1000, 721, 736, 747, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 603, 378, -1000, 868,
	603, -1000, 178, -1000, -1000, -1000, -112, 630, 672, 630,
	707, 672, 707, 571, 867, -1000, 435, 310, -1000, -1000,
	-1000, -1000, -1000, -1000, 680, -1000, -1000, 729, 862, -1000,
	-1000,
}

var calcPgo = [...]int{
	0, 1045, 1044, 1043, 1042, 1041, 25, 1040, 827, 10,
	23, 1039, 740, 51, 1038, 1037, 11, 14, 1036, 36,
	13, 32, 1035, 1034, 24, 1033, 1032, 37, 1031, 1030,
	34, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021,
	1020, 1019, 1018, 27, 31, 30, 16, 1017, 1016, 39,
	52, 43, 1015, 17, 29, 1014, 22, 21, 3, 8,
	2, 0, 12, 1013, 33, 19, 4, 42, 1012, 1011,
	38, 28, 15, 7, 5, 6, 1, 1010, 1009, 1008,
	9, 20, 1007, 1003, 1006, 35, 18, 1005,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 6,
	6, 6, 7, 8, 8, 8, 8, 8, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 11, 11, 11, 12, 12, 13, 13,
	13, 13, 13, 13, 14, 14, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 17, 18, 18,
	19, 19, 19, 19, 19, 19, 20, 20, 21, 21,
	21, 21, 21, 21, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 4, 5, 5, 5, 22, 23, 23, 23,
	23, 24, 24, 25, 26, 26, 27, 28, 28, 29,
	29, 30, 30, 31, 32, 32, 33, 33, 34, 35,
	36, 36, 37, 38, 39, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 42, 42, 43, 43, 43, 43, 44, 44, 45,
	46, 47, 47, 48, 68, 68, 68, 68, 68, 68,
	68, 68, 70, 70, 71, 71, 71, 72, 72, 73,
	74, 75, 75, 76, 76, 76, 76, 76, 77, 78,
	78, 78, 78, 79, 79, 80, 81, 81, 81, 81,
	69, 69, 82, 83, 83, 84, 84, 50, 50, 50,
	50, 50, 51, 51, 51, 51, 51, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 52, 52,
	52, 52, 55, 55, 55, 55, 57, 56, 56, 56,
	56, 56, 54, 53, 53, 53, 53, 53, 53, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 58, 58, 58, 59, 59, 60,
	60, 62, 62, 62, 62, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 87, 65, 65, 66, 66,
	67, 67, 67, 67, 86, 86, 85, 85,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 1, 3, 2,
	4, 4, 6, 6, 8, 4, 6, 6, 8, 8,
	10, 6, 8, 8, 10, 10, 12, 8, 10, 10,
	12, 12, 14, 2, 2, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 2, 2, 4, 5, 4, 6,
	6, 6, 7, 7, 7, 3, 1, 3, 3, 1,
	1, 2, 3, 1, 2, 3, 3, 1, 1, 2,
	2, 1, 2, 2, 2, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 2, 4,
	6, 6, 6, 7, 7, 7, 6, 5, 7, 8,
	10, 3, 1, 7, 1, 3, 3, 7, 9, 1,
	3, 2, 3, 4, 6, 6, 6, 7, 8, 4,
	6, 9, 4, 9, 4, 9, 7, 8, 6, 4,
	6, 4, 6, 5, 7, 4, 4, 5, 4, 4,
	5, 1, 3, 4, 4, 4, 4, 3, 3, 2,
	4, 1, 2, 4, 8, 7, 5, 4, 10, 9,
	7, 6, 3, 1, 3, 3, 3, 2, 1, 4,
	4, 2, 1, 3, 5, 1, 1, 1, 12, 10,
	8, 9, 7, 2, 1, 4, 1, 1, 1, 1,
	4, 4, 2, 5, 4, 3, 1, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 4, 5,
	4, 5, 4, 5, 4, 5, 4, 4, 1, 1,
	2, 2, 1, 1, 3, 3, 3, 4, 4, 4,
	9, 10, 3, 2, 1, 1, 2, 5, 6, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 4, 5, 4, 5, 4, 5, 4, 5, 3,
	4, 5, 6, 5, 6, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
	1, 1, 1, 1, 6, 0, 8, 1, 1, 3,
	1, 1, 1, 1, 3, 1, 3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -6, -3, -7, -28, -31, -32, -33,
	-34, -35, -36, -37, -38, -39, -40, -48, -68, -69,
	-22, -23, -25, 69, 4, 6, 7, 8, -4, -5,
	-82, 19, 45, -8, 42, 46, 61, 40, 56, 18,
	-83, 147, -10, 146, -11, 30, 44, 5, 44, 44,
	9, 10, 11, 12, 13, 14, 15, 44, 16, 43,
	48, 49, 51, 53, 144, 143, 44, 35, 36, 37,
	16, 43, 48, 49, 51, 53, 143, 144, 43, 38,
	152, 152, 50, 44, -8, 152, -14, 38, 71, -12,
	77, -13, -66, -49, -50, 152, 72, 73, 74, 75,
	76, -51, -67, 147, 128, 129, 130, 131, 44, 44,
	44, 44, 44, 44, 44, 44, 152, 152, 152, 152,
	152, 152, 152, 152, -8, -8, -8, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 41, 147, 139,
	16, 148, 147, 39, 31, 33, 34, -15, -18, 152,
	-19, -9, 147, 151, -12, 50, 50, 50, 127, 147,
	147, 147, 147, 147, 78, 79, 71, 80, 81, -50,
	-66, -49, 44, 44, 44, 44, 44, 44, 44, 44,
	17, 147, 85, 50, 147, 52, -41, 55, 58, 59,
	147, -72, -74, -73, 69, 142, 147, 145, 47, 45,
	39, -9, 147, -86, 152, -26, -27, 152, 152, -84,
	148, -81, -67, -83, -50, 152, -62, -63, 147, -66,
	149, 105, -85, -66, -20, -21, -66, -50, 128, 151,
	23, 24, 25, 26, 28, 29, 152, 50, 152, 50,
	-10, -13, 152, 152, 152, 152, 77, -66, 77, -66,
	77, -66, 77, -66, 77, -66, 71, -51, -50, -51,
	-51, -51, -51, 148, 20, 152, 128, -29, -30, 152,
	147, -9, -86, 152, 54, -44, 65, 56, 60, 61,
	56, 60, 61, 57, -70, -71, 101, 140, 141, -74,
	-73, -75, -76, 138, 139, -77, -78, -6, 65, 134,
	152, -70, -65, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 126, -30, -57, 97,
	152, 97, -62, 44, -24, -67, 148, 151, 39, 151,
	111, 17, 148, 151, 31, 33, 34, 98, 99, -62,
	-85, -66, -64, 100, 101, 149, 104, 111, 106, 107,
	108, 109, 110, -66, 105, -9, 32, 33, 34, 151,
	34, 151, 21, 22, 21, 22, 151, -19, 152, 24,
	152, 24, 26, 28, 29, 27, 27, 27, 152, 152,
	148, -66, 148, -66, 148, -66, 148, -66, 148, -66,
	148, 148, 44, 44, 44, 148, 151, -65, -62, 44,
	148, 147, -42, -43, 62, 64, -45, -46, 68, 69,
	66, 52, 57, 52, 52, 52, 57, 52, 52, 56,
	60, 61, 148, 151, 152, 152, 152, 70, -76, -81,
	152, 152, -62, -65, 148, -72, -74, 147, 147, 147,
	147, 147, 44, 44, 152, 44, 152, 44, 148, 151,
	41, 152, -62, -27, -67, 20, 152, 128, -81, -85,
	-20, 128, -62, -62, 148, 148, -67, 102, 103, 130,
	-9, 152, 101, 150, 149, -64, -9, -62, -20, 128,
	-66, 128, -21, 128, 152, 52, 152, 27, 27, 27,
	24, 24, 24, 148, 148, 148, 148, 148, 44, -55,
	-30, -57, -56, 83, 84, 85, 86, -52, -54, -53,
	97, 82, 83, 84, 149, 87, 148, 50, -86, -44,
	151, 63, 43, 63, 43, -46, -62, -47, -6, 63,
	67, 152, 152, 152, 152, 152, 152, 152, 152, 52,
	57, 52, 52, -72, -74, -71, -65, -65, -65, 44,
	44, 111, 50, 133, 44, 145, -74, 128, 128, 128,
	128, 128, -56, 44, 44, -67, -9, 147, 44, 44,
	44, 44, 32, 33, 34, 34, 151, 101, 149, -9,
	152, -9, 152, -9, 152, 150, 102, 103, 33, 34,
	34, 151, 151, -16, -17, -66, 24, 24, 24, 152,
	152, 152, 148, 151, 147, 147, 147, 147, -54, -53,
	152, -67, 150, 152, 44, -9, 148, -45, -46, -43,
	50, 50, 50, 50, 70, -6, 52, 52, 152, 152,
	152, 152, -74, -81, 152, -75, -65, 148, 148, 148,
	151, 151, 44, -24, -62, -20, 128, 128, 128, -9,
	152, 101, -9, 152, -9, 152, -20, 128, 128, 128,
	128, 98, 111, 152, 152, 152, 52, 52, 52, 44,
	-57, -56, -86, -86, -62, 152, -53, 147, 44, 44,
	-46, 152, 152, 152, 152, 44, 152, 152, 52, 44,
	136, -79, 135, 70, -80, 132, -72, -74, 128, 128,
	148, 33, 34, 34, 151, 151, -9, 152, 34, 151,
	151, -17, -66, -16, -16, -16, 148, 148, 148, 148,
	152, 152, 65, 135, 70, -80, -75, 134, -62, -74,
	148, 148, 44, -20, 128, 128, 128, 128, 128, 128,
	128, 87, 148, -9, -75, 134, 70, 44, 133, -87,
	34, 151, 151, 151, 152, -61, -58, -59, -60, 88,
	89, 90, 91, 92, 93, 94, 137, 70, 44, 134,
	-75, 125, 128, 128, 128, 128, 147, -59, -60, -58,
	-60, -58, -59, -75, 134, 44, 151, 152, -60, -59,
	-60, -58, -59, -58, 70, 44, 128, 148, 65, -61,
	44,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 105, 106,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 27, 0, 0, 0, 94, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 29, 0, 53, 54,
	0, 56, -2, -2, -2, 328, 0, 0, 0, 0,
	0, 0, 222, 0, 330, 331, 332, 333, 95, 98,
	99, 100, 101, 102, 103, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 0, 0, 0, 0, 64, 65, 80,
	79, 83, 0, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	223, 224, 109, 133, 139, 142, 144, 173, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 124, 0, 0, 0,
	214, 216, -2, 207, -2, -2, 30, 281, 0, 0,
	0, 0, 31, 337, 35, 87, -2, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 84, 0,
	0, 57, 59, 61, 63, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 225, 218,
	219, 220, 221, 226, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 176,
	187, 0, 192, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 317, 318, 319,
	320, 321, 322, 323, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 117, 0, 122, 0, 0, 0, 0,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 0, 0, 0, 307, 308, 309,
	310, 311, 312, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 89, 90, 92, 93, 0, 78, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 85,
	28, 0, 228, 0, 230, 0, 232, 0, 234, 0,
	236, 237, 110, 111, 112, 0, 0, 131, 0, 140,
	0, 0, 0, 161, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 134, 135, 0, 136, 0, 116, 0, 0,
	0, 334, 0, 125, 126, 0, 0, 0, 215, 33,
	36, 0, 283, 284, 282, 0, 285, 0, 0, 286,
	287, 289, 0, 299, 0, 0, 306, 32, 37, 0,
	336, 0, 86, 41, 66, 0, 68, 0, 0, 0,
	0, 0, 0, 227, 229, 231, 233, 235, 127, 0,
	130, 242, 243, 0, 0, 0, 0, 132, 238, 239,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 169, 0, 171, 167,
	168, 149, 0, 155, 158, 151, 0, 156, 159, 0,
	0, 0, 0, 0, 175, 182, 184, 185, 186, 190,
	193, 0, 0, 0, 189, 0, 180, 0, 0, 0,
	0, 0, 246, 137, 118, 121, 0, 0, 123, 113,
	114, 115, 0, 0, 0, 0, 0, 0, 0, 291,
	295, 293, 297, 288, 290, 300, 0, 0, 0, 0,
	0, 0, 0, 67, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	0, 253, 256, 0, 138, 0, 0, 0, 147, 162,
	0, 0, 0, 0, 0, 172, 0, 0, 153, 0,
	157, 160, 174, 0, 0, 0, 0, 314, 315, 316,
	0, 0, 119, 0, 34, 39, 0, 0, 42, 301,
	303, 0, 292, 296, 294, 298, 38, 0, 0, 43,
	47, 0, 0, 69, 70, 71, 0, 0, 0, 128,
	244, 245, 0, 0, 0, 0, 252, 0, 141, 143,
	145, 163, 165, 164, 166, 170, 150, 152, 0, 194,
	0, 0, 0, 0, 204, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 304, 0, 0,
	0, 75, 77, 72, 73, 74, 247, 248, 249, 0,
	0, 154, 0, 0, 0, 203, 0, 0, 0, 178,
	324, 325, 120, 40, 0, 0, 45, 48, 0, 44,
	49, 0, 257, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 274,
	275, 276, 277, 278, 279, 280, 0, 0, 200, 0,
	205, 326, 0, 46, 51, 50, 0, 262, 264, 263,
	266, 265, 267, 0, 0, 201, 0, 0, 268, 269,
	270, 271, 272, 273, 0, 199, 52, 250, 0, 251,
	198,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:490
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetParser().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:500
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetParser().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:510
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DCL
			calcVAL.NodePt.Ast.Dcl = calcDollar[1].NodePt.Dcl

			GetParser().AST = calcVAL.NodePt.Ast
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:520
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DQL
			calcVAL.NodePt.Ast.Dql = calcDollar[1].NodePt.Dql

			GetParser().AST = calcVAL.NodePt.Ast
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:554
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:562
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:570
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:578
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:586
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:602
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:610
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:618
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:642
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:650
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 19:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:679
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.Delete
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:687
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_INSERT
			calcVAL.NodePt.Dml.Insert = calcDollar[1].NodePt.Insert
		}
	case 21:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:695
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_UPDATE
			calcVAL.NodePt.Dml.Update = calcDollar[1].NodePt.Update
		}
	case 22:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:723
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 23:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:730
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_UNION
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql

		}
	case 24:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:740
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_DIFFERENCE
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql
		}
	case 25:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:749
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_INTERSECTION
			calcVAL.NodePt.Dql.DqlL = calcDollar[1].NodePt.Dql
			calcVAL.NodePt.Dql.DqlR = calcDollar[3].NodePt.Dql
		}
	case 26:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:758
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 27:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:761
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DQL_NODE

			calcVAL.NodePt.Dql = &DQLNode{}
			calcVAL.NodePt.Dql.Type = DQL_SINGLE_QUERY
			calcVAL.NodePt.Dql.Query = calcDollar[1].NodePt.Query
		}
	case 28:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:871
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 29:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:877
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 30:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:902
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 31:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:929
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 32:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 33:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:986
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 34:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1015
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false
			calcVAL.NodePt.Query.LimitValid = false
		}
	case 35:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1046
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[4].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 36:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1074
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 37:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1104
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 38:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1135
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 39:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 40:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1199
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[10].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = false
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1232
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[4].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[6].Int
		}
	case 42:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1260
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int
		}
	case 43:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1290
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int
		}
	case 44:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1321
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int
		}
	case 45:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1354
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false
			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int

		}
	case 46:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1387
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = false

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int

		}
	case 47:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1422
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false
			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[4].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[6].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[8].Int

		}
	case 48:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1453
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = false
			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int

		}
	case 49:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1486
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[6].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[8].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[10].Int
		}
	case 50:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1519
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = false

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[4].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int
		}
	case 51:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1553
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = false

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[8].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[10].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[12].Int
		}
	case 52:
		calcDollar = calcS[calcpt-14 : calcpt+1]
//line parser/grammar.y:1587
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = QUERY_NODE

			calcVAL.NodePt.Query = &QueryNode{}

			calcVAL.NodePt.Query.StarValid = calcDollar[1].NodePt.SelectStmt.StarValid
			if calcDollar[1].NodePt.SelectStmt.StarValid == false {
				calcVAL.NodePt.Query.DistinctValid = calcDollar[1].NodePt.SelectStmt.DistinctValid
				calcVAL.NodePt.Query.SelectList = calcDollar[1].NodePt.SelectStmt.SelectList
			}

			calcVAL.NodePt.Query.FromListValid = calcDollar[2].NodePt.FromStmt.FromListValid
			if calcDollar[2].NodePt.FromStmt.FromListValid {
				calcVAL.NodePt.Query.FromList = calcDollar[2].NodePt.FromStmt.FromList
			} else {
				calcVAL.NodePt.Query.Join = calcDollar[2].NodePt.FromStmt.Join
			}

			calcVAL.NodePt.Query.WhereValid = true
			calcVAL.NodePt.Query.WhereCondition = calcDollar[4].NodePt.Condition

			calcVAL.NodePt.Query.GroupByValid = true
			calcVAL.NodePt.Query.GroupByList = calcDollar[6].List.AttriNameOptionTableNameList

			calcVAL.NodePt.Query.HavingValid = true
			calcVAL.NodePt.Query.HavingCondition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Query.OrderByValid = true
			calcVAL.NodePt.Query.OrderByList = calcDollar[10].List.OrderByList

			calcVAL.NodePt.Query.LimitValid = true
			calcVAL.NodePt.Query.InitialPos = calcDollar[12].Int
			calcVAL.NodePt.Query.OffsetPos = calcDollar[14].Int
		}
	case 53:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = true
			calcVAL.NodePt.SelectStmt.DistinctValid = false
		}
	case 54:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1634
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = false
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[2].List.SelectList
		}
	case 55:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1643
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = true
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[3].List.SelectList
		}
	case 56:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1656
		{
			calcVAL.List = List{}
			calcVAL.List.Type = SELECT_LIST

			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[1].NodePt.SelectListEntry)
		}
	case 57:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1662
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[3].NodePt.SelectListEntry)
		}
	case 58:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1670
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 59:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1679
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 60:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1689
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 61:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1698
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 62:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1708
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 63:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1717
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 64:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1731
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = false
			calcVAL.NodePt.FromStmt.Join = calcDollar[2].NodePt.Join
		}
	case 65:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1739
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = true
			calcVAL.NodePt.FromStmt.FromList = calcDollar[2].List.FromList
		}
	case 66:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1751
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = CROSS_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 67:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1760
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[3].String
			calcVAL.NodePt.Join.OnList = calcDollar[5].List.OnList
		}
	case 68:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1770
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 69:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1779
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_FULL_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 70:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1788
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_LEFT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 71:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1797
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_RIGHT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 72:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1806
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = FULL_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 73:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1816
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = LEFT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 74:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1826
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = RIGHT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 75:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1840
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[3].NodePt.OnListEntry)
		}
	case 76:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1844
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ON_LIST

			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[1].NodePt.OnListEntry)
		}
	case 77:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1854
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ON_LIST_ENTRY

			calcVAL.NodePt.OnListEntry = &OnListEntryNode{}
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameR = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 78:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1866
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[3].NodePt.FromListEntry)
		}
	case 79:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1870
		{
			calcVAL.List = List{}
			calcVAL.List.Type = FROM_LIST

			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[1].NodePt.FromListEntry)
		}
	case 80:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1880
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = false

		}
	case 81:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1890
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 82:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1900
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 83:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1910
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = false
		}
	case 84:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1919
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 85:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1929
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 86:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1943
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[3].NodePt.OrderByListEntry)
		}
	case 87:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1947
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ORDERBY_LIST

			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[1].NodePt.OrderByListEntry)
		}
	case 88:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 89:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1966
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 90:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1975
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 91:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1984
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 92:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1993
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 93:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2002
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 94:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2048
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 95:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2055
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 96:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2062
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_COMMIT
		}
	case 97:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2069
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_ROLLBACK
		}
	case 98:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2076
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TABLES
		}
	case 99:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2083
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_ASSERTIONS
		}
	case 100:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2090
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_VIEWS
		}
	case 101:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2097
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_INDEXS
		}
	case 102:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2104
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TRIGGERS
		}
	case 103:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2111
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_FUNCTIONS
		}
	case 104:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2118
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_PROCEDURES
		}
	case 105:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2125
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 106:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2128
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 107:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2131
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_PSMCALL
			calcVAL.NodePt.Dcl.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 108:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2139
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_INIT
		}
	case 109:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2146
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_DROP_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
		}
	case 110:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2158
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 111:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 112:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2176
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[5].Int)
		}
	case 113:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2189
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 114:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2198
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 115:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2207
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[6].Int)
		}
	case 116:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2227
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.Delete = &DeleteNode{}
			calcVAL.NodePt.Delete.TableName = calcDollar[3].String
			calcVAL.NodePt.Delete.Condition = calcDollar[5].NodePt.Condition
		}
	case 117:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2255
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[4].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = false
		}
	case 118:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2266
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.AttriNameListValid = false
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[5].List.ElementaryValueList
		}
	case 119:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2277
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 120:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2289
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[8].List.ElementaryValueList
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 121:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2305
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[3].NodePt.ElementaryValue)
		}
	case 122:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2309
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ELEMENTARY_VALUE_LIST

			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[1].NodePt.ElementaryValue)
		}
	case 123:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2335
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_NODE

			calcVAL.NodePt.Update = &UpdateNode{}
			calcVAL.NodePt.Update.TableName = calcDollar[2].String
			calcVAL.NodePt.Update.Condition = calcDollar[6].NodePt.Condition
			calcVAL.NodePt.Update.UpdateList = calcDollar[4].List.UpdateList
		}
	case 124:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2348
		{
			calcVAL.List = List{}
			calcVAL.List.Type = UPDATE_LIST

			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[1].NodePt.UpdateListEntry)
		}
	case 125:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2354
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[3].NodePt.UpdateListEntry)
		}
	case 126:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2362
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_ELEMENTARY_VALUE
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 127:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2393
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 128:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2408
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 129:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2430
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 130:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2435
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 131:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2443
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 132:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2452
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 133:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2489
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 134:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2508
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 135:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2523
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 136:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2545
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 137:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2553
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 138:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2572
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 139:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2591
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 140:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2610
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 141:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2619
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 142:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2640
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 143:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 144:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2678
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 145:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2739
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 146:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2760
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 147:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2780
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 148:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2800
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 149:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2823
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 150:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2831
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 151:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2840
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 152:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2848
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 153:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2857
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 154:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2865
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 155:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2874
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 156:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2882
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 157:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2890
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 158:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2898
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 159:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2906
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 160:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2914
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 161:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2926
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 162:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2932
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 163:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2941
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 164:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2949
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 165:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 166:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2965
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 167:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2977
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 168:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2982
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 169:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2991
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 170:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2998
		{
			calcVAL.List = calcDollar[2].List
		}
	case 171:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3005
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 172:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3011
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 173:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3026
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 174:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3105
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 175:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3119
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 176:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3131
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 177:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3143
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 178:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3154
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 179:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3167
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 180:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3179
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 181:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3191
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 182:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3206
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 183:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3210
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 184:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3220
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 185:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3231
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 186:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3240
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 187:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3253
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 188:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3257
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 189:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3267
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 190:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3279
		{
			calcVAL.List = calcDollar[2].List
		}
	case 191:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3286
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 192:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3291
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 193:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3301
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 194:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3309
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 195:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3318
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 196:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3326
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 197:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3334
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 198:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:3346
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 199:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3360
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 200:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3373
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 201:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3385
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 202:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:3397
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 203:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3412
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 204:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3416
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 205:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3426
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 206:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3438
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 207:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3446
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 208:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3454
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 209:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3462
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 210:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3482
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 211:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3490
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 212:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3519
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 213:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3526
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 214:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3535
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 215:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3547
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 216:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3551
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 217:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3580
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 218:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 219:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3598
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 220:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3607
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 221:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3616
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 222:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3629
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 223:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3638
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 224:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3647
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 225:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3656
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 226:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3665
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 227:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3695
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 228:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3704
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 229:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3713
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 230:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3722
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 231:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3731
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 232:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3740
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 233:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3749
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 234:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3758
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 235:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3767
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 236:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3776
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 237:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3785
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 238:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3866
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 239:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3871
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 240:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3876
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 241:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3880
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 242:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3888
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 243:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3893
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 244:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3898
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 245:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3902
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 246:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3910
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 247:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3919
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 248:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3928
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 249:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3937
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 250:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3946
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 251:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 252:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3985
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 253:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3994
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 254:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4003
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 255:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4011
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 256:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4019
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 257:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4027
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 258:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4037
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 259:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4064
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 260:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4074
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 261:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4084
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 262:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4094
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 263:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4105
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 264:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4116
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 265:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4127
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 266:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4138
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 267:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4149
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 268:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4160
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 269:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4172
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 270:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4184
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 271:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4196
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 272:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4208
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 273:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4220
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 274:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4236
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 275:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4241
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 276:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4246
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 277:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4255
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 278:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4260
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 279:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4269
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 280:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4274
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 281:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4293
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 282:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4301
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 283:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4304
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 284:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4313
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 285:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4364
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 286:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4375
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 287:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4387
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 288:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4397
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 289:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4407
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 290:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4417
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 291:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4427
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 292:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4438
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 293:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4449
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 294:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4460
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 295:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4471
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 296:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4482
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 297:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4493
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 298:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4504
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 299:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4515
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 300:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4524
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 301:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4533
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 302:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4543
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[6].NodePt.Query
		}
	case 303:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:4553
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 304:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4563
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 305:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:4573
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[2].NodePt.Query
		}
	case 306:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4582
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 307:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4595
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 308:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4600
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 309:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4605
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 310:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4610
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 311:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4615
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 312:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4620
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 313:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4650
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 314:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4657
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 315:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4665
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 316:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:4673
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 317:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4681
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 318:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4688
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 319:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4695
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 320:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4702
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 321:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4709
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 322:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4716
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 323:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4723
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 324:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4730
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 325:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:4739
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 326:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:4748
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 327:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4755
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 328:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4774
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 329:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4781
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 330:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4804
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 331:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4811
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 332:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4818
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 333:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4825
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 334:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4850
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 335:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4853
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 336:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4860
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 337:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4864
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
