// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"fmt"
	"strconv"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE NodeEnum = 16

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE                         NodeEnum = 8
	PSM_VALUE_NODE                   NodeEnum = 44
	PSM_EXEC_ENTRY_NODE              NodeEnum = 45
	PSM_FOR_LOOP_NODE                NodeEnum = 46
	PSM_BRANCH_NODE                  NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE            NodeEnum = 48
	PSM_PARAMETER_ENTRY_NODE         NodeEnum = 49
	PSM_LOCAL_DECLARATION_ENTRY_NODE NodeEnum = 50

	/* delete */
	DELETE_NODE NodeEnum = 51

	/* insert */
	INSERT_NODE NodeEnum = 52

	/* update */
	UPDATE_LIST_ENTRY NodeEnum = 53
	UPDATE_NODE       NodeEnum = 54

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 55
	JOIN_NODE          NodeEnum = 56
	FROM_STMT_NODE     NodeEnum = 57
	SELECT_STMT_NODE   NodeEnum = 58
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dcl */
	Dcl *DCLNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm                      *PsmNode
	PsmValue                 *PsmValueNode
	PsmExecEntry             *PsmExecEntryNode
	PsmForLoop               *PsmForLoopNode
	PsmBranch                *PsmBranchNode
	PsmElseifEntry           *PsmElseifEntryNode
	PsmParameterEntry        *PsmParameterEntryNode
	PsmLocalDeclarationEntry *PsmLocalDeclarationEntryNode

	/* delete */
	Delete *DeleteNode

	/* insert */
	Insert *InsertNode

	/* update */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode

	/* dql */
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode
	Join             *JoinNode
	FromStmt         *FromStmtNode
	SelectStmt       *SelectStmtNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
	PSM_PARAMETER_LIST              ListEnum = 10
	PSM_LOCAL_DECLARATION_LIST      ListEnum = 11
	ELEMENTARY_VALUE_LIST           ListEnum = 12
	UPDATE_LIST                     ListEnum = 13
	ORDERBY_LIST                    ListEnum = 14
	FROM_LIST                       ListEnum = 15
	ON_LIST                         ListEnum = 16
	SELECT_LIST                     ListEnum = 17
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
	PsmParameterList             []*PsmParameterEntryNode
	PsmLocalDeclarationList      []*PsmLocalDeclarationEntryNode
	ElementaryValueList          []*ElementaryValueNode
	UpdateList                   []*UpdateListEntryNode
	OrderByList                  []*OrderByListEntryNode
	FromList                     []*FromListEntryNode
	OnList                       []*OnListEntryNode
	SelectList                   []*SelectListEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

// fromStmt
type FromStmtNode struct {
	FromListValid bool
	FromList      []*FromListEntryNode
	Join          *JoinNode
}

// selectStmt
type SelectStmtNode struct {
	StarValid     bool
	DistinctValid bool
	SelectList    []*SelectListEntryNode
}

//line parser/grammar.y:281
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const START = 57346
const TRANSACTION = 57347
const COMMIT = 57348
const ROLLBACK = 57349
const SHOW = 57350
const TABLES = 57351
const ASSERTIONS = 57352
const VIEWS = 57353
const INDEXS = 57354
const TRIGGERS = 57355
const FUNCTIONS = 57356
const PROCEDURES = 57357
const USER = 57358
const PASSWORD = 57359
const CONNECT = 57360
const PASSWORDS = 57361
const ASC = 57362
const DESC = 57363
const CROSS = 57364
const JOIN = 57365
const NATURAL = 57366
const FULL = 57367
const OUTER = 57368
const LEFT = 57369
const RIGHT = 57370
const SELECT = 57371
const FROM = 57372
const WHERE = 57373
const INSERTINTO = 57374
const VALUES = 57375
const CREATE = 57376
const TABLE = 57377
const SEMICOLON = 57378
const DROP = 57379
const ALTER = 57380
const ADD = 57381
const ASSERTION = 57382
const VIEW = 57383
const AS = 57384
const INDEX = 57385
const ON = 57386
const TRIGGER = 57387
const REFERENCING = 57388
const BEFORE = 57389
const UPDATE = 57390
const OF = 57391
const AFTER = 57392
const INSTEAD = 57393
const INSERT = 57394
const DELETE = 57395
const OLD = 57396
const ROW = 57397
const NEW = 57398
const FOR = 57399
const EACH = 57400
const STATEMENT = 57401
const WHEN = 57402
const BEGINTOKEN = 57403
const END = 57404
const STAR = 57405
const SUM = 57406
const AVG = 57407
const MIN = 57408
const MAX = 57409
const COUNT = 57410
const DISTINCT = 57411
const PLUS = 57412
const SUBTRACT = 57413
const DIVISION = 57414
const CONCATENATION = 57415
const DEFAULT = 57416
const UNIQUE = 57417
const PRIMARYKEY = 57418
const CHECK = 57419
const FOREIGNKEY = 57420
const REFERENCES = 57421
const NOT_DEFERRABLE = 57422
const DEFERED_DEFERRABLE = 57423
const IMMEDIATE_DEFERRABLE = 57424
const UPDATE_NULL = 57425
const UPDATE_CASCADE = 57426
const DELETE_NULL = 57427
const DELETE_CASCADE = 57428
const DEFERRED = 57429
const IMMEDIATE = 57430
const CONSTRAINT = 57431
const AND = 57432
const OR = 57433
const LIKE = 57434
const IN = 57435
const ALL = 57436
const ANY = 57437
const IS = 57438
const EXISTS = 57439
const NOTEQUAL = 57440
const LESS = 57441
const GREATER = 57442
const LESSEQUAL = 57443
const GREATEREQUAL = 57444
const EQUAL = 57445
const CHAR = 57446
const VARCHAR = 57447
const BIT = 57448
const BITVARYING = 57449
const BOOLEAN = 57450
const INT = 57451
const INTEGER = 57452
const SHORTINT = 57453
const FLOAT = 57454
const REAL = 57455
const DOUBLEPRECISION = 57456
const DECIMAL = 57457
const NUMERIC = 57458
const DATE = 57459
const TIME = 57460
const DOT = 57461
const INTVALUE = 57462
const FLOATVALUE = 57463
const STRINGVALUE = 57464
const BOOLVALUE = 57465
const ELSEIF = 57466
const THEN = 57467
const IF = 57468
const ELSE = 57469
const CURSOR = 57470
const DO = 57471
const RETURN = 57472
const SET = 57473
const OUT = 57474
const INOUT = 57475
const DECLARE = 57476
const PROCEDURE = 57477
const FUNCTION = 57478
const RETURNS = 57479
const CALL = 57480
const LPAREN = 57481
const RPAREN = 57482
const NOT = 57483
const NULLMARK = 57484
const COMMA = 57485
const ID = 57486

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SHOW",
	"TABLES",
	"ASSERTIONS",
	"VIEWS",
	"INDEXS",
	"TRIGGERS",
	"FUNCTIONS",
	"PROCEDURES",
	"USER",
	"PASSWORD",
	"CONNECT",
	"PASSWORDS",
	"ASC",
	"DESC",
	"CROSS",
	"JOIN",
	"NATURAL",
	"FULL",
	"OUTER",
	"LEFT",
	"RIGHT",
	"SELECT",
	"FROM",
	"WHERE",
	"INSERTINTO",
	"VALUES",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"OUT",
	"INOUT",
	"DECLARE",
	"PROCEDURE",
	"FUNCTION",
	"RETURNS",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:4080

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 60,
	143, 60,
	-2, 194,
	-1, 47,
	1, 63,
	143, 63,
	-2, 196,
	-1, 83,
	1, 30,
	143, 30,
	-2, 194,
	-1, 84,
	1, 32,
	143, 32,
	-2, 195,
	-1, 85,
	1, 34,
	143, 34,
	-2, 196,
	-1, 248,
	36, 177,
	140, 177,
	143, 177,
	-2, 193,
	-1, 250,
	36, 179,
	140, 179,
	143, 179,
	-2, 196,
	-1, 251,
	36, 180,
	140, 180,
	143, 180,
	-2, 299,
	-1, 442,
	31, 96,
	143, 96,
	-2, 196,
	-1, 443,
	31, 97,
	143, 97,
	-2, 193,
}

const calcPrivate = 57344

const calcLast = 924

var calcAct = [...]int{
	673, 300, 676, 674, 77, 330, 630, 221, 675, 120,
	299, 222, 220, 376, 326, 46, 467, 239, 50, 247,
	460, 337, 305, 3, 372, 353, 310, 375, 466, 175,
	352, 283, 422, 293, 276, 47, 242, 292, 82, 57,
	58, 59, 60, 61, 83, 79, 57, 58, 59, 60,
	61, 81, 135, 136, 137, 138, 78, 139, 140, 461,
	462, 463, 464, 444, 85, 329, 57, 58, 59, 60,
	61, 191, 142, 327, 51, 272, 78, 189, 700, 672,
	434, 661, 119, 78, 327, 78, 57, 58, 59, 60,
	61, 83, 78, 187, 142, 53, 54, 55, 56, 649,
	144, 642, 53, 54, 55, 56, 335, 648, 640, 84,
	637, 85, 78, 43, 52, 246, 623, 599, 46, 251,
	328, 52, 53, 54, 55, 56, 48, 48, 277, 78,
	185, 182, 184, 186, 188, 190, 622, 597, 47, 277,
	43, 52, 53, 54, 55, 56, 251, 620, 332, 183,
	334, 181, 48, 48, 595, 83, 84, 619, 469, 470,
	471, 52, 78, 473, 446, 618, 48, 645, 48, 78,
	340, 341, 237, 468, 141, 85, 274, 617, 26, 611,
	27, 28, 29, 240, 205, 78, 644, 532, 445, 340,
	248, 252, 41, 254, 193, 256, 141, 258, 48, 260,
	273, 250, 143, 34, 33, 48, 39, 583, 35, 580,
	75, 36, 37, 469, 470, 471, 643, 279, 473, 437,
	84, 579, 40, 578, 48, 472, 48, 38, 297, 577,
	562, 280, 298, 423, 424, 25, 559, 426, 496, 428,
	429, 430, 431, 432, 427, 565, 333, 551, 340, 525,
	552, 284, 526, 709, 495, 494, 493, 338, 492, 491,
	490, 489, 452, 309, 451, 450, 243, 439, 436, 325,
	415, 437, 403, 413, 354, 392, 664, 400, 399, 395,
	472, 394, 425, 342, 367, 600, 393, 391, 333, 369,
	392, 364, 340, 5, 365, 659, 360, 359, 358, 345,
	339, 397, 346, 340, 366, 308, 281, 277, 265, 263,
	244, 208, 43, 401, 207, 206, 204, 333, 405, 203,
	248, 398, 195, 404, 173, 166, 165, 164, 163, 162,
	161, 250, 160, 159, 158, 402, 157, 478, 419, 156,
	435, 155, 421, 154, 433, 153, 152, 440, 151, 150,
	107, 333, 104, 103, 590, 589, 535, 534, 212, 145,
	134, 108, 443, 417, 418, 248, 447, 591, 561, 417,
	418, 223, 658, 442, 647, 588, 250, 39, 587, 441,
	459, 586, 351, 484, 350, 78, 349, 333, 476, 483,
	417, 418, 348, 40, 347, 262, 261, 259, 38, 502,
	458, 486, 306, 477, 501, 541, 86, 629, 257, 255,
	253, 180, 514, 646, 167, 592, 298, 78, 513, 524,
	504, 505, 506, 522, 523, 87, 503, 333, 333, 531,
	88, 89, 690, 90, 520, 91, 226, 238, 225, 537,
	474, 527, 94, 540, 224, 613, 556, 95, 96, 219,
	97, 555, 98, 554, 553, 213, 539, 410, 354, 547,
	409, 408, 407, 354, 354, 354, 536, 406, 370, 631,
	278, 307, 628, 210, 546, 301, 302, 171, 125, 124,
	564, 123, 558, 122, 548, 549, 550, 121, 560, 223,
	76, 567, 169, 684, 557, 626, 39, 698, 687, 667,
	417, 418, 655, 568, 49, 566, 530, 635, 574, 581,
	294, 634, 40, 298, 519, 518, 39, 38, 517, 652,
	168, 306, 584, 516, 515, 92, 93, 78, 248, 582,
	528, 529, 40, 594, 596, 670, 593, 38, 598, 250,
	585, 306, 100, 99, 417, 418, 707, 689, 113, 295,
	296, 45, 509, 39, 449, 343, 53, 54, 55, 56,
	338, 610, 224, 604, 638, 333, 533, 606, 448, 40,
	663, 608, 609, 607, 38, 211, 612, 542, 306, 511,
	616, 631, 379, 685, 651, 80, 397, 710, 39, 650,
	307, 601, 602, 633, 301, 302, 636, 378, 632, 53,
	54, 55, 56, 416, 40, 624, 639, 641, 39, 38,
	307, 680, 681, 306, 301, 302, 417, 418, 668, 174,
	176, 177, 178, 179, 40, 192, 291, 682, 683, 38,
	576, 417, 418, 306, 653, 377, 378, 656, 396, 654,
	657, 333, 487, 660, 298, 575, 488, 307, 677, 678,
	679, 301, 302, 682, 683, 665, 397, 417, 418, 373,
	172, 374, 666, 680, 681, 682, 683, 146, 397, 428,
	429, 430, 431, 432, 427, 500, 499, 692, 694, 693,
	695, 688, 307, 691, 455, 696, 301, 302, 482, 480,
	397, 677, 678, 679, 701, 697, 703, 572, 704, 397,
	706, 702, 307, 454, 705, 571, 301, 302, 481, 479,
	711, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 453, 324, 461, 462, 463, 464,
	677, 678, 679, 680, 681, 682, 683, 387, 386, 383,
	327, 677, 678, 679, 680, 681, 461, 462, 463, 464,
	116, 39, 282, 39, 382, 264, 214, 114, 115, 117,
	118, 388, 570, 284, 569, 389, 390, 40, 510, 40,
	475, 288, 38, 285, 38, 289, 290, 286, 287, 216,
	497, 573, 217, 218, 384, 498, 380, 149, 148, 385,
	147, 381, 105, 235, 712, 234, 708, 699, 686, 669,
	662, 625, 621, 615, 614, 605, 603, 563, 545, 544,
	543, 538, 521, 512, 508, 507, 456, 414, 412, 411,
	368, 363, 362, 361, 336, 233, 232, 231, 230, 229,
	228, 227, 133, 132, 131, 130, 129, 128, 127, 126,
	106, 65, 64, 62, 101, 438, 236, 196, 102, 197,
	344, 198, 199, 268, 267, 266, 202, 201, 200, 357,
	356, 355, 271, 270, 269, 194, 111, 112, 109, 110,
	66, 67, 68, 69, 70, 71, 72, 209, 170, 63,
	249, 42, 671, 420, 245, 32, 627, 304, 303, 21,
	20, 331, 457, 465, 19, 485, 371, 215, 18, 17,
	16, 15, 14, 13, 12, 11, 10, 9, 275, 8,
	241, 24, 23, 22, 44, 74, 73, 6, 7, 31,
	30, 4, 2, 1,
}

var calcPact = [...]int{
	174, -1000, -1000, -1000, -1000, 22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 807, 874, 806, 805, 861,
	-1000, -1000, -1000, 66, -18, 390, 407, 809, 818, 209,
	208, 750, 804, 206, 218, -1000, 848, 846, 429, 687,
	-1000, -1000, 22, -1000, -1000, -1000, -1000, 348, 344, 342,
	340, 339, -1000, 803, -1000, -1000, 802, 801, 800, 799,
	798, 797, 796, -1000, 217, 30, -1000, 58, -1000, -1000,
	216, 22, -1000, 748, 746, 745, 205, 204, 202, 201,
	199, 197, 195, 192, 190, 189, 188, 186, 185, 184,
	183, 182, 181, 381, 361, 862, -1000, 338, 22, -1000,
	-1000, -1000, -1000, 180, 22, 22, 22, 22, 22, 271,
	-1000, 82, 80, 61, 24, 8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 50, 842, 178, 824, 832, 831,
	830, -1000, 175, -1000, 172, 22, 216, 171, 170, 167,
	860, 334, 498, 316, 712, 732, 310, 299, 795, 794,
	793, 792, 791, 790, 789, 756, 815, 298, 39, 122,
	166, -25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54, 270, 54, 269, 54, 268, 54, 257, 54,
	256, 255, -1000, 52, 165, 711, 164, 829, 828, 827,
	841, 840, 839, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	163, 331, 408, 39, 162, 706, 725, 723, 577, 417,
	428, -1000, -1000, 464, 161, 417, 607, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -5, -24, 9, 788, 479, 160,
	-1000, 140, -1000, 452, 833, 159, -1000, -1000, -1000, -1000,
	-1000, 429, 254, -1000, 252, -1000, 246, -1000, 244, -1000,
	242, -1000, -1000, -1000, 54, -1000, 838, 837, 836, 154,
	153, 152, 787, 786, 785, 151, -1000, 607, 9, 784,
	149, 329, 605, 575, 524, 742, 710, 695, 740, 694,
	693, 713, 147, -1000, 142, 137, 135, -1000, -1000, 576,
	-1000, 2, 134, -1000, -1000, -1000, 133, 9, 607, 132,
	428, -1000, 328, 323, 322, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 321, 318, -1000, 783, 782, 129, 781, 126,
	567, -1000, 9, 141, -17, 408, -1000, 128, -1000, 812,
	123, 9, 122, 22, 44, -1000, 2, -1000, -1000, -1000,
	-1000, -1000, 478, -1000, 451, 121, 120, 118, 680, 659,
	640, -1000, -1000, -1000, 780, -16, 84, 300, -1000, 728,
	39, 194, -1000, 654, 653, 536, -1000, 9, 721, 587,
	117, 116, 115, 114, 112, 111, 110, 94, 736, 632,
	631, 428, 417, 607, 607, 607, 779, -1000, 778, 449,
	726, 454, 777, 281, 428, -1000, 404, 403, 398, 395,
	394, -1000, -1000, 671, -1000, 776, -1000, 9, 9, 279,
	109, 141, 436, 384, 43, 473, 215, -1000, -1000, -1000,
	-1000, -1000, -1000, 571, 408, -1000, 775, 479, 266, -1000,
	541, -1000, -1000, -1000, 774, 773, 772, -1000, 54, 54,
	-1000, -1000, -1000, 54, 54, 54, -1000, 107, -1000, -1000,
	-1000, 315, 314, 312, 307, 84, -1000, -1000, 92, 479,
	-1000, -1000, 226, 86, 771, 408, 105, 575, 605, 722,
	720, 663, 655, -1000, 526, 719, -1000, -1000, -1000, -1000,
	601, -1000, -1000, -1000, 586, -1000, -1000, 85, 79, 77,
	65, 428, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2,
	63, 464, -1000, 607, -1000, 241, 238, 235, 212, 211,
	-1000, -1000, -1000, -1000, -1000, 274, 54, -1000, 10, -7,
	-1000, -1000, -1000, -27, -1000, 143, 497, -1000, -1000, -1000,
	770, 479, -1000, -1000, -1000, -1000, -1000, -1000, 478, 478,
	478, 769, 651, 39, 39, 9, 35, -1000, -1000, 139,
	-1000, -1000, 306, -1000, 768, 767, 536, -1000, -1000, 33,
	21, 13, 3, 766, -1000, -8, -28, -1000, 561, -1000,
	-1000, -1000, 765, 367, 345, 428, -1000, -1000, -1000, 391,
	387, -34, 471, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -36, -43, -1000, 76, -1000, -1000, -1000, 46, 27,
	273, 234, -1000, -37, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -45, -1000, 532, 457, 464, 376,
	-1000, 9, 428, -1000, 232, 155, -1000, -1000, -63, -1000,
	-1000, -1000, -1000, 764, -1000, -1000, -1000, 491, 136, -1000,
	408, 464, 373, -1000, 556, 763, 410, -1000, -1000, -1000,
	-1000, -1000, -1000, -65, 650, 364, 521, 762, 372, -1000,
	464, 430, 293, -1000, 580, 568, 661, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 464, 371, -1000, 761, 464, -1000,
	-66, 542, 528, 542, 611, 528, 611, 484, 760, -1000,
	113, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000, 650,
	758, -1000, -1000,
}

var calcPgo = [...]int{
	0, 923, 922, 921, 920, 919, 22, 918, 585, 38,
	917, 916, 30, 25, 915, 490, 914, 551, 913, 912,
	21, 911, 910, 36, 909, 908, 34, 907, 906, 905,
	904, 903, 902, 901, 900, 899, 898, 897, 896, 24,
	31, 27, 13, 895, 894, 74, 29, 504, 893, 16,
	28, 892, 20, 14, 3, 8, 2, 0, 5, 891,
	32, 26, 9, 4, 18, 890, 889, 37, 33, 12,
	11, 7, 10, 1, 888, 887, 886, 6, 19, 885,
	880, 884, 883, 17, 882,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 6, 6, 6, 63, 7, 7, 7, 8, 8,
	9, 9, 9, 9, 9, 9, 10, 10, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 12, 12, 13,
	14, 14, 15, 15, 15, 15, 15, 15, 16, 16,
	17, 17, 17, 17, 17, 17, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 4, 5, 5, 5, 18, 19, 19, 19,
	19, 20, 20, 21, 22, 22, 23, 23, 24, 24,
	25, 25, 26, 26, 27, 28, 28, 29, 29, 30,
	31, 32, 32, 33, 34, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 38, 38, 39, 39, 39, 39, 40, 40,
	41, 42, 43, 43, 44, 65, 65, 65, 65, 65,
	65, 65, 65, 67, 67, 68, 68, 68, 69, 69,
	70, 71, 72, 72, 73, 73, 73, 73, 73, 74,
	75, 75, 75, 75, 76, 76, 77, 78, 78, 78,
	78, 66, 66, 79, 80, 80, 81, 81, 46, 46,
	46, 46, 46, 47, 47, 47, 47, 47, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 48,
	48, 48, 48, 51, 51, 51, 51, 53, 52, 52,
	52, 52, 52, 50, 49, 49, 49, 49, 49, 49,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 54, 54, 54, 55, 55,
	56, 56, 58, 58, 58, 58, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 84, 61, 61, 62,
	62, 64, 64, 64, 64, 83, 83, 82, 82,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 2, 2, 4, 5,
	4, 6, 6, 6, 7, 7, 7, 3, 1, 3,
	3, 1, 1, 2, 3, 1, 2, 3, 3, 1,
	1, 2, 2, 1, 2, 2, 2, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	6, 6, 6, 7, 7, 7, 6, 5, 7, 8,
	10, 3, 1, 7, 1, 3, 3, 3, 7, 9,
	1, 3, 2, 3, 4, 6, 6, 6, 7, 8,
	4, 6, 9, 4, 9, 4, 9, 7, 8, 6,
	4, 6, 4, 6, 5, 7, 4, 4, 5, 4,
	4, 5, 1, 3, 4, 4, 4, 4, 3, 3,
	2, 4, 1, 2, 4, 8, 7, 5, 4, 10,
	9, 7, 6, 3, 1, 3, 3, 3, 2, 1,
	4, 4, 2, 1, 3, 5, 1, 1, 1, 12,
	10, 8, 9, 7, 2, 1, 4, 1, 1, 1,
	1, 4, 4, 2, 5, 4, 3, 1, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 4,
	5, 4, 5, 4, 5, 4, 5, 4, 4, 1,
	1, 2, 2, 1, 1, 3, 3, 3, 4, 4,
	4, 9, 10, 3, 2, 1, 1, 2, 5, 6,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 4, 5, 4, 5,
	3, 4, 5, 6, 5, 6, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 6, 0, 8, 1, 1,
	3, 1, 1, 1, 1, 3, 1, 3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -6, -3, 119, -10, -7, -24, -27,
	-28, -29, -30, -31, -32, -33, -34, -35, -36, -44,
	-65, -66, -18, -19, -21, 61, 4, 6, 7, 8,
	-4, -5, -79, 30, 29, 34, 37, 38, 53, 32,
	48, 18, -80, 138, -16, -17, -62, -46, 144, -47,
	-64, -45, 139, 120, 121, 122, 123, 64, 65, 66,
	67, 68, 36, 5, 36, 36, 9, 10, 11, 12,
	13, 14, 15, -11, -14, 144, -15, -63, 119, 63,
	-8, 69, -9, -62, -45, -46, 16, 35, 40, 41,
	43, 45, 135, 136, 35, 40, 41, 43, 45, 136,
	135, 35, 30, 144, 144, 42, 36, 144, 143, 20,
	21, 20, 21, 119, 70, 71, 63, 72, 73, -46,
	-62, 139, 139, 139, 139, 139, 36, 36, 36, 36,
	36, 36, 36, 36, 143, 22, 23, 24, 25, 27,
	28, 144, 42, 144, 42, 143, -8, 42, 42, 42,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 33, 139, 131,
	16, 139, -17, 144, -47, -46, -47, -47, -47, -47,
	140, 69, -62, 69, -62, 69, -62, 69, -62, 69,
	-62, 63, -15, 144, 23, 144, 23, 25, 27, 28,
	26, 26, 26, 144, 144, -9, 144, 144, 144, 17,
	139, 77, 42, 139, 44, -37, 47, 50, 51, 139,
	-69, -71, -70, 61, 134, 139, 137, 36, 36, 36,
	36, 36, 36, 36, 39, 37, 31, -63, 139, -83,
	144, -22, -23, 144, 144, -81, 140, -78, -64, -80,
	-46, 144, -62, 140, -62, 140, -62, 140, -62, 140,
	-62, 140, 140, 144, 44, 144, 26, 26, 26, 23,
	23, 23, 19, 144, 120, -25, -26, 144, 139, -63,
	-83, 144, 46, -40, 57, 48, 52, 53, 48, 52,
	53, 49, -67, -68, 93, 132, 133, -71, -70, -72,
	-73, 130, 131, -74, -75, -6, 57, 126, 144, -67,
	-61, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 118, -26, -53, 89, 144, 89,
	-58, -59, 139, -62, 141, 97, 36, -20, -64, 140,
	143, 31, 143, 103, 17, 140, 143, 140, 140, 140,
	140, 140, -12, -13, -62, 23, 23, 23, 144, 144,
	144, 36, 36, 36, 140, 143, -61, -58, 36, 140,
	139, -38, -39, 54, 56, -41, -42, 60, 61, 58,
	44, 49, 44, 44, 44, 49, 44, 44, 48, 52,
	53, 140, 143, 144, 144, 144, 62, -73, -78, 144,
	144, -58, -61, 140, -69, -71, 139, 139, 139, 139,
	139, 36, 36, 144, 36, 144, 36, 90, 91, -58,
	-82, -62, -60, 92, 93, 141, 96, 103, 98, 99,
	100, 101, 102, -62, 97, -63, 140, 143, 33, 144,
	-58, -23, -46, -64, 19, 144, 120, -78, 90, 103,
	144, 144, 144, 44, 44, 44, 36, -51, -26, -53,
	-52, 75, 76, 77, 78, -48, -50, -49, 89, 74,
	75, 76, 141, 79, 140, 42, -83, -40, 143, 55,
	35, 55, 35, -42, -58, -43, -6, 55, 59, 144,
	144, 144, 144, 144, 144, 144, 144, 44, 49, 44,
	44, -69, -71, -68, -61, -61, -61, 36, 36, 103,
	42, 125, 36, 137, -71, 120, 120, 120, 120, 120,
	-52, 36, -58, -58, 140, 140, 143, -64, 94, 95,
	122, -63, 144, 93, 142, 141, -60, -63, 36, -64,
	-63, 139, 36, 36, 36, 36, -13, -62, -12, -12,
	-12, 140, 143, 139, 139, 139, 139, -50, -49, 144,
	-64, 142, 144, 36, -63, 140, -41, -42, -39, 42,
	42, 42, 42, 62, -6, 44, 44, 144, 144, 144,
	144, -71, -78, 144, -72, -61, 140, 140, 140, 143,
	143, 93, 141, -62, -63, 144, -63, 144, -63, 144,
	142, 94, 95, 36, -20, 36, -53, -52, -83, -83,
	-58, 144, -49, 139, 36, 36, -42, 144, 144, 144,
	144, 36, 144, 144, 44, 36, 128, -76, 127, 62,
	-77, 124, -69, -71, 120, 120, -63, 144, 93, -63,
	144, -63, 144, 140, 140, 140, 140, 140, 144, 144,
	57, 127, 62, -77, -72, 126, -58, -71, 140, 140,
	-63, 144, 36, 79, 140, -63, -72, 126, 62, 36,
	125, -84, 144, -57, -54, -55, -56, 80, 81, 82,
	83, 84, 85, 86, 129, 62, 36, 126, -72, 117,
	139, -55, -56, -54, -56, -54, -55, -72, 126, 36,
	144, -56, -55, -56, -54, -55, -54, 62, 36, 140,
	57, -57, 36,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 0, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 0, 0, 0, 0, 0,
	77, 78, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 59, -2, -2, 299, 0,
	193, 195, 0, 301, 302, 303, 304, 0, 0, 0,
	0, 0, 66, 0, 68, 69, 0, 0, 0, 0,
	0, 0, 0, 36, 37, 52, 51, 55, 24, 25,
	26, 0, 28, -2, -2, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 61,
	62, 64, 65, 0, 0, 0, 0, 0, 0, 196,
	194, 0, 0, 0, 0, 0, 67, 70, 71, 72,
	73, 74, 75, 76, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 56, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 300, 188, 196, 189, 190, 191, 192,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 57, 29, 31, 33, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 159, 0, 0, 0, 0, 104, 110, 113,
	115, 144, 181, 182, 0, 0, 0, 0, 0, 0,
	306, 0, 94, 0, 0, 0, 185, 187, -2, 178,
	-2, -2, 0, 199, 0, 201, 0, 203, 0, 205,
	0, 207, 208, 38, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 147, 158, 0,
	163, 0, 0, 166, 167, 168, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 288, 289, 290, 291, 292,
	293, 294, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 87, 0, 92, 0,
	0, 0, 0, 0, 0, 184, 0, 198, 200, 202,
	204, 206, 39, 48, 0, 0, 0, 0, 0, 0,
	0, 80, 81, 82, 0, 0, 102, 0, 111, 0,
	0, 0, 132, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 105, 106, 0, 107, 0, 86, 0, 0, 0,
	0, 308, 0, 0, 0, 0, 0, 278, 279, 280,
	281, 282, 283, 0, 0, 276, 0, 0, 0, 305,
	0, 95, -2, -2, 0, 0, 0, 186, 0, 0,
	41, 42, 43, 0, 0, 0, 98, 0, 101, 213,
	214, 0, 0, 0, 0, 103, 209, 210, 0, 0,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 140, 0, 142, 138, 139, 120,
	0, 126, 129, 122, 0, 127, 130, 0, 0, 0,
	0, 0, 146, 153, 155, 156, 157, 161, 164, 0,
	0, 0, 160, 0, 151, 0, 0, 0, 0, 0,
	217, 108, 254, 255, 253, 0, 0, 256, 0, 0,
	257, 258, 260, 0, 270, 0, 0, 277, 88, 91,
	0, 0, 93, 83, 84, 85, 47, 49, 44, 45,
	46, 0, 0, 0, 0, 0, 0, 211, 212, 0,
	224, 227, 0, 109, 0, 0, 0, 118, 133, 0,
	0, 0, 0, 0, 143, 0, 0, 124, 0, 128,
	131, 145, 0, 0, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 307, 262, 266, 264, 268, 259, 261,
	271, 0, 0, 89, 0, 99, 215, 216, 0, 0,
	0, 0, 223, 0, 112, 114, 116, 134, 136, 135,
	137, 141, 121, 123, 0, 165, 0, 0, 0, 0,
	175, 0, 0, 150, 0, 0, 272, 274, 0, 263,
	267, 265, 269, 0, 218, 219, 220, 0, 0, 125,
	0, 0, 0, 174, 0, 0, 0, 149, 295, 296,
	273, 275, 90, 0, 228, 0, 0, 0, 0, 173,
	0, 0, 0, 229, 230, 231, 232, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 171, 0, 176, 297,
	0, 233, 235, 234, 237, 236, 238, 0, 0, 172,
	0, 239, 240, 241, 242, 243, 244, 0, 170, 221,
	0, 222, 169,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:487
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:497
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DML
			calcVAL.NodePt.Ast.Dml = calcDollar[1].NodePt.Dml

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:507
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DCL
			calcVAL.NodePt.Ast.Dcl = calcDollar[1].NodePt.Dcl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 4:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:517
		{
			// TODO
			fmt.Println("orderByList")
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:527
		{
			// TODO
			fmt.Println("fromStmt")
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:537
		{
			// TODO
			fmt.Println("selectStmt")
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:571
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:579
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:587
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:595
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:603
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:611
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:619
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:627
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:635
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:643
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 17:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:651
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 18:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:659
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 19:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:667
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_CREATE
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:675
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_PSM_DROP
			calcVAL.NodePt.Ddl.Psm = calcDollar[1].NodePt.Psm
		}
	case 21:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:696
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_DELETE
			calcVAL.NodePt.Dml.Delete = calcDollar[1].NodePt.Delete
		}
	case 22:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:704
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_INSERT
			calcVAL.NodePt.Dml.Insert = calcDollar[1].NodePt.Insert
		}
	case 23:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:712
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
			calcVAL.NodePt.Dml.Type = DML_UPDATE
			calcVAL.NodePt.Dml.Update = calcDollar[1].NodePt.Update
		}
	case 24:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:833
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SUBQUERY_NODE
			calcVAL.NodePt.Query = &QueryNode{}
		}
	case 25:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:841
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = true
			calcVAL.NodePt.SelectStmt.DistinctValid = false
		}
	case 26:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:849
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = false
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[2].List.SelectList
		}
	case 27:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:858
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_STMT_NODE

			calcVAL.NodePt.SelectStmt = &SelectStmtNode{}
			calcVAL.NodePt.SelectStmt.StarValid = false
			calcVAL.NodePt.SelectStmt.DistinctValid = true
			calcVAL.NodePt.SelectStmt.SelectList = calcDollar[3].List.SelectList
		}
	case 28:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:871
		{
			calcVAL.List = List{}
			calcVAL.List.Type = SELECT_LIST

			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[1].NodePt.SelectListEntry)
		}
	case 29:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:877
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.SelectList = append(calcVAL.List.SelectList, calcDollar[3].NodePt.SelectListEntry)
		}
	case 30:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:885
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 31:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:894
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_ATTRIBUTE_NAME
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 32:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:904
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 33:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:913
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_AGGREGATION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 34:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:923
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = false
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 35:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:932
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SELECT_LIST_ENTRY

			calcVAL.NodePt.SelectListEntry = &SelectListEntryNode{}
			calcVAL.NodePt.SelectListEntry.Type = SELECT_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.SelectListEntry.AliasValid = true
			calcVAL.NodePt.SelectListEntry.Alias = calcDollar[3].String
			calcVAL.NodePt.SelectListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 36:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:946
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = false
			calcVAL.NodePt.FromStmt.Join = calcDollar[2].NodePt.Join
		}
	case 37:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:954
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_STMT_NODE

			calcVAL.NodePt.FromStmt = &FromStmtNode{}
			calcVAL.NodePt.FromStmt.FromListValid = true
			calcVAL.NodePt.FromStmt.FromList = calcDollar[2].List.FromList
		}
	case 38:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:966
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = CROSS_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 39:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:975
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[3].String
			calcVAL.NodePt.Join.OnList = calcDollar[5].List.OnList
		}
	case 40:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:985
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[4].String
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:994
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_FULL_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 42:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1003
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_LEFT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 43:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1012
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = NATURAL_RIGHT_OUTER_JOIN
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[6].String
		}
	case 44:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1021
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = FULL_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 45:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1031
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = LEFT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 46:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1041
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = JOIN_NODE

			calcVAL.NodePt.Join = &JoinNode{}
			calcVAL.NodePt.Join.Type = RIGHT_OUTER_JOIN_ON
			calcVAL.NodePt.Join.JoinTableNameL = calcDollar[1].String
			calcVAL.NodePt.Join.JoinTableNameR = calcDollar[5].String
			calcVAL.NodePt.Join.OnList = calcDollar[7].List.OnList
		}
	case 47:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1055
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[3].NodePt.OnListEntry)
		}
	case 48:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1059
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ON_LIST

			calcVAL.List.OnList = append(calcVAL.List.OnList, calcDollar[1].NodePt.OnListEntry)
		}
	case 49:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1069
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ON_LIST_ENTRY

			calcVAL.NodePt.OnListEntry = &OnListEntryNode{}
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.OnListEntry.AttriNameWithTableNameR = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 50:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1081
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[3].NodePt.FromListEntry)
		}
	case 51:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1085
		{
			calcVAL.List = List{}
			calcVAL.List.Type = FROM_LIST

			calcVAL.List.FromList = append(calcVAL.List.FromList, calcDollar[1].NodePt.FromListEntry)
		}
	case 52:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1095
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = false

		}
	case 53:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1105
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 54:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1115
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_TABLE
			calcVAL.NodePt.FromListEntry.TableName = calcDollar[1].String
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 55:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1125
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = false
		}
	case 56:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1134
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[2].String
		}
	case 57:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1144
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FROM_LIST_ENTRY

			calcVAL.NodePt.FromListEntry = &FromListEntryNode{}
			calcVAL.NodePt.FromListEntry.Type = FROM_LIST_ENTRY_SUBQUERY
			calcVAL.NodePt.FromListEntry.Query = calcDollar[1].NodePt.Query
			calcVAL.NodePt.FromListEntry.AliasValid = true
			calcVAL.NodePt.FromListEntry.Alias = calcDollar[3].String
		}
	case 58:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1158
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[3].NodePt.OrderByListEntry)
		}
	case 59:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1162
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ORDERBY_LIST

			calcVAL.List.OrderByList = append(calcVAL.List.OrderByList, calcDollar[1].NodePt.OrderByListEntry)
		}
	case 60:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1172
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 61:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1181
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 62:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1190
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_ATTRIBUTE
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 63:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1199
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 64:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1208
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_ASC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 65:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1217
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ORDERBY_LIST_ENTRY

			calcVAL.NodePt.OrderByListEntry = &OrderByListEntryNode{}
			calcVAL.NodePt.OrderByListEntry.Type = ORDER_BY_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.OrderByListEntry.Trend = ORDER_BY_LIST_ENTRY_DESC
			calcVAL.NodePt.OrderByListEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 66:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1262
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 67:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1269
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_BEGIN
		}
	case 68:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1276
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_COMMIT
		}
	case 69:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1283
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_TRANSACTION_ROLLBACK
		}
	case 70:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1290
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TABLES
		}
	case 71:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1297
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_ASSERTIONS
		}
	case 72:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1304
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_VIEWS
		}
	case 73:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1311
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_INDEXS
		}
	case 74:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1318
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_TRIGGERS
		}
	case 75:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1325
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_FUNCTIONS
		}
	case 76:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1332
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_SHOW_PROCEDURES
		}
	case 77:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1339
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 78:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1342
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 79:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1345
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_PSMCALL
			calcVAL.NodePt.Dcl.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 80:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1357
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 81:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1366
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = calcDollar[5].String
		}
	case 82:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1375
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_CREATE_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[3].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[5].Int)
		}
	case 83:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1388
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 84:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1397
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = calcDollar[6].String
		}
	case 85:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1406
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DCL_NODE

			calcVAL.NodePt.Dcl = &DCLNode{}
			calcVAL.NodePt.Dcl.Type = DCL_LOG_USER
			calcVAL.NodePt.Dcl.UserName = calcDollar[4].String
			calcVAL.NodePt.Dcl.Password = strconv.Itoa(calcDollar[6].Int)
		}
	case 86:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1426
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DELETE_NODE

			calcVAL.NodePt.Delete = &DeleteNode{}
			calcVAL.NodePt.Delete.TableName = calcDollar[3].String
			calcVAL.NodePt.Delete.Condition = calcDollar[5].NodePt.Condition
		}
	case 87:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1454
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[4].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = false
		}
	case 88:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1465
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.AttriNameListValid = false
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[5].List.ElementaryValueList
		}
	case 89:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1476
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_SUBQUERY
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 90:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1488
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INSERT_NODE

			calcVAL.NodePt.Insert = &InsertNode{}

			calcVAL.NodePt.Insert.Type = INSERT_FROM_VALUELIST
			calcVAL.NodePt.Insert.TableName = calcDollar[2].String
			calcVAL.NodePt.Insert.ElementaryValueList = calcDollar[8].List.ElementaryValueList
			calcVAL.NodePt.Insert.AttriNameListValid = true
			calcVAL.NodePt.Insert.AttriNameList = calcDollar[4].StringList
		}
	case 91:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1504
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[3].NodePt.ElementaryValue)
		}
	case 92:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1508
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ELEMENTARY_VALUE_LIST

			calcVAL.List.ElementaryValueList = append(calcVAL.List.ElementaryValueList, calcDollar[1].NodePt.ElementaryValue)
		}
	case 93:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1535
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_NODE

			calcVAL.NodePt.Update = &UpdateNode{}
			calcVAL.NodePt.Update.TableName = calcDollar[2].String
			calcVAL.NodePt.Update.Condition = calcDollar[6].NodePt.Condition
			calcVAL.NodePt.Update.UpdateList = calcDollar[4].List.UpdateList
		}
	case 94:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1548
		{
			calcVAL.List = List{}
			calcVAL.List.Type = UPDATE_LIST

			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[1].NodePt.UpdateListEntry)
		}
	case 95:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1554
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.UpdateList = append(calcVAL.List.UpdateList, calcDollar[3].NodePt.UpdateListEntry)
		}
	case 96:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1562
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_EXPRESSION
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.Expression = calcDollar[3].NodePt.Expression
		}
	case 97:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1571
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = UPDATE_LIST_ENTRY

			calcVAL.NodePt.UpdateListEntry = &UpdateListEntryNode{}
			calcVAL.NodePt.UpdateListEntry.Type = UPDATE_LIST_ENTRY_ELEMENTARY_VALUE
			calcVAL.NodePt.UpdateListEntry.AttributeName = calcDollar[1].String
			calcVAL.NodePt.UpdateListEntry.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 98:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1602
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 99:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1617
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 100:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1639
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 101:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1644
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 102:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1652
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 103:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1661
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 104:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1698
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 105:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1717
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 106:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1732
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 107:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1754
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 108:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1762
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 109:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1781
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 110:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1800
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 111:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1819
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 112:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1828
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 113:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1849
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 114:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1867
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 115:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1887
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 116:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1948
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 117:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1969
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 118:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1989
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 119:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2009
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 120:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2032
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 121:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2040
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 122:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2049
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 123:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2057
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 124:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2066
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 125:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2074
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 126:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2083
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 127:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2091
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 128:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2099
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 129:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2107
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 130:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2115
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 131:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2123
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 132:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2135
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 133:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2141
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 134:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2150
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 135:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2158
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 136:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2166
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 137:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2174
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 138:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2186
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 139:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2191
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 140:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2200
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 141:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2207
		{
			calcVAL.List = calcDollar[2].List
		}
	case 142:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2214
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 143:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2220
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 144:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2235
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 145:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2314
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[7].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[8].List.PsmExecList

		}
	case 146:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2328
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 147:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2340
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[4].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[5].List.PsmExecList
		}
	case 148:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2352
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[4].List.PsmExecList
		}
	case 149:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2363
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[9].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[10].List.PsmExecList
		}
	case 150:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2376
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = true
			calcVAL.NodePt.Psm.PsmParameterList = calcDollar[5].List.PsmParameterList
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[9].List.PsmExecList
		}
	case 151:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2388
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = true
			calcVAL.NodePt.Psm.PsmLocalDeclarationList = calcDollar[6].List.PsmLocalDeclarationList
			calcVAL.NodePt.Psm.PsmBody = calcDollar[7].List.PsmExecList
		}
	case 152:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2400
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
			calcVAL.NodePt.Psm.PsmParameterListValid = false
			calcVAL.NodePt.Psm.PsmLocalDeclarationListValid = false
			calcVAL.NodePt.Psm.PsmBody = calcDollar[6].List.PsmExecList
		}
	case 153:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2415
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[3].NodePt.PsmParameterEntry)
		}
	case 154:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2419
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_PARAMETER_LIST

			calcVAL.List.PsmParameterList = append(calcVAL.List.PsmParameterList, calcDollar[1].NodePt.PsmParameterEntry)
		}
	case 155:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2429
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_IN
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain

		}
	case 156:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2440
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_OUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 157:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2449
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_PARAMETER_ENTRY_NODE

			calcVAL.NodePt.PsmParameterEntry = &PsmParameterEntryNode{}
			calcVAL.NodePt.PsmParameterEntry.Type = PSM_PARAMETER_INOUT
			calcVAL.NodePt.PsmParameterEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmParameterEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 158:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2462
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[2].NodePt.PsmLocalDeclarationEntry)
		}
	case 159:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2466
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_LOCAL_DECLARATION_LIST

			calcVAL.List.PsmLocalDeclarationList = append(calcVAL.List.PsmLocalDeclarationList, calcDollar[1].NodePt.PsmLocalDeclarationEntry)
		}
	case 160:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2476
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_LOCAL_DECLARATION_ENTRY_NODE

			calcVAL.NodePt.PsmLocalDeclarationEntry = &PsmLocalDeclarationEntryNode{}
			calcVAL.NodePt.PsmLocalDeclarationEntry.Name = calcDollar[2].String
			calcVAL.NodePt.PsmLocalDeclarationEntry.Domain = calcDollar[3].NodePt.Domain
		}
	case 161:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2488
		{
			calcVAL.List = calcDollar[2].List
		}
	case 162:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2495
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 163:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2500
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 164:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2510
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 165:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2518
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 166:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2527
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 167:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2535
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 168:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2543
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 169:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:2555
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Query = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 170:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:2569
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 171:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2582
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 172:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:2594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 173:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:2606
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 174:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2621
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 175:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2625
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 176:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2635
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 177:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2647
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 178:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2655
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCall = calcDollar[1].NodePt.Psm
		}
	case 179:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2663
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 180:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2671
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 181:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2691
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_FUNCTION
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 182:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2699
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.Type = PSM_PROCEDURE
			calcVAL.NodePt.Psm.PsmName = calcDollar[3].String
		}
	case 183:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2728
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 184:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2735
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 185:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2744
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 186:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2756
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 187:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2760
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 188:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2789
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 189:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2798
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 190:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2807
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 191:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2816
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 192:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2825
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 193:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2838
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 194:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2847
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 195:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2856
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 196:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2865
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 197:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2874
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 198:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2904
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 199:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2913
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 200:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2922
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 201:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2931
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 202:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2940
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 203:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2949
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 204:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2958
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 205:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2967
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 206:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2976
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 207:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2985
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 208:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2994
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 209:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3075
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 210:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3080
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 211:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3085
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 212:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3089
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 213:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3097
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 214:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3102
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 215:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3107
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 216:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3111
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 217:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3119
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 218:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3128
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 219:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3137
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 220:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3146
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 221:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:3155
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 222:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:3166
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 223:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3194
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 224:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3203
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 225:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3212
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 226:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3220
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 227:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3228
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 228:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3236
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 229:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3246
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 230:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3273
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 231:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3283
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 232:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3293
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 233:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3303
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 234:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3314
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 235:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3325
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 236:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3336
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 237:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3347
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 238:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3358
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 239:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3369
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 240:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3381
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 241:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3393
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 242:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3405
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 243:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3417
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 244:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3429
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 245:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3445
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 246:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3450
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 247:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3455
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 248:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3464
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 249:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3469
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 250:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3478
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 251:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3483
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 252:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3502
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 253:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3510
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 254:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3513
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 255:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3522
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 256:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3573
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 257:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3584
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 258:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3596
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 259:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3606
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 260:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3616
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 261:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 262:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3636
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 263:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3647
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 264:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3658
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[4].NodePt.Query
		}
	case 265:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3669
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 266:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3680
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 267:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3691
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 268:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3702
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 269:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3713
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 270:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3724
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 271:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3733
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 272:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3742
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[5].NodePt.Query
		}
	case 273:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3752
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Query = calcDollar[6].NodePt.Query
		}
	case 274:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:3762
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 275:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3772
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 276:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:3782
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[2].NodePt.Query
		}
	case 277:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3791
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Query = calcDollar[3].NodePt.Query
		}
	case 278:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3804
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 279:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3809
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 280:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3814
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 281:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3819
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 282:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3824
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 283:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3829
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 284:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3859
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 285:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3866
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 286:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3874
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 287:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:3882
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 288:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3890
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 289:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3897
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 290:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3904
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 291:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3911
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 292:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3918
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 293:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3925
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 294:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3932
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 295:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3939
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 296:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:3948
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 297:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:3957
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 298:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3964
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 299:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:3983
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 300:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:3990
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 301:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4013
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 302:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4020
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 303:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4027
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 304:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4034
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 305:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4059
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 306:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4062
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 307:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:4069
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 308:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:4073
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
