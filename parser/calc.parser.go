// Code generated by goyacc -o parser/calc.parser.go -p calc parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:2
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:2

import (
	"fmt"
)

// -------------------- Node --------------------
type NodeEnum uint8

const (
	/* ast */
	AST_NODE NodeEnum = 1

	/* ddl */
	DDL_NODE     NodeEnum = 2
	TABLE_NODE   NodeEnum = 3
	ASSERT_NODE  NodeEnum = 4
	VIEW_NODE    NodeEnum = 5
	INDEX_NODE   NodeEnum = 6
	TRIGGER_NODE NodeEnum = 7

	/* dql */
	DQL_NODE           NodeEnum = 9
	QUERY_NODE         NodeEnum = 10
	SELECT_LIST_ENTRY  NodeEnum = 11
	FROM_LIST_ENTRY    NodeEnum = 12
	ON_LIST_ENTRY      NodeEnum = 13
	ORDERBY_LIST_ENTRY NodeEnum = 14

	/* dcl */
	DCL_NODE NodeEnum = 15

	/* dml */
	DML_NODE          NodeEnum = 16
	UPDATE_NODE       NodeEnum = 17
	UPDATE_LIST_ENTRY NodeEnum = 18
	INSERT_NODE       NodeEnum = 19
	DELETE_NODE       NodeEnum = 20

	/* constraint */
	CONSTRAINT_NODE            NodeEnum = 23
	CONSTRAINT_DEFERRABLE_ENUM NodeEnum = 30
	CONSTRAINT_UPDATE_SET_ENUM NodeEnum = 31
	CONSTRAINT_DELETE_SET_ENUM NodeEnum = 32
	FOREIGNKEY_PARAMETER_NODE  NodeEnum = 37

	/* AttriNameOptionTableName */
	ATTRINAME_OPTION_TABLENAME_NODE NodeEnum = 33

	/* elementaryValue */
	ELEMENTARY_VALUE_NODE NodeEnum = 24

	/* domain */
	DOMAIN_NODE NodeEnum = 21

	CONDITION_NODE   NodeEnum = 25
	PREDICATE_NODE   NodeEnum = 26
	EXPRESSION_ENTRY NodeEnum = 28

	/* predicate */
	COMPAREMARK_ENUM NodeEnum = 34

	/* subquery */
	SUBQUERY_NODE NodeEnum = 35

	/* createTable */
	ATTRIBUTE_DECLARATION_NODE NodeEnum = 36

	/* createTrigger */
	TRIGGER_FOR_EACH_ENUM    NodeEnum = 38
	TRIGGER_OLDNEW_ENTRY     NodeEnum = 39
	TRIGGER_BEFOREAFTER_NODE NodeEnum = 40

	/* expression */
	EXPRESSION_NODE       NodeEnum = 41
	EXPRESSION_ENTRY_NODE NodeEnum = 42

	/* aggregation */
	AGGREGATION_NODE NodeEnum = 43

	/* psm */
	PSM_NODE              NodeEnum = 8
	PSM_VALUE_NODE        NodeEnum = 44
	PSM_EXEC_ENTRY_NODE   NodeEnum = 45
	PSM_FOR_LOOP_NODE     NodeEnum = 46
	PSM_BRANCH_NODE       NodeEnum = 47
	PSM_ELSEIF_ENTRY_NODE NodeEnum = 48
)

type Node struct {
	Type NodeEnum

	/* ast */
	Ast *ASTNode
	Ddl *DDLNode
	Dql *DQLNode
	Dcl *DCLNode
	Dml *DMLNode

	/* ddl */
	Table   *TableNode
	Assert  *AssertNode
	View    *ViewNode
	Index   *IndexNode
	Trigger *TriggerNode

	/* dql */
	Query            *QueryNode
	SelectListEntry  *SelectListEntryNode
	FromListEntry    *FromListEntryNode
	OnListEntry      *OnListEntryNode
	OrderByListEntry *OrderByListEntryNode

	/* dml */
	Update          *UpdateNode
	UpdateListEntry *UpdateListEntryNode
	Insert          *InsertNode
	DeleteNode      *DeleteNode

	/* createTable */
	AttributeDeclaration *AttributeDeclarationNode

	/* constraint */
	ConstraintDeferrable ConstraintDeferrableEnum
	ConstraintUpdateSet  ConstraintUpdateSetEnum
	ConstraintDeleteSet  ConstraintDeleteSetEnum
	Constraint           *ConstraintNode
	ForeignKeyParameter  *ForeignKeyParameterNode

	/* aggregation */
	Aggregation *AggregationNode

	/* condition */
	Condition *ConditionNode

	/* predicate */
	Predicate   *PredicateNode
	CompareMark CompareMarkEnum

	/* attriNameOptionTableName */
	AttriNameOptionTableName *AttriNameOptionTableNameNode

	/* elementaryValue */
	ElementaryValue *ElementaryValueNode

	/* domain */
	Domain *DomainNode

	/* trigger */
	TriggerForEach         TriggerForEachEnum
	TriggerOldNewEntry     *TriggerOldNewEntryNode
	TriggerBeforeAfterStmt *TriggerBeforeAfterStmtNode

	/* expression */
	Expression      *ExpressionNode
	ExpressionEntry *ExpressionEntryNode

	/* psm */
	Psm            *PsmNode
	PsmValue       *PsmValueNode
	PsmExecEntry   *PsmExecEntryNode
	PsmForLoop     *PsmForLoopNode
	PsmBranch      *PsmBranchNode
	PsmElseifEntry *PsmElseifEntryNode

	/* public */
	Subquery *QueryNode
}

// -------------------- List --------------------
type ListEnum uint8

const (
	CONSTRAINT_AFTER_ATTRIBUTE_LIST ListEnum = 1
	CONSTRAINT_LIST                 ListEnum = 2
	ATTRINAME_OPTION_TABLENAME_LIST ListEnum = 3
	ATTRIBUTE_DECLARATION_LIST      ListEnum = 4
	TRIGGER_OLDNEW_LIST             ListEnum = 5
	DML_LIST                        ListEnum = 6
	PSM_VALUE_LIST                  ListEnum = 7
	PSM_EXEC_LIST                   ListEnum = 8
	PSM_ELSEIF_LIST                 ListEnum = 9
)

type List struct {
	Type                         ListEnum
	ConstraintAfterAttributeList []*ConstraintNode
	ConstraintList               []*ConstraintNode
	AttriNameOptionTableNameList []*AttriNameOptionTableNameNode
	AttributeDeclarationList     []*AttributeDeclarationNode
	TriggerOldNewList            []*TriggerOldNewEntryNode
	DmlList                      []*DMLNode
	PsmValueList                 []*PsmValueNode
	PsmExecList                  []*PsmExecEntryNode
	PsmElseifList                []*PsmElseifEntryNode
}

// -------------------- temporary struct --------------------
// temporary struct, not included in AST, assistant grammar.y to generate AST

// attributeDeclaration
type AttributeDeclarationNode struct {
	AttributeName                     string
	Domain                            *DomainNode
	ConstraintAfterAttributeListValid bool
	ConstraintAfterAttributeList      []*ConstraintNode
}

// foreignKeyParameter
type ForeignKeyParameterNode struct {
	DeferrableValid bool
	Deferrable      ConstraintDeferrableEnum
	UpdateSetValid  bool
	UpdateSet       ConstraintUpdateSetEnum
	DeleteSetValid  bool
	DeleteSet       ConstraintDeleteSetEnum
}

// triggerBeforeAfterStmt
type TriggerBeforeAfterStmtNode struct {
	BeforeAfterType      TriggerBeforeAfterEnum
	BeforeAfterAttriName string
	BeforeAfterTableName string
}

//line parser/grammar.y:230
type calcSymType struct {
	yys        int
	NodePt     *Node
	List       List
	Int        int
	Float      float64
	String     string
	StringList []string
	Boolean    bool
}

const CREATE = 57346
const TABLE = 57347
const SEMICOLON = 57348
const DROP = 57349
const ALTER = 57350
const ADD = 57351
const ASSERTION = 57352
const VIEW = 57353
const AS = 57354
const INDEX = 57355
const ON = 57356
const TRIGGER = 57357
const REFERENCING = 57358
const BEFORE = 57359
const UPDATE = 57360
const OF = 57361
const AFTER = 57362
const INSTEAD = 57363
const INSERT = 57364
const DELETE = 57365
const OLD = 57366
const ROW = 57367
const NEW = 57368
const FOR = 57369
const EACH = 57370
const STATEMENT = 57371
const WHEN = 57372
const BEGINTOKEN = 57373
const END = 57374
const STAR = 57375
const SUM = 57376
const AVG = 57377
const MIN = 57378
const MAX = 57379
const COUNT = 57380
const DISTINCT = 57381
const PLUS = 57382
const SUBTRACT = 57383
const DIVISION = 57384
const CONCATENATION = 57385
const DEFAULT = 57386
const UNIQUE = 57387
const PRIMARYKEY = 57388
const CHECK = 57389
const FOREIGNKEY = 57390
const REFERENCES = 57391
const NOT_DEFERRABLE = 57392
const DEFERED_DEFERRABLE = 57393
const IMMEDIATE_DEFERRABLE = 57394
const UPDATE_NULL = 57395
const UPDATE_CASCADE = 57396
const DELETE_NULL = 57397
const DELETE_CASCADE = 57398
const DEFERRED = 57399
const IMMEDIATE = 57400
const CONSTRAINT = 57401
const AND = 57402
const OR = 57403
const LIKE = 57404
const IN = 57405
const ALL = 57406
const ANY = 57407
const IS = 57408
const EXISTS = 57409
const NOTEQUAL = 57410
const LESS = 57411
const GREATER = 57412
const LESSEQUAL = 57413
const GREATEREQUAL = 57414
const EQUAL = 57415
const CHAR = 57416
const VARCHAR = 57417
const BIT = 57418
const BITVARYING = 57419
const BOOLEAN = 57420
const INT = 57421
const INTEGER = 57422
const SHORTINT = 57423
const FLOAT = 57424
const REAL = 57425
const DOUBLEPRECISION = 57426
const DECIMAL = 57427
const NUMERIC = 57428
const DATE = 57429
const TIME = 57430
const DOT = 57431
const INTVALUE = 57432
const FLOATVALUE = 57433
const STRINGVALUE = 57434
const BOOLVALUE = 57435
const ELSEIF = 57436
const THEN = 57437
const IF = 57438
const ELSE = 57439
const CURSOR = 57440
const DO = 57441
const RETURN = 57442
const SET = 57443
const CALL = 57444
const LPAREN = 57445
const RPAREN = 57446
const NOT = 57447
const NULLMARK = 57448
const COMMA = 57449
const ID = 57450

var calcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CREATE",
	"TABLE",
	"SEMICOLON",
	"DROP",
	"ALTER",
	"ADD",
	"ASSERTION",
	"VIEW",
	"AS",
	"INDEX",
	"ON",
	"TRIGGER",
	"REFERENCING",
	"BEFORE",
	"UPDATE",
	"OF",
	"AFTER",
	"INSTEAD",
	"INSERT",
	"DELETE",
	"OLD",
	"ROW",
	"NEW",
	"FOR",
	"EACH",
	"STATEMENT",
	"WHEN",
	"BEGINTOKEN",
	"END",
	"STAR",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"DISTINCT",
	"PLUS",
	"SUBTRACT",
	"DIVISION",
	"CONCATENATION",
	"DEFAULT",
	"UNIQUE",
	"PRIMARYKEY",
	"CHECK",
	"FOREIGNKEY",
	"REFERENCES",
	"NOT_DEFERRABLE",
	"DEFERED_DEFERRABLE",
	"IMMEDIATE_DEFERRABLE",
	"UPDATE_NULL",
	"UPDATE_CASCADE",
	"DELETE_NULL",
	"DELETE_CASCADE",
	"DEFERRED",
	"IMMEDIATE",
	"CONSTRAINT",
	"AND",
	"OR",
	"LIKE",
	"IN",
	"ALL",
	"ANY",
	"IS",
	"EXISTS",
	"NOTEQUAL",
	"LESS",
	"GREATER",
	"LESSEQUAL",
	"GREATEREQUAL",
	"EQUAL",
	"CHAR",
	"VARCHAR",
	"BIT",
	"BITVARYING",
	"BOOLEAN",
	"INT",
	"INTEGER",
	"SHORTINT",
	"FLOAT",
	"REAL",
	"DOUBLEPRECISION",
	"DECIMAL",
	"NUMERIC",
	"DATE",
	"TIME",
	"DOT",
	"INTVALUE",
	"FLOATVALUE",
	"STRINGVALUE",
	"BOOLVALUE",
	"ELSEIF",
	"THEN",
	"IF",
	"ELSE",
	"CURSOR",
	"DO",
	"RETURN",
	"SET",
	"CALL",
	"LPAREN",
	"RPAREN",
	"NOT",
	"NULLMARK",
	"COMMA",
	"ID",
}

var calcStatenames = [...]string{}

const calcEofCode = 1
const calcErrCode = 2
const calcInitialStackSize = 16

//line parser/grammar.y:2866

//line yacctab:1
var calcExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 72,
	6, 81,
	104, 81,
	107, 81,
	-2, 95,
	-1, 74,
	6, 83,
	104, 83,
	107, 83,
	-2, 98,
	-1, 75,
	6, 84,
	104, 84,
	107, 84,
	-2, 201,
}

const calcPrivate = 57344

const calcLast = 636

var calcAct = [...]int{
	451, 452, 36, 35, 453, 271, 86, 454, 317, 81,
	219, 310, 205, 41, 267, 147, 270, 316, 125, 209,
	201, 175, 230, 134, 71, 18, 19, 20, 21, 22,
	91, 68, 148, 148, 80, 472, 450, 66, 70, 58,
	61, 63, 65, 67, 442, 18, 19, 20, 21, 22,
	148, 366, 305, 89, 135, 136, 72, 439, 138, 74,
	140, 141, 142, 143, 144, 139, 88, 105, 90, 303,
	108, 59, 110, 148, 112, 430, 114, 148, 222, 220,
	429, 76, 77, 78, 79, 319, 320, 321, 427, 146,
	323, 64, 300, 28, 83, 131, 240, 137, 133, 75,
	145, 76, 77, 78, 79, 124, 59, 18, 19, 20,
	21, 22, 426, 28, 83, 166, 319, 320, 321, 75,
	62, 323, 148, 72, 148, 148, 74, 221, 202, 167,
	59, 318, 183, 60, 57, 436, 184, 185, 264, 89,
	89, 238, 425, 236, 194, 72, 322, 435, 74, 210,
	264, 181, 193, 189, 174, 176, 177, 178, 179, 424,
	59, 413, 199, 76, 77, 78, 79, 204, 206, 198,
	401, 311, 312, 313, 314, 400, 83, 322, 399, 398,
	386, 59, 378, 264, 218, 220, 70, 25, 375, 59,
	26, 27, 367, 352, 351, 368, 377, 350, 234, 349,
	348, 347, 59, 59, 346, 345, 235, 237, 331, 290,
	261, 239, 288, 89, 24, 59, 207, 18, 19, 20,
	21, 22, 263, 244, 223, 264, 245, 224, 420, 334,
	241, 202, 296, 187, 202, 182, 188, 419, 298, 169,
	42, 89, 103, 72, 102, 229, 74, 101, 299, 291,
	295, 100, 99, 98, 97, 96, 309, 95, 302, 304,
	94, 93, 85, 84, 56, 479, 308, 197, 196, 232,
	448, 129, 130, 447, 129, 130, 339, 446, 332, 340,
	438, 418, 89, 42, 417, 28, 333, 342, 443, 416,
	180, 42, 129, 130, 173, 172, 403, 360, 171, 70,
	357, 170, 44, 168, 151, 116, 115, 231, 359, 43,
	228, 233, 113, 37, 38, 437, 111, 365, 329, 109,
	106, 464, 415, 42, 374, 42, 372, 371, 362, 370,
	69, 369, 328, 373, 327, 402, 186, 326, 376, 388,
	325, 42, 324, 265, 203, 44, 385, 149, 104, 389,
	387, 33, 43, 44, 32, 395, 37, 38, 31, 226,
	43, 30, 29, 70, 37, 38, 433, 294, 406, 129,
	130, 405, 129, 130, 76, 77, 78, 79, 412, 408,
	409, 89, 410, 411, 414, 44, 361, 44, 394, 297,
	441, 192, 43, 423, 43, 152, 37, 38, 37, 38,
	440, 383, 148, 44, 364, 382, 432, 128, 381, 70,
	43, 190, 191, 380, 37, 38, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 231,
	260, 379, 293, 44, 107, 70, 471, 76, 77, 78,
	79, 126, 445, 242, 243, 44, 140, 141, 142, 143,
	144, 139, 301, 195, 150, 467, 469, 465, 273, 470,
	466, 468, 311, 312, 313, 314, 129, 130, 460, 461,
	476, 474, 478, 473, 477, 475, 220, 458, 459, 274,
	480, 455, 456, 457, 458, 459, 460, 461, 455, 456,
	457, 272, 273, 460, 461, 458, 459, 460, 461, 455,
	456, 457, 458, 459, 455, 456, 457, 311, 312, 313,
	314, 121, 343, 208, 338, 449, 344, 292, 119, 120,
	122, 123, 336, 268, 210, 269, 283, 431, 214, 397,
	284, 285, 215, 216, 337, 217, 211, 396, 356, 353,
	212, 213, 335, 155, 354, 279, 156, 157, 275, 50,
	280, 355, 282, 276, 51, 52, 45, 53, 463, 54,
	281, 46, 47, 278, 48, 462, 49, 277, 153, 393,
	392, 391, 390, 330, 127, 164, 444, 163, 434, 428,
	422, 421, 407, 404, 384, 363, 358, 306, 289, 287,
	286, 262, 225, 162, 161, 160, 159, 158, 118, 117,
	92, 34, 55, 73, 23, 82, 3, 132, 165, 4,
	227, 40, 39, 5, 246, 87, 307, 315, 17, 341,
	266, 154, 16, 15, 14, 13, 12, 11, 10, 9,
	8, 7, 200, 6, 2, 1,
}

var calcPact = [...]int{
	183, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 259, 258,
	255, 251, 248, 595, 314, 551, 544, 597, 156, 95,
	94, 81, 52, -2, -1000, 298, -1000, -9, 155, -1000,
	-1000, -1000, 154, -37, 594, 153, 152, 149, 147, 146,
	145, 144, 143, 139, 136, 134, 245, 107, 216, 345,
	107, 215, 107, 212, 107, 208, 107, 202, 201, 593,
	-1000, 592, -1000, -1000, -1000, 345, -1000, -1000, -1000, -1000,
	478, -1000, -1000, 73, 368, 562, 312, -1000, -37, -8,
	22, 313, -1000, 244, 407, 292, 554, 526, 591, 590,
	589, 588, 587, 568, 11, 199, -1000, 131, 197, -1000,
	194, -1000, 191, -1000, 190, -1000, -1000, -1000, -1000, 73,
	73, 73, 73, 73, 186, -1000, -9, 127, 314, -37,
	-37, 232, 129, -8, 347, 299, 36, 390, 162, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, 313, -1000, -1000, 123,
	241, 313, 60, 108, 497, 518, 510, 516, -1000, -1000,
	-1000, -1000, -1000, 20, 19, 120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 586, 261, 213, -1000, -1000, -1000, 206, 107, -1000,
	35, 33, -1000, -1000, -1000, -12, -1000, 124, 379, -1000,
	119, -1000, 342, -37, 585, 118, -1000, 240, 499, 461,
	451, 534, 553, 549, 531, 546, 538, 508, 584, 583,
	104, 582, 101, -1000, -9, -1000, 490, 335, 314, 293,
	-1000, -37, -16, 389, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -39, -56, 581, 126, 72, -1000, 239, 237,
	234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, 229,
	-1000, 214, -1000, 561, 100, 60, 122, -1000, 517, 509,
	427, -1000, -37, 344, 487, 97, 96, 93, 92, 91,
	89, 86, 85, 525, 537, 524, -1000, -1000, 462, -1000,
	580, -1000, 313, 314, 290, -1000, 296, 579, 309, -1000,
	-1000, -57, -1000, -1000, -1000, -1000, -1000, 88, -1000, -1000,
	-1000, 228, 226, 224, 223, 72, -1000, -1000, 80, 284,
	-1000, -1000, 90, 74, 341, 323, 318, 315, 311, 578,
	313, -1000, 76, 461, 499, 560, 559, 558, 557, -1000,
	406, 356, -1000, -1000, -1000, -1000, 523, -1000, -1000, -1000,
	515, -1000, -1000, 71, 70, 67, 62, -1000, -1000, 236,
	264, 577, 275, -1000, 314, -1000, -1000, 576, 417, 60,
	60, -37, 53, -1000, -1000, 41, -1000, -1000, 219, 185,
	180, 177, 130, 121, -1000, 575, 574, 427, -1000, -1000,
	51, 34, 4, -20, 573, -1000, -28, -33, -1000, 513,
	-1000, -1000, 314, 270, -1000, 572, 314, -1000, -1000, -1000,
	43, 31, 211, 176, -1000, -51, -1000, -1000, -1000, 310,
	300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -64, 256, 570, -1000, -1000, -1000, -1000, 393, 173,
	169, 166, -1000, 488, -1000, -72, 431, -1000, -1000, 552,
	218, -1000, 442, 438, 449, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 349, -1000, -73, 413, 424, 413, 454, 424,
	454, -1000, 161, -1000, -1000, -1000, -1000, -1000, -1000, 431,
	-1000,
}

var calcPgo = [...]int{
	0, 635, 634, 13, 633, 632, 20, 631, 630, 629,
	628, 627, 626, 625, 624, 623, 622, 621, 620, 14,
	19, 16, 5, 619, 618, 605, 21, 34, 617, 8,
	17, 616, 11, 10, 1, 4, 7, 0, 6, 615,
	23, 614, 9, 15, 18, 613, 3, 2, 612, 611,
	610, 22, 24, 609, 603, 608, 607, 12, 565,
}

var calcR1 = [...]int{
	0, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 7, 8, 8, 9, 9, 10,
	11, 12, 12, 13, 14, 15, 16, 16, 16, 16,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 18, 18, 19, 19, 19, 19, 20, 20,
	21, 22, 23, 23, 24, 45, 46, 46, 47, 47,
	47, 47, 47, 48, 49, 49, 49, 49, 50, 50,
	51, 52, 52, 52, 52, 53, 54, 54, 55, 55,
	26, 26, 26, 26, 26, 27, 27, 27, 27, 27,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 28, 28, 28, 28, 31, 31, 31, 31, 33,
	32, 32, 32, 32, 32, 30, 29, 29, 29, 29,
	29, 29, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 34, 34, 34,
	35, 35, 36, 36, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 58, 41,
	41, 42, 42, 43, 44, 44, 44, 44, 57, 57,
	56, 56,
}

var calcR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 7, 9,
	1, 3, 2, 3, 4, 6, 6, 6, 7, 8,
	4, 6, 9, 4, 9, 4, 9, 7, 8, 6,
	4, 6, 4, 6, 5, 7, 4, 4, 5, 4,
	4, 5, 1, 3, 4, 4, 4, 4, 3, 3,
	2, 4, 1, 2, 4, 4, 2, 1, 3, 5,
	1, 1, 1, 12, 10, 8, 9, 7, 2, 1,
	4, 1, 1, 1, 1, 2, 5, 4, 3, 1,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
	4, 1, 1, 2, 2, 1, 1, 3, 3, 3,
	4, 4, 4, 9, 10, 3, 2, 1, 1, 2,
	5, 6, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 4, 5,
	4, 5, 3, 4, 5, 6, 5, 6, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 0, 8,
	1, 1, 3, 1, 1, 1, 1, 1, 3, 1,
	3, 1,
}

var calcChk = [...]int{
	-1000, -1, -2, -25, -53, -45, -4, -7, -8, -9,
	-10, -11, -12, -13, -14, -15, -16, -24, 34, 35,
	36, 37, 38, -54, 31, 4, 7, 8, 102, 103,
	103, 103, 103, 103, 6, -46, -47, 100, 101, -48,
	-49, -3, 27, 96, 89, 5, 10, 11, 13, 15,
	5, 10, 11, 13, 15, 5, 108, 39, -42, 108,
	39, -42, 39, -42, 39, -42, 39, -42, 33, 32,
	-47, -52, -44, -54, -26, 108, 90, 91, 92, 93,
	-27, -42, -25, 103, 108, 108, -38, -39, 103, -42,
	105, 67, 6, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 103, -42, 104, 89, -42, 104,
	-42, 104, -42, 104, -42, 104, 104, 6, 6, 40,
	41, 33, 42, 43, -26, -44, 73, 12, 95, 60,
	61, -38, -56, -42, -40, 62, 63, 105, 66, 73,
	68, 69, 70, 71, 72, -42, 67, -43, 89, 103,
	47, 12, 103, 14, -17, 17, 20, 21, 6, 6,
	6, 6, 6, 9, 7, -55, 104, -52, 104, 108,
	104, 104, 104, 104, -27, -26, -27, -27, -27, -27,
	104, -52, 108, -46, -38, -38, 104, 104, 107, -44,
	64, 65, 92, -43, 108, 63, 106, 105, -40, -43,
	-5, -6, 108, 103, -43, -57, 108, 108, 16, -20,
	27, 18, 22, 23, 18, 22, 23, 19, -6, -33,
	59, 108, 59, 104, 107, 6, 98, -50, 97, 32,
	-51, 94, 63, 105, -42, -43, 108, -43, 108, -43,
	108, 106, 64, 65, 104, 107, -41, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	88, -38, 6, 104, 107, 103, -18, -19, 24, 26,
	-21, -22, 30, 31, 28, 14, 19, 14, 14, 14,
	19, 14, 14, 18, 22, 23, 6, 6, 108, 6,
	108, -52, 27, 97, 32, -51, -46, 96, -38, -43,
	108, 63, -43, 108, -43, 108, 6, -31, -6, -33,
	-32, 45, 46, 47, 48, -28, -30, -29, 59, 44,
	45, 46, 105, 49, 103, 103, 103, 103, 103, 104,
	12, 108, -57, -20, 107, 25, 5, 25, 5, -22,
	-38, -23, -3, 25, 29, 108, 108, 108, 108, 108,
	108, 108, 108, 14, 19, 14, 14, -32, 6, -43,
	-46, 96, 32, 6, 95, -43, 108, 104, 107, 103,
	103, 103, 103, -30, -29, 108, -44, 106, 108, 90,
	90, 90, 90, 90, 6, -43, 104, -21, -22, -19,
	12, 12, 12, 12, 32, -3, 14, 14, 108, 108,
	108, 108, 99, 32, 6, 96, -46, 6, -33, -32,
	-57, -57, -38, 108, -29, 103, 104, 104, 104, 107,
	107, 6, 6, -22, 108, 108, 108, 108, 6, 108,
	108, 14, -46, 96, 6, 104, 104, 104, 104, 108,
	90, 90, 108, 32, 6, 49, 104, 104, 104, 27,
	108, -37, -34, -35, -36, 50, 51, 52, 53, 54,
	55, 56, -58, 6, 103, -35, -36, -34, -36, -34,
	-35, 87, 108, -36, -35, -36, -34, -35, -34, 104,
	-37,
}

var calcDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 67, 0, 0, 70,
	71, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, -2, 82, -2, -2, 204, 205, 206, 207,
	0, 96, 97, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 17, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 103,
	0, 105, 0, 107, 0, 109, 110, 65, 68, 0,
	0, 0, 0, 0, 98, 95, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 180,
	181, 182, 183, 184, 185, 0, 0, 178, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 24, 30,
	33, 35, 64, 0, 0, 0, 87, 89, 100, 202,
	102, 104, 106, 108, 90, 98, 91, 92, 93, 94,
	99, 0, 0, 0, 156, 157, 155, 0, 0, 158,
	0, 0, 159, 160, 162, 0, 172, 0, 0, 179,
	0, 20, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 69, 0, 0, 0, 0,
	79, 0, 0, 0, 210, 164, 168, 166, 170, 161,
	163, 173, 0, 0, 0, 0, 22, 186, 0, 0,
	0, 190, 191, 192, 193, 194, 195, 196, 0, 0,
	200, 0, 31, 0, 0, 0, 0, 52, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 26, 0, 27,
	0, 88, 0, 0, 0, 78, 0, 0, 0, 174,
	176, 0, 165, 169, 167, 171, 18, 0, 21, 115,
	116, 0, 0, 0, 0, 23, 111, 112, 0, 0,
	127, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 37,
	60, 0, 62, 58, 59, 40, 0, 46, 49, 42,
	0, 47, 50, 0, 0, 0, 0, 119, 28, 0,
	0, 0, 0, 77, 0, 175, 177, 0, 0, 0,
	0, 0, 0, 113, 114, 0, 126, 129, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 38, 53,
	0, 0, 0, 0, 0, 63, 0, 0, 44, 0,
	48, 51, 0, 0, 75, 0, 80, 19, 117, 118,
	0, 0, 0, 0, 125, 0, 187, 188, 189, 0,
	0, 32, 34, 36, 54, 56, 55, 57, 61, 41,
	43, 0, 0, 0, 76, 120, 121, 122, 0, 0,
	0, 0, 45, 0, 74, 0, 130, 197, 198, 0,
	0, 131, 132, 133, 134, 147, 148, 149, 150, 151,
	152, 153, 0, 73, 0, 135, 137, 136, 139, 138,
	140, 199, 0, 141, 142, 143, 144, 145, 146, 123,
	124,
}

var calcTok1 = [...]int{
	1,
}

var calcTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108,
}

var calcTok3 = [...]int{
	0,
}

var calcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	calcDebug        = 0
	calcErrorVerbose = false
)

type calcLexer interface {
	Lex(lval *calcSymType) int
	Error(s string)
}

type calcParser interface {
	Parse(calcLexer) int
	Lookahead() int
}

type calcParserImpl struct {
	lval  calcSymType
	stack [calcInitialStackSize]calcSymType
	char  int
}

func (p *calcParserImpl) Lookahead() int {
	return p.char
}

func calcNewParser() calcParser {
	return &calcParserImpl{}
}

const calcFlag = -1000

func calcTokname(c int) string {
	if c >= 1 && c-1 < len(calcToknames) {
		if calcToknames[c-1] != "" {
			return calcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func calcStatname(s int) string {
	if s >= 0 && s < len(calcStatenames) {
		if calcStatenames[s] != "" {
			return calcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func calcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !calcErrorVerbose {
		return "syntax error"
	}

	for _, e := range calcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + calcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := calcPact[state]
	for tok := TOKSTART; tok-1 < len(calcToknames); tok++ {
		if n := base + tok; n >= 0 && n < calcLast && calcChk[calcAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if calcDef[state] == -2 {
		i := 0
		for calcExca[i] != -1 || calcExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; calcExca[i] >= 0; i += 2 {
			tok := calcExca[i]
			if tok < TOKSTART || calcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if calcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += calcTokname(tok)
	}
	return res
}

func calclex1(lex calcLexer, lval *calcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = calcTok1[0]
		goto out
	}
	if char < len(calcTok1) {
		token = calcTok1[char]
		goto out
	}
	if char >= calcPrivate {
		if char < calcPrivate+len(calcTok2) {
			token = calcTok2[char-calcPrivate]
			goto out
		}
	}
	for i := 0; i < len(calcTok3); i += 2 {
		token = calcTok3[i+0]
		if token == char {
			token = calcTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = calcTok2[1] /* unknown char */
	}
	if calcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", calcTokname(token), uint(char))
	}
	return char, token
}

func calcParse(calclex calcLexer) int {
	return calcNewParser().Parse(calclex)
}

func (calcrcvr *calcParserImpl) Parse(calclex calcLexer) int {
	var calcn int
	var calcVAL calcSymType
	var calcDollar []calcSymType
	_ = calcDollar // silence set and not used
	calcS := calcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	calcstate := 0
	calcrcvr.char = -1
	calctoken := -1 // calcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		calcstate = -1
		calcrcvr.char = -1
		calctoken = -1
	}()
	calcp := -1
	goto calcstack

ret0:
	return 0

ret1:
	return 1

calcstack:
	/* put a state and value onto the stack */
	if calcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", calcTokname(calctoken), calcStatname(calcstate))
	}

	calcp++
	if calcp >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcS[calcp] = calcVAL
	calcS[calcp].yys = calcstate

calcnewstate:
	calcn = calcPact[calcstate]
	if calcn <= calcFlag {
		goto calcdefault /* simple state */
	}
	if calcrcvr.char < 0 {
		calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
	}
	calcn += calctoken
	if calcn < 0 || calcn >= calcLast {
		goto calcdefault
	}
	calcn = calcAct[calcn]
	if calcChk[calcn] == calctoken { /* valid shift */
		calcrcvr.char = -1
		calctoken = -1
		calcVAL = calcrcvr.lval
		calcstate = calcn
		if Errflag > 0 {
			Errflag--
		}
		goto calcstack
	}

calcdefault:
	/* default state action */
	calcn = calcDef[calcstate]
	if calcn == -2 {
		if calcrcvr.char < 0 {
			calcrcvr.char, calctoken = calclex1(calclex, &calcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if calcExca[xi+0] == -1 && calcExca[xi+1] == calcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			calcn = calcExca[xi+0]
			if calcn < 0 || calcn == calctoken {
				break
			}
		}
		calcn = calcExca[xi+1]
		if calcn < 0 {
			goto ret0
		}
	}
	if calcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			calclex.Error(calcErrorMessage(calcstate, calctoken))
			Nerrs++
			if calcDebug >= 1 {
				__yyfmt__.Printf("%s", calcStatname(calcstate))
				__yyfmt__.Printf(" saw %s\n", calcTokname(calctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for calcp >= 0 {
				calcn = calcPact[calcS[calcp].yys] + calcErrCode
				if calcn >= 0 && calcn < calcLast {
					calcstate = calcAct[calcn] /* simulate a shift of "error" */
					if calcChk[calcstate] == calcErrCode {
						goto calcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if calcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", calcS[calcp].yys)
				}
				calcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if calcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", calcTokname(calctoken))
			}
			if calctoken == calcEofCode {
				goto ret1
			}
			calcrcvr.char = -1
			calctoken = -1
			goto calcnewstate /* try again in the same state */
		}
	}

	/* reduction by production calcn */
	if calcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", calcn, calcStatname(calcstate))
	}

	calcnt := calcn
	calcpt := calcp
	_ = calcpt // guard against "declared and not used"

	calcp -= calcR2[calcn]
	// calcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if calcp+1 >= len(calcS) {
		nyys := make([]calcSymType, len(calcS)*2)
		copy(nyys, calcS)
		calcS = nyys
	}
	calcVAL = calcS[calcp+1]

	/* consult goto table to find next state */
	calcn = calcR1[calcn]
	calcg := calcPgo[calcn]
	calcj := calcg + calcS[calcp].yys + 1

	if calcj >= calcLast {
		calcstate = calcAct[calcg]
	} else {
		calcstate = calcAct[calcj]
		if calcChk[calcstate] != -calcn {
			calcstate = calcAct[calcg]
		}
	}
	// dummy call; replaced with literal code
	switch calcnt {

	case 1:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:395
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AST_NODE

			calcVAL.NodePt.Ast = &ASTNode{}
			calcVAL.NodePt.Ast.Type = AST_DDL
			calcVAL.NodePt.Ast.Ddl = calcDollar[1].NodePt.Ddl

			GetInstance().AST = calcVAL.NodePt.Ast
		}
	case 2:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:405
		{ // TODO
			calcVAL.NodePt = &Node{}
			fmt.Println("aaa")
		}
	case 3:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:409
		{ // TODO
			calcVAL.NodePt = &Node{}
			fmt.Println("psmCallStmt")
		}
	case 4:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:413
		{ // TODO
			calcVAL.NodePt = &Node{}
			fmt.Println("psmBody")
		}
	case 5:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:441
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_CREATE
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 6:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:449
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 7:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:457
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_ADD
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 8:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:465
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TABLE_ALTER_DROP
			calcVAL.NodePt.Ddl.Table = calcDollar[1].NodePt.Table
		}
	case 9:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:473
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_CREATE
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 10:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:481
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_ASSERT_DROP
			calcVAL.NodePt.Ddl.Assert = calcDollar[1].NodePt.Assert
		}
	case 11:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:489
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_CREATE
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 12:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:497
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_VIEW_DROP
			calcVAL.NodePt.Ddl.View = calcDollar[1].NodePt.View
		}
	case 13:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:505
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_CREATE
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 14:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:513
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_INDEX_DROP
			calcVAL.NodePt.Ddl.Index = calcDollar[1].NodePt.Index
		}
	case 15:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:521
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_CREATE
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 16:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:529
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DDL_NODE

			calcVAL.NodePt.Ddl = &DDLNode{}
			calcVAL.NodePt.Ddl.Type = DDL_TRIGGER_DROP
			calcVAL.NodePt.Ddl.Trigger = calcDollar[1].NodePt.Trigger
		}
	case 17:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:545
		{
			// TODO
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DML_NODE

			calcVAL.NodePt.Dml = &DMLNode{}
		}
	case 18:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:574
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}
		}
	case 19:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE
			calcVAL.NodePt.Table = &TableNode{}

			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			for _, v := range calcDollar[5].List.AttributeDeclarationList {
				calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, v.AttributeName)
				calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, v.Domain)
				if v.ConstraintAfterAttributeListValid {
					calcVAL.NodePt.Table.ConstraintListValid = true
					calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, v.ConstraintAfterAttributeList...)
				}
			}

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[7].List.ConstraintList...)
		}
	case 20:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:611
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRIBUTE_DECLARATION_LIST
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[1].NodePt.AttributeDeclaration)
		}
	case 21:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:616
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttributeDeclarationList = append(calcVAL.List.AttributeDeclarationList, calcDollar[3].NodePt.AttributeDeclaration)
		}
	case 22:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:624
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = false
		}
	case 23:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:633
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRIBUTE_DECLARATION_NODE

			calcVAL.NodePt.AttributeDeclaration = &AttributeDeclarationNode{}
			calcVAL.NodePt.AttributeDeclaration.AttributeName = calcDollar[1].String
			calcVAL.NodePt.AttributeDeclaration.Domain = calcDollar[2].NodePt.Domain
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid = true
			calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList = calcDollar[3].List.ConstraintAfterAttributeList

			for _, v := range calcVAL.NodePt.AttributeDeclaration.ConstraintAfterAttributeList {
				switch v.Type {
				case CONSTRAINT_UNIQUE:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_PRIMARY_KEY:
					v.AttriNameList = append(v.AttriNameList, calcDollar[1].String)
				case CONSTRAINT_FOREIGN_KEY:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_NOT_NULL:
					v.AttributeNameLocal = calcDollar[1].String
				case CONSTRAINT_DEFAULT:
					v.AttributeNameLocal = calcDollar[1].String
				default:
				}
			}
		}
	case 24:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:670
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
		}
	case 25:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:689
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].NodePt.AttributeDeclaration.AttributeName)
			calcVAL.NodePt.Table.DomainList = append(calcVAL.NodePt.Table.DomainList, calcDollar[5].NodePt.AttributeDeclaration.Domain)
			if calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeListValid {
				calcVAL.NodePt.Table.ConstraintListValid = true
				calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.AttributeDeclaration.ConstraintAfterAttributeList...)
			}

		}
	case 26:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:704
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String

			calcVAL.NodePt.Table.ConstraintListValid = true
			calcVAL.NodePt.Table.ConstraintList = append(calcVAL.NodePt.Table.ConstraintList, calcDollar[5].NodePt.Constraint)
		}
	case 27:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:726
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.AttributeNameList = append(calcVAL.NodePt.Table.AttributeNameList, calcDollar[5].String)
		}
	case 28:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:734
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TABLE_NODE

			calcVAL.NodePt.Table = &TableNode{}
			calcVAL.NodePt.Table.TableName = calcDollar[3].String
			calcVAL.NodePt.Table.ConstraintName = calcDollar[6].String
		}
	case 29:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:753
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
			calcVAL.NodePt.Assert.Condition = calcDollar[6].NodePt.Condition
		}
	case 30:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:772
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ASSERT_NODE

			calcVAL.NodePt.Assert = &AssertNode{}
			calcVAL.NodePt.Assert.AssertName = calcDollar[3].String
		}
	case 31:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:791
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[5].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = false
		}
	case 32:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:800
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
			calcVAL.NodePt.View.Query = calcDollar[8].NodePt.Query
			calcVAL.NodePt.View.AttributeNameListValid = true
			calcVAL.NodePt.View.AttributeNameList = calcDollar[5].StringList
		}
	case 33:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:821
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = VIEW_NODE

			calcVAL.NodePt.View = &ViewNode{}
			calcVAL.NodePt.View.ViewName = calcDollar[3].String
		}
	case 34:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:839
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
			calcVAL.NodePt.Index.TableName = calcDollar[5].String
			calcVAL.NodePt.Index.AttributeNameList = calcDollar[7].StringList
		}
	case 35:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:859
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = INDEX_NODE

			calcVAL.NodePt.Index = &IndexNode{}
			calcVAL.NodePt.Index.IndexName = calcDollar[3].String
		}
	case 36:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:920
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[8].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[9].List.DmlList
		}
	case 37:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:941
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = true
			calcVAL.NodePt.Trigger.Condition = calcDollar[6].NodePt.Condition

			calcVAL.NodePt.Trigger.DmlList = calcDollar[7].List.DmlList
		}
	case 38:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:961
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = true
			calcVAL.NodePt.Trigger.OldNewList = calcDollar[6].List.TriggerOldNewList

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[7].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[8].List.DmlList
		}
	case 39:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:981
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String

			calcVAL.NodePt.Trigger.BeforeAfterType = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterType
			calcVAL.NodePt.Trigger.BeforeAfterAttriName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName
			calcVAL.NodePt.Trigger.BeforeAfterTableName = calcDollar[4].NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName

			calcVAL.NodePt.Trigger.ReferencingValid = false

			calcVAL.NodePt.Trigger.ForEachType = calcDollar[5].NodePt.TriggerForEach

			calcVAL.NodePt.Trigger.WhenValid = false

			calcVAL.NodePt.Trigger.DmlList = calcDollar[6].List.DmlList
		}
	case 40:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1004
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 41:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1012
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 42:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1021
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 43:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:1029
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[4].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[6].String
		}
	case 44:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1038
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 45:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1046
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_UPDATE_OF
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterAttriName = calcDollar[5].String
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[7].String
		}
	case 46:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1055
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 47:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1063
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 48:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1071
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_INSERT
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 49:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1079
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = BEFORE_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 50:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1087
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = AFTER_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[4].String
		}
	case 51:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1095
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_BEFOREAFTER_NODE

			calcVAL.NodePt.TriggerBeforeAfterStmt = &TriggerBeforeAfterStmtNode{}
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterType = INSTEAD_DELETE
			calcVAL.NodePt.TriggerBeforeAfterStmt.BeforeAfterTableName = calcDollar[5].String
		}
	case 52:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1107
		{
			calcVAL.List = List{}
			calcVAL.List.Type = TRIGGER_OLDNEW_LIST

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[1].NodePt.TriggerOldNewEntry)
		}
	case 53:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1113
		{
			calcVAL.List = calcDollar[1].List

			calcVAL.List.TriggerOldNewList = append(calcVAL.List.TriggerOldNewList, calcDollar[3].NodePt.TriggerOldNewEntry)
		}
	case 54:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1122
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 55:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1130
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_ROW_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 56:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1138
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = OLD_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 57:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1146
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_OLDNEW_ENTRY

			calcVAL.NodePt.TriggerOldNewEntry = &TriggerOldNewEntryNode{}
			calcVAL.NodePt.TriggerOldNewEntry.Type = NEW_TABLE_AS
			calcVAL.NodePt.TriggerOldNewEntry.Name = calcDollar[4].String
		}
	case 58:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1158
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_ROW
		}
	case 59:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1163
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_FOR_EACH_ENUM
			calcVAL.NodePt.TriggerForEach = FOR_EACH_STATEMENT
		}
	case 60:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1172
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 61:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1179
		{
			calcVAL.List = calcDollar[2].List
		}
	case 62:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1186
		{
			calcVAL.List = List{}
			calcVAL.List.Type = DML_LIST

			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[1].NodePt.Dml)
		}
	case 63:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1192
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.DmlList = append(calcVAL.List.DmlList, calcDollar[2].NodePt.Dml)
		}
	case 64:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1207
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = TRIGGER_NODE

			calcVAL.NodePt.Trigger = &TriggerNode{}
			calcVAL.NodePt.Trigger.TriggerName = calcDollar[3].String
		}
	case 65:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1286
		{
			calcVAL.List = calcDollar[2].List
		}
	case 66:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1293
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[2].NodePt.PsmExecEntry)

		}
	case 67:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1298
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_EXEC_LIST

			calcVAL.List.PsmExecList = append(calcVAL.List.PsmExecList, calcDollar[1].NodePt.PsmExecEntry)
		}
	case 68:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1308
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_RETURN
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[2].NodePt.PsmValue
		}
	case 69:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1316
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_SET
			calcVAL.NodePt.PsmExecEntry.VariableName = calcDollar[2].String
			calcVAL.NodePt.PsmExecEntry.PsmValue = calcDollar[4].NodePt.PsmValue
		}
	case 70:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1325
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_FOR_LOOP
			calcVAL.NodePt.PsmExecEntry.PsmForLoop = calcDollar[1].NodePt.PsmForLoop
		}
	case 71:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1333
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_BRANCH
			calcVAL.NodePt.PsmExecEntry.PsmBranch = calcDollar[1].NodePt.PsmBranch
		}
	case 72:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1341
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_EXEC_ENTRY_NODE

			calcVAL.NodePt.PsmExecEntry = &PsmExecEntryNode{}
			calcVAL.NodePt.PsmExecEntry.Type = PSM_EXEC_DML
			calcVAL.NodePt.PsmExecEntry.Dml = calcDollar[1].NodePt.Dml
		}
	case 73:
		calcDollar = calcS[calcpt-12 : calcpt+1]
//line parser/grammar.y:1353
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_FOR_LOOP_NODE

			calcVAL.NodePt.PsmForLoop = &PsmForLoopNode{}
			calcVAL.NodePt.PsmForLoop.LoopName = calcDollar[2].String
			calcVAL.NodePt.PsmForLoop.CursorName = calcDollar[4].String
			calcVAL.NodePt.PsmForLoop.Subquery = calcDollar[7].NodePt.Query
			calcVAL.NodePt.PsmForLoop.PsmExecList = calcDollar[9].List.PsmExecList
		}
	case 74:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1367
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[7].List.PsmExecList
		}
	case 75:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:1380
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = true
			calcVAL.NodePt.PsmBranch.PsmElseifList = calcDollar[5].List.PsmElseifList
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 76:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1392
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = true
			calcVAL.NodePt.PsmBranch.ElsePsmExecList = calcDollar[6].List.PsmExecList
		}
	case 77:
		calcDollar = calcS[calcpt-7 : calcpt+1]
//line parser/grammar.y:1404
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_BRANCH_NODE

			calcVAL.NodePt.PsmBranch = &PsmBranchNode{}

			calcVAL.NodePt.PsmBranch.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmBranch.IfPsmExecList = calcDollar[4].List.PsmExecList
			calcVAL.NodePt.PsmBranch.PsmElseifListValid = false
			calcVAL.NodePt.PsmBranch.ElseValid = false
		}
	case 78:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1419
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[2].NodePt.PsmElseifEntry)
		}
	case 79:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1423
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_ELSEIF_LIST

			calcVAL.List.PsmElseifList = append(calcVAL.List.PsmElseifList, calcDollar[1].NodePt.PsmElseifEntry)
		}
	case 80:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1433
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_ELSEIF_ENTRY_NODE

			calcVAL.NodePt.PsmElseifEntry = &PsmElseifEntryNode{}
			calcVAL.NodePt.PsmElseifEntry.Condition = calcDollar[2].NodePt.Condition
			calcVAL.NodePt.PsmElseifEntry.PsmExecList = calcDollar[4].List.PsmExecList
		}
	case 81:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1445
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ELEMENTARY_VALUE
			calcVAL.NodePt.PsmValue.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 82:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1453
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_CALL
			calcVAL.NodePt.PsmValue.PsmCallStmt = calcDollar[1].NodePt.Psm
		}
	case 83:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1461
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_EXPRESSION
			calcVAL.NodePt.PsmValue.Expression = calcDollar[1].NodePt.Expression
		}
	case 84:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1469
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_VALUE_NODE

			calcVAL.NodePt.PsmValue = &PsmValueNode{}
			calcVAL.NodePt.PsmValue.Type = PSMVALUE_ID
			calcVAL.NodePt.PsmValue.Id = calcDollar[1].String
		}
	case 85:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1498
		{
			calcVAL.NodePt = calcDollar[1].NodePt
		}
	case 86:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1505
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = true
			calcVAL.NodePt.Psm.PsmValueList = calcDollar[4].List.PsmValueList
		}
	case 87:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1514
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PSM_NODE

			calcVAL.NodePt.Psm = &PsmNode{}
			calcVAL.NodePt.Psm.PsmName = calcDollar[2].String
			calcVAL.NodePt.Psm.PsmValueListValid = false
		}
	case 88:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1526
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[3].NodePt.PsmValue)
		}
	case 89:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1530
		{
			calcVAL.List = List{}
			calcVAL.List.Type = PSM_VALUE_LIST
			calcVAL.List.PsmValueList = append(calcVAL.List.PsmValueList, calcDollar[1].NodePt.PsmValue)
		}
	case 90:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1559
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_PLUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 91:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1568
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MINUS
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 92:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1577
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_MULTIPLY
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 93:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1586
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_DIVISION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 94:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1595
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_NODE

			calcVAL.NodePt.Expression = &ExpressionNode{}
			calcVAL.NodePt.Expression.Type = EXPRESSION_OPERATOR_CONCATENATION
			calcVAL.NodePt.Expression.ExpressionEntryL = calcDollar[1].NodePt.ExpressionEntry
			calcVAL.NodePt.Expression.ExpressionEntryR = calcDollar[3].NodePt.ExpressionEntry
		}
	case 95:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1608
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ELEMENTARY_VALUE

			calcVAL.NodePt.ExpressionEntry.ElementaryValue = calcDollar[1].NodePt.ElementaryValue
		}
	case 96:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1617
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_ATTRIBUTE_NAME

			calcVAL.NodePt.ExpressionEntry.AttriNameOptionTableName = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 97:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1626
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_AGGREGATION

			calcVAL.NodePt.ExpressionEntry.Aggregation = calcDollar[1].NodePt.Aggregation
		}
	case 98:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1635
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[1].NodePt.Expression
		}
	case 99:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1644
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = EXPRESSION_ENTRY_NODE

			calcVAL.NodePt.ExpressionEntry = &ExpressionEntryNode{}
			calcVAL.NodePt.ExpressionEntry.Type = EXPRESSION_ENTRY_EXPRESSION

			calcVAL.NodePt.ExpressionEntry.Expression = calcDollar[2].NodePt.Expression
		}
	case 100:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1674
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 101:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1683
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_SUM
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 102:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1692
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 103:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1701
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_AVG
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 104:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1710
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 105:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1719
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MIN
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 106:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1728
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 107:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1737
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_MAX
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 108:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:1746
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = true
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[4].NodePt.AttriNameOptionTableName
		}
	case 109:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1755
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT
			calcVAL.NodePt.Aggregation.DistinctValid = false
			calcVAL.NodePt.Aggregation.AttriNameOptionTableName = calcDollar[3].NodePt.AttriNameOptionTableName
		}
	case 110:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1764
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = AGGREGATION_NODE

			calcVAL.NodePt.Aggregation = &AggregationNode{}
			calcVAL.NodePt.Aggregation.Type = AGGREGATION_COUNT_ALL
			calcVAL.NodePt.Aggregation.DistinctValid = false
		}
	case 111:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1845
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 112:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1850
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_AFTER_ATTRIBUTE_LIST
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[1].NodePt.Constraint)
		}
	case 113:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1855
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 114:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1859
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintAfterAttributeList = append(calcVAL.List.ConstraintAfterAttributeList, calcDollar[2].NodePt.Constraint)
		}
	case 115:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1867
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 116:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1872
		{
			calcVAL.List = List{}
			calcVAL.List.Type = CONSTRAINT_LIST
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[1].NodePt.Constraint)
		}
	case 117:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1877
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 118:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1881
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.ConstraintList = append(calcVAL.List.ConstraintList, calcDollar[3].NodePt.Constraint)
		}
	case 119:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1889
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 120:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1898
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 121:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1907
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
			calcVAL.NodePt.Constraint.AttriNameList = calcDollar[3].StringList
		}
	case 122:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:1916
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_CHECK
			calcVAL.NodePt.Constraint.Condition = calcDollar[3].NodePt.Condition
		}
	case 123:
		calcDollar = calcS[calcpt-9 : calcpt+1]
//line parser/grammar.y:1925
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String
		}
	case 124:
		calcDollar = calcS[calcpt-10 : calcpt+1]
//line parser/grammar.y:1936
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.AttributeNameLocal = calcDollar[3].String
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[6].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[8].String

			if calcDollar[10].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[10].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[10].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[10].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[10].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 125:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:1964
		{
			calcVAL.NodePt = calcDollar[3].NodePt
			calcVAL.NodePt.Constraint.ConstraintNameValid = true
			calcVAL.NodePt.Constraint.ConstraintName = calcDollar[2].String
		}
	case 126:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1973
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_DEFAULT
			calcVAL.NodePt.Constraint.ElementaryValue = calcDollar[2].NodePt.ElementaryValue
		}
	case 127:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1982
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_UNIQUE
		}
	case 128:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:1990
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_PRIMARY_KEY
		}
	case 129:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:1998
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_NOT_NULL
		}
	case 130:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2006
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String
		}
	case 131:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2016
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_NODE
			calcVAL.NodePt.Constraint = &ConstraintNode{}
			calcVAL.NodePt.Constraint.ConstraintNameValid = false

			calcVAL.NodePt.Constraint.Type = CONSTRAINT_FOREIGN_KEY
			calcVAL.NodePt.Constraint.ForeignTableName = calcDollar[2].String
			calcVAL.NodePt.Constraint.AttributeNameForeign = calcDollar[4].String

			if calcDollar[6].NodePt.ForeignKeyParameter.DeferrableValid {
				calcVAL.NodePt.Constraint.Deferrable = calcDollar[6].NodePt.ForeignKeyParameter.Deferrable
				calcVAL.NodePt.Constraint.DeferrableValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.UpdateSetValid {
				calcVAL.NodePt.Constraint.UpdateSet = calcDollar[6].NodePt.ForeignKeyParameter.UpdateSet
				calcVAL.NodePt.Constraint.UpdateSetValid = true
			}
			if calcDollar[6].NodePt.ForeignKeyParameter.DeleteSetValid {
				calcVAL.NodePt.Constraint.DeleteSet = calcDollar[6].NodePt.ForeignKeyParameter.DeleteSet
				calcVAL.NodePt.Constraint.DeleteSetValid = true
			}
		}
	case 132:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2043
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 133:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2053
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 134:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2063
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 135:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2073
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 136:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2084
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = false
		}
	case 137:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2095
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 138:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2106
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = false
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 139:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2117
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 140:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2128
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = false
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 141:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2139
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 142:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2151
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[1].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 143:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2163
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[3].NodePt.ConstraintDeleteSet
		}
	case 144:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2175
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[1].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[2].NodePt.ConstraintDeleteSet
		}
	case 145:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2187
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[2].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[3].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 146:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2199
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = FOREIGNKEY_PARAMETER_NODE
			calcVAL.NodePt.ForeignKeyParameter = &ForeignKeyParameterNode{}

			calcVAL.NodePt.ForeignKeyParameter.DeferrableValid = true
			calcVAL.NodePt.ForeignKeyParameter.Deferrable = calcDollar[3].NodePt.ConstraintDeferrable
			calcVAL.NodePt.ForeignKeyParameter.UpdateSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.UpdateSet = calcDollar[2].NodePt.ConstraintUpdateSet
			calcVAL.NodePt.ForeignKeyParameter.DeleteSetValid = true
			calcVAL.NodePt.ForeignKeyParameter.DeleteSet = calcDollar[1].NodePt.ConstraintDeleteSet
		}
	case 147:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2215
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_NOT_DEFERRABLE
		}
	case 148:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2220
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_DEFERRED
		}
	case 149:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2225
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DEFERRABLE_ENUM
			calcVAL.NodePt.ConstraintDeferrable = CONSTRAINT_INITIALLY_IMMEDIATE
		}
	case 150:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2234
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_NULL
		}
	case 151:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2239
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_UPDATE_SET_ENUM
			calcVAL.NodePt.ConstraintUpdateSet = CONSTRAINT_UPDATE_SET_CASCADE
		}
	case 152:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2248
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_NULL
		}
	case 153:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2253
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONSTRAINT_DELETE_SET_ENUM
			calcVAL.NodePt.ConstraintDeleteSet = CONSTRAINT_DELETE_SET_CASCADE
		}
	case 154:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2272
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_PREDICATE
			calcVAL.NodePt.Condition.Predicate = calcDollar[1].NodePt.Predicate
		}
	case 155:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2280
		{
			calcVAL.NodePt = calcDollar[2].NodePt
		}
	case 156:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2283
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_AND
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 157:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2292
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = CONDITION_NODE

			calcVAL.NodePt.Condition = &ConditionNode{}
			calcVAL.NodePt.Condition.Type = CONDITION_OR
			calcVAL.NodePt.Condition.ConditionL = calcDollar[1].NodePt.Condition
			calcVAL.NodePt.Condition.ConditionR = calcDollar[3].NodePt.Condition
		}
	case 158:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2343
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ELEMENTARY_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.ElementaryValue = calcDollar[3].NodePt.ElementaryValue
		}
	case 159:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2354
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_LIKE_STRING_VALUE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.Predicate.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.Predicate.ElementaryValue.StringValue = calcDollar[3].String
		}
	case 160:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2366
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 161:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2376
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 162:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2386
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[3].String
		}
	case 163:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2396
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 164:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2406
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 165:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2417
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 166:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2428
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[4].NodePt.Subquery
		}
	case 167:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2439
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 168:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2450
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 169:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2461
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ALL_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 170:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2472
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[2].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[4].String
		}
	case 171:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2483
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_COMPARE_NOT_ANY_TABLE

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[2].NodePt.AttriNameOptionTableName
			calcVAL.NodePt.Predicate.CompareMark = calcDollar[3].NodePt.CompareMark
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 172:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2494
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 173:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2503
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_IS_NOT_NULL

			calcVAL.NodePt.Predicate.AttriNameWithTableNameL = calcDollar[1].NodePt.AttriNameOptionTableName
		}
	case 174:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2512
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[5].NodePt.Subquery
		}
	case 175:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2522
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_SUBQUERY

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.Subquery = calcDollar[6].NodePt.Subquery
		}
	case 176:
		calcDollar = calcS[calcpt-5 : calcpt+1]
//line parser/grammar.y:2532
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[5].String
		}
	case 177:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2542
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_TUPLE_NOT_IN_TABLE

			calcVAL.NodePt.Predicate.AttriNameOptionTableNameList = calcDollar[2].List.AttriNameOptionTableNameList
			calcVAL.NodePt.Predicate.TableName = calcDollar[6].String
		}
	case 178:
		calcDollar = calcS[calcpt-2 : calcpt+1]
//line parser/grammar.y:2552
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[2].NodePt.Subquery
		}
	case 179:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2561
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = PREDICATE_NODE

			calcVAL.NodePt.Predicate = &PredicateNode{}
			calcVAL.NodePt.Predicate.Type = PREDICATE_SUBQUERY_NOT_EXISTS

			calcVAL.NodePt.Predicate.Subquery = calcDollar[3].NodePt.Subquery
		}
	case 180:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2574
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_EQUAL
		}
	case 181:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2579
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_NOTEQUAL
		}
	case 182:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2584
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESS
		}
	case 183:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2589
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATER
		}
	case 184:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2594
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_LESSEQUAL
		}
	case 185:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2599
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = COMPAREMARK_ENUM
			calcVAL.NodePt.CompareMark = COMPAREMARK_GREATEREQUAL
		}
	case 186:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2629
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_CHAR
		}
	case 187:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2636
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_VARCHAR
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 188:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2644
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BIT
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 189:
		calcDollar = calcS[calcpt-4 : calcpt+1]
//line parser/grammar.y:2652
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BITVARYING
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
		}
	case 190:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2660
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_BOOLEAN
		}
	case 191:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2667
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INT
		}
	case 192:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2674
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_INTEGER
		}
	case 193:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2681
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_SHORTINT
		}
	case 194:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2688
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_FLOAT
		}
	case 195:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2695
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_REAL
		}
	case 196:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2702
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DOUBLEPRECISION
		}
	case 197:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2709
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DECIMAL
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 198:
		calcDollar = calcS[calcpt-6 : calcpt+1]
//line parser/grammar.y:2718
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_NUMERIC
			calcVAL.NodePt.Domain.N = calcDollar[3].Int
			calcVAL.NodePt.Domain.D = calcDollar[5].Int
		}
	case 199:
		calcDollar = calcS[calcpt-8 : calcpt+1]
//line parser/grammar.y:2727
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_DATE
		}
	case 200:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2734
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = DOMAIN_NODE

			calcVAL.NodePt.Domain = &DomainNode{}
			calcVAL.NodePt.Domain.Type = DOMAIN_TIME
		}
	case 201:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2753
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = false
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[1].String
		}
	case 202:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2760
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ATTRINAME_OPTION_TABLENAME_NODE
			calcVAL.NodePt.AttriNameOptionTableName = &AttriNameOptionTableNameNode{}
			calcVAL.NodePt.AttriNameOptionTableName.TableNameValid = true
			calcVAL.NodePt.AttriNameOptionTableName.TableName = calcDollar[1].String
			calcVAL.NodePt.AttriNameOptionTableName.AttributeName = calcDollar[3].String
		}
	case 203:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2779
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = SUBQUERY_NODE
			calcVAL.NodePt.Subquery = &QueryNode{}
		}
	case 204:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2799
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_INT
			calcVAL.NodePt.ElementaryValue.IntValue = calcDollar[1].Int
		}
	case 205:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2806
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_FLOAT
			calcVAL.NodePt.ElementaryValue.FloatValue = calcDollar[1].Float
		}
	case 206:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2813
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_STRING
			calcVAL.NodePt.ElementaryValue.StringValue = calcDollar[1].String
		}
	case 207:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2820
		{
			calcVAL.NodePt = &Node{}
			calcVAL.NodePt.Type = ELEMENTARY_VALUE_NODE
			calcVAL.NodePt.ElementaryValue = &ElementaryValueNode{}
			calcVAL.NodePt.ElementaryValue.Type = ELEMENTARY_VALUE_BOOLEAN
			calcVAL.NodePt.ElementaryValue.BooleanValue = calcDollar[1].Boolean
		}
	case 208:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2845
		{
			calcVAL.StringList = append(calcDollar[1].StringList, calcDollar[3].String)
		}
	case 209:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2848
		{
			calcVAL.StringList = append(calcVAL.StringList, calcDollar[1].String)
		}
	case 210:
		calcDollar = calcS[calcpt-3 : calcpt+1]
//line parser/grammar.y:2855
		{
			calcVAL.List = calcDollar[1].List
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[3].NodePt.AttriNameOptionTableName)
		}
	case 211:
		calcDollar = calcS[calcpt-1 : calcpt+1]
//line parser/grammar.y:2859
		{
			calcVAL.List = List{}
			calcVAL.List.Type = ATTRINAME_OPTION_TABLENAME_LIST
			calcVAL.List.AttriNameOptionTableNameList = append(calcVAL.List.AttriNameOptionTableNameList, calcDollar[1].NodePt.AttriNameOptionTableName)
		}
	}
	goto calcstack /* stack new state and value */
}
