@startuml

class dataPage {
    -mark bool
    -modified bool
    -pageId uint32
    -tableId uint32
    -pageMode uint32
    -tupleNum int32
    -dataSize int32
    -priorPageId uint32
    -nextPageId uint32
    -linkPrePageId uint32
    -linkNextPageId uint32
    -tuples []*Tuple
    -data []byte

    +{static} NewDataPageFromBytes(bytes []byte, schema *Schema) (*dataPage, error)
    +{static} NewDataPageMode0(pageId uint32, tableId uint32, priorPageId uint32, nextPageId uint32) *dataPage
    +{static} NewDataPageMode1(pageId uint32, tableId uint32, priorPageId uint32, nextPageId uint32, linkNextPageId uint32, data []byte) *dataPage
    +{static} NewDataPageMode2(pageId uint32, tableId uint32, dataSize int32, linkPrePageId uint32, linkNextPageId uint32, data []byte) *dataPage
    +DataPageToBytes() ([]byte, error)
    +DataPageMode() uint32
    +MarkDataPage()
    +UnmarkDataPage()
    +DataPageIsMarked() bool
    +ModifyDataPage()
    +UnmodifyDataPage()
    +DataPageIsModified() bool
    +DpSizeInByte() int
    +DpVacantByteNum() int
    +InsertTuple(tup *Tuple) error
    +DpDeleteTuple(tupleId uint32) bool
    +DpIsHeadPage() (bool, error)
    +DpIsTailPage() (bool, error)
    +DpIsListHeadPage() (bool, error)
    +DpIsListTailPage() (bool, error)
    +DpGetPageId() uint32
    +DpGetTableId() uint32
    +DpGetPriorPageId() (uint32, error)
    +DpSetPriorPageId(priorPageId uint32) error
    +DpGetNextPageId() (uint32, error)
    +DpSetNextPageId(nextPageId uint32)
    +DpGetLinkPrePageId() (uint32, error)
    +DpSetLinkPrePageId(linkPrePageId uint32) error
    +DpGetLinkNextPageId() (uint32, error)
    +DpSetLinkNextPageId(linkNextPageId uint32) error
    +DpGetTupleNum() int32
}

class IOManipulator {
    -dataFileLocation string
    -indexFileLocation string
    -logFileLocation string
    -dataFile *os.File
    -indexFile *os.File
    -logFile *os.File

    +{static} GetIOManipulator(dfl string, ifl string, lfl string) (*IOManipulator, error)
    +CloseIOM() error
    +BytesToDataFile(bytes []byte, pos uint32) error
    +BytesToIndexFile(bytes []byte, pos uint32) error
    +BytesToLogFile(bytes []byte, pos uint32) error
    +BytesFromDataFile(pos uint32, len int) ([]byte, error)
    +BytesFromIndexFile(pos uint32, len int) ([]byte, error)
    +BytesFromLogFile(pos uint32, len int) ([]byte, error)
    +EmptyDataFile() error
    +EmptyIndexFile() error
    +EmptyLogFile() error
}

class dataBuffer {
    -buffer map[uint32]*dataPage
    -mapper map[uint32]uint32
    -bufferSlots []uint32
    +{static} NewDataBuffer() *dataBuffer
    +DataBufferFetchPage(pageId uint32) (*dataPage, error)
    +DataBufferInsertDataPage(*dataPage) error
    +DataBufferDeleteDataPage(pageId uint32) error
    +DataBufferEvictDataPage() (*dataPage, error)
    +DataBufferIsFull() bool
    +DataBufferIsEmpty() bool
}

class storageEngine {

}

class indexBuffer {

}

class indexPage {

}

class logPage {

}

class log {
    -fileMode int32
	-logPageId uint32
	-objectPageId uint32
    +{static} NewLog(fileMode int32, logPageId uint32, objectPageId uint32) *log
    +{static} NewLogFromBytes(bytes []byte) (*log, error)
    +LogToBytes() []byte
    +LogGetFileMode() int32
    +LogGetlogPageId() uint32
    +LogGetobjectPageId() uint32
}

storageEngine *-down- IOManipulator
storageEngine *-left- dataBuffer
dataBuffer o-left- dataPage
storageEngine *-right- indexBuffer
indexBuffer o-right- indexPage
logPage o-- log



@enduml